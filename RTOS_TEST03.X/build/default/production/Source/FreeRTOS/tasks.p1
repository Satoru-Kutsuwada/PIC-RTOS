Version 4.0 HI-TECH Software Intermediate Code
"158 Source/FreeRTOS/include/list.h
[; ;Source/FreeRTOS/include/list.h: 158:     {
[s S932 `us 1 `*S930 1 `*S930 1 ]
[n S932 xMINI_LIST_ITEM xItemValue pxNext pxPrevious ]
"173
[; ;Source/FreeRTOS/include/list.h: 173: {
[s S931 `Vuc 1 `*S930 1 `S932 1 ]
[n S931 xLIST uxNumberOfItems pxIndex xListEnd ]
"145
[; ;Source/FreeRTOS/include/list.h: 145: {
[s S930 `us 1 `*S930 1 `*S930 1 `*v 1 `*S931 1 ]
[n S930 xLIST_ITEM xItemValue pxNext pxPrevious pvOwner pvContainer ]
"280 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 280: {
[s S936 `*Vuc 1 `S930 1 `S930 1 `uc 1 `*uc 1 `uc -> 4 `i `*uc 1 `uc 1 `uc 1 `Vul -> -> 1 `i `ux `Vuc -> -> 1 `i `ux ]
[n S936 tskTaskControlBlock pxTopOfStack xStateListItem xEventListItem uxPriority pxStack pcTaskName pxEndOfStack uxTCBNumber uxTaskNumber ulNotifiedValue ucNotifyState ]
[v F7526 `(v ~T0 @X0 0 tf1`*v ]
[v F7528 `*Cuc ~T0 @X0 1 t ]
[v F7529 `*v ~T0 @X0 1 t ]
[v F7530 `**S936 ~T0 @X0 1 t ]
[v F7532 `(v ~T0 @X0 0 tf1`*v ]
"175 Source/FreeRTOS/include/portable.h
[; ;Source/FreeRTOS/include/portable.h: 175: void * pvPortMalloc( size_t xSize ) ;
[v _pvPortMalloc `(*v ~T0 @X0 0 ef1`ui ]
"422 Source/FreeRTOS/include\FreeRTOS.h
[; ;Source/FreeRTOS/include\FreeRTOS.h: 422: void Xprintf(const char *string, ...);
[v _Xprintf `(v ~T0 @X0 0 ev`*Cuc ]
"322
[; ;Source/FreeRTOS/include\FreeRTOS.h: 322: extern uint8_t isr_cnt;
[v _isr_cnt `uc ~T0 @X0 0 e ]
"12798 Source\pic18f47j53.h
[; ;Source\pic18f47j53.h: 12798:     struct {
[s S588 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S588 . TX9D TRMT BRGH SENDB SYNC TXEN TX9 CSRC ]
"12808
[; ;Source\pic18f47j53.h: 12808:     struct {
[s S589 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S589 . TX9D2 TRMT2 BRGH2 SENDB2 SYNC2 TXEN2 TX92 CSRC2 ]
"12818
[; ;Source\pic18f47j53.h: 12818:     struct {
[s S590 :1 `uc 1 :5 `uc 1 :1 `uc 1 ]
[n S590 . TXD82 . TX8_92 ]
"12797
[; ;Source\pic18f47j53.h: 12797: typedef union {
[u S587 `S588 1 `S589 1 `S590 1 ]
[n S587 . . . . ]
"12824
[; ;Source\pic18f47j53.h: 12824: extern volatile TXSTA2bits_t TXSTA2bits __attribute__((address(0xFA8)));
[v _TXSTA2bits `VS587 ~T0 @X0 0 e@4008 ]
"12919
[; ;Source\pic18f47j53.h: 12919: extern volatile unsigned char TXREG2 __attribute__((address(0xFA9)));
[v _TXREG2 `Vuc ~T0 @X0 0 e@4009 ]
"320 Source/FreeRTOS/include\FreeRTOS.h
[; ;Source/FreeRTOS/include\FreeRTOS.h: 320: extern const char ConvC[];
[v _ConvC `Cuc ~T0 @X0 -> 0 `x e ]
"29 C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h
[; ;C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h: 29: void *memset (void *, int, size_t);
[v _memset `(*v ~T0 @X0 0 ef3`*v`i`ui ]
"178 Source/FreeRTOS/include/portable.h
[; ;Source/FreeRTOS/include/portable.h: 178: void vPortFree( void * pv ) ;
[v _vPortFree `(v ~T0 @X0 0 ef1`*v ]
[v F7503 `(v ~T0 @X0 0 tf1`*v ]
[v F7505 `*Cuc ~T0 @X0 1 t ]
[v F7506 `*v ~T0 @X0 1 t ]
[v F7507 `**S936 ~T0 @X0 1 t ]
"129 Source/FreeRTOS/include/task.h
[s S938 `*v 1 `ul 1 `ul 1 ]
[n S938 xMEMORY_REGION pvBaseAddress ulLengthInBytes ulParameters ]
[v F7508 `*CS938 ~T0 @X0 1 t ]
"601 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 601: static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
[v _prvInitialiseNewTask `(v ~T0 @X0 0 sf8`*F7503`C*Cuc`Cul`C*v`uc`C**S936`*S936`C*CS938 ]
"614
[; ;Source/FreeRTOS/tasks.c: 614: static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) ;
[v _prvAddNewTaskToReadyList `(v ~T0 @X0 0 sf1`*S936 ]
[v F7547 `(v ~T0 @X0 0 tf1`*v ]
[v F7549 `*Cuc ~T0 @X0 1 t ]
[v F7550 `*v ~T0 @X0 1 t ]
[v F7551 `**S936 ~T0 @X0 1 t ]
[v F7552 `*CS938 ~T0 @X0 1 t ]
[v F7554 `(v ~T0 @X0 0 tf1`*v ]
[v F7065 `*S930 ~T0 @X0 1 t ]
"441 Source/FreeRTOS/include/list.h
[; ;Source/FreeRTOS/include/list.h: 441: void vListInitialiseItem( ListItem_t * const pxItem ) ;
[v _vListInitialiseItem `(v ~T0 @X0 0 ef1`C*S930 ]
[v F6929 `(v ~T0 @X0 0 tf1`*v ]
"127 Source/FreeRTOS/include/portable.h
[; ;Source/FreeRTOS/include/portable.h: 127:         StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
[v _pxPortInitialiseStack `(*uc ~T0 @X0 0 ef3`*uc`*F6929`*v ]
"18563 Source\pic18f47j53.h
[; ;Source\pic18f47j53.h: 18563: extern volatile unsigned char POSTINC1 __attribute__((address(0xFE6)));
[v _POSTINC1 `Vuc ~T0 @X0 0 e@4070 ]
"18962
[; ;Source\pic18f47j53.h: 18962: extern volatile unsigned char INTCON __attribute__((address(0xFF2)));
[v _INTCON `Vuc ~T0 @X0 0 e@4082 ]
"18968
[; ;Source\pic18f47j53.h: 18968:     struct {
[s S894 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S894 . RBIF INT0IF TMR0IF RBIE INT0IE TMR0IE PEIE_GIEL GIE_GIEH ]
"18978
[; ;Source\pic18f47j53.h: 18978:     struct {
[s S895 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S895 . . INT0F T0IF . INT0E T0IE PEIE GIE ]
"18988
[; ;Source\pic18f47j53.h: 18988:     struct {
[s S896 :6 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S896 . . GIEL GIEH ]
"18967
[; ;Source\pic18f47j53.h: 18967: typedef union {
[u S893 `S894 1 `S895 1 `S896 1 ]
[n S893 . . . . ]
"18994
[; ;Source\pic18f47j53.h: 18994: extern volatile INTCONbits_t INTCONbits __attribute__((address(0xFF2)));
[v _INTCONbits `VS893 ~T0 @X0 0 e@4082 ]
"486 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 486: static void prvInitialiseTaskLists( void ) ;
[v _prvInitialiseTaskLists `(v ~T0 @X0 0 sf ]
"18583 Source\pic18f47j53.h
[; ;Source\pic18f47j53.h: 18583: extern volatile unsigned char INDF1 __attribute__((address(0xFE7)));
[v _INDF1 `Vuc ~T0 @X0 0 e@4071 ]
"92 Source/FreeRTOS/portable/PIC18F\portmacro.h
[; ;Source/FreeRTOS/portable/PIC18F\portmacro.h: 92: extern void vPortYield( void );
[v _vPortYield `(v ~T0 @X0 0 ef ]
"1861 Source/FreeRTOS/include/task.h
[v _vTaskList `(v ~T0 @X0 0 ef1`*uc ]
[v F7083 `*S930 ~T0 @X0 1 t ]
"492 Source/FreeRTOS/include/list.h
[; ;Source/FreeRTOS/include/list.h: 492: UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;
[v _uxListRemove `(uc ~T0 @X0 0 ef1`C*S930 ]
[v F7076 `*S931 ~T0 @X0 1 t ]
[v F7077 `*S930 ~T0 @X0 1 t ]
"476
[; ;Source/FreeRTOS/include/list.h: 476: void vListInsertEnd( List_t * const pxList,
[v _vListInsertEnd `(v ~T0 @X0 0 ef2`C*S931`C*S930 ]
"584 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 584: static void prvResetNextTaskUnblockTime( void ) ;
[v _prvResetNextTaskUnblockTime `(v ~T0 @X0 0 sf ]
"509
[; ;Source/FreeRTOS/tasks.c: 509:     static void prvDeleteTCB( TCB_t * pxTCB ) ;
[v _prvDeleteTCB `(v ~T0 @X0 0 sf1`*S936 ]
[v F7585 `*us ~T0 @X0 1 t ]
"1370 Source/FreeRTOS/include/task.h
[v _vTaskSuspendAll `(v ~T0 @X0 0 ef ]
"524 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 524: static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
[v _prvAddCurrentTaskToDelayedList `(v ~T0 @X0 0 sf2`us`Cc ]
"1426 Source/FreeRTOS/include/task.h
[v _xTaskResumeAll `(c ~T0 @X0 0 ef ]
"1534 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 1534:     eTaskState eTaskGetState( TaskHandle_t xTask )
[c E7103 0 1 2 3 4 5 .. ]
[n E7103 . eRunning eReady eBlocked eSuspended eDeleted eInvalid  ]
[v F7608 `*S936 ~T0 @X0 1 t ]
[v F7614 `*S936 ~T0 @X0 1 t ]
"3014 Source/FreeRTOS/include/task.h
[v _vTaskSwitchContext `(v ~T0 @X0 0 ef ]
[v F7635 `*S936 ~T0 @X0 1 t ]
"498 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 498: static void prvIdleTask( void *pvParameters ) ;
[v _prvIdleTask `(v ~T0 @X0 0 sf1`*v ]
"208 Source/FreeRTOS/include/portable.h
[; ;Source/FreeRTOS/include/portable.h: 208: BaseType_t xPortStartScheduler( void ) ;
[v _xPortStartScheduler `(c ~T0 @X0 0 ef ]
"215
[; ;Source/FreeRTOS/include/portable.h: 215: void vPortEndScheduler( void ) ;
[v _vPortEndScheduler `(v ~T0 @X0 0 ef ]
"2924 Source/FreeRTOS/include/task.h
[v _xTaskIncrementTick `(c ~T0 @X0 0 ef ]
"155
[s S940 `*S936 1 `*Cuc 1 `uc 1 `E7103 1 `uc 1 `uc 1 `ul 1 `*uc 1 `us 1 ]
[n S940 xTASK_STATUS xHandle pcTaskName xTaskNumber eCurrentState uxCurrentPriority uxBasePriority ulRunTimeCounter pxStackBase usStackHighWaterMark ]
[v F7684 `*S940 ~T0 @X0 1 t ]
[v F7685 `*ul ~T0 @X0 1 t ]
"537 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 537:     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
[v _prvListTasksWithinSingleList `(uc ~T0 @X0 0 sf3`*S940`*S931`E7103 ]
[v F7741 `*S931 ~T0 @X0 1 t ]
[v F7069 `*S931 ~T0 @X0 1 t ]
[v F7070 `*S930 ~T0 @X0 1 t ]
"454 Source/FreeRTOS/include/list.h
[; ;Source/FreeRTOS/include/list.h: 454: void vListInsert( List_t * const pxList,
[v _vListInsert `(v ~T0 @X0 0 ef2`C*S931`C*S930 ]
[v F7752 `*CS931 ~T0 @X0 1 t ]
"120 Source/FreeRTOS/include/task.h
[s S937 `c 1 `us 1 ]
[n S937 xTIME_OUT xOverflowCount xTimeOnEntering ]
[v F7777 `*S937 ~T0 @X0 1 t ]
[v F7781 `*S937 ~T0 @X0 1 t ]
[v F7785 `*S937 ~T0 @X0 1 t ]
[v F7786 `*us ~T0 @X0 1 t ]
"518 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 518: static void prvCheckTasksWaitingTermination( void ) ;
[v _prvCheckTasksWaitingTermination `(v ~T0 @X0 0 sf ]
[v F7061 `*S931 ~T0 @X0 1 t ]
"430 Source/FreeRTOS/include/list.h
[; ;Source/FreeRTOS/include/list.h: 430: void vListInitialise( List_t * const pxList ) ;
[v _vListInitialise `(v ~T0 @X0 0 ef1`C*S931 ]
"561 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 561:     static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) ;
[v _prvTaskCheckFreeStackSpace `(us ~T0 @X0 0 sf1`*Cuc ]
"33 C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h
[; ;C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h: 33: char *strcpy (char *restrict, const char *restrict);
[v _strcpy `(*uc ~T0 @X0 0 ef2`*uc`*Cuc ]
"54
[; ;C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h: 54: size_t strlen (const char *);
[v _strlen `(ui ~T0 @X0 0 ef1`*Cuc ]
"5084 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 5084:     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
[c E7111 0 1 2 3 4 .. ]
[n E7111 . eNoAction eSetBits eIncrement eSetValueWithOverwrite eSetValueWithoutOverwrite  ]
"57 Source\pic18f47j53.h
[; ;Source\pic18f47j53.h: 57: __asm("ADCTRIG equ 0EB8h");
[; <" ADCTRIG equ 0EB8h ;# ">
"113
[; ;Source\pic18f47j53.h: 113: __asm("PMDIS0 equ 0EB9h");
[; <" PMDIS0 equ 0EB9h ;# ">
"118
[; ;Source\pic18f47j53.h: 118: __asm("PD0 equ 0EB9h");
[; <" PD0 equ 0EB9h ;# ">
"419
[; ;Source\pic18f47j53.h: 419: __asm("PMDIS1 equ 0EBAh");
[; <" PMDIS1 equ 0EBAh ;# ">
"424
[; ;Source\pic18f47j53.h: 424: __asm("PD1 equ 0EBAh");
[; <" PD1 equ 0EBAh ;# ">
"657
[; ;Source\pic18f47j53.h: 657: __asm("PMDIS2 equ 0EBBh");
[; <" PMDIS2 equ 0EBBh ;# ">
"662
[; ;Source\pic18f47j53.h: 662: __asm("PD2 equ 0EBBh");
[; <" PD2 equ 0EBBh ;# ">
"867
[; ;Source\pic18f47j53.h: 867: __asm("PMDIS3 equ 0EBCh");
[; <" PMDIS3 equ 0EBCh ;# ">
"872
[; ;Source\pic18f47j53.h: 872: __asm("PD3 equ 0EBCh");
[; <" PD3 equ 0EBCh ;# ">
"1105
[; ;Source\pic18f47j53.h: 1105: __asm("PPSCON equ 0EBFh");
[; <" PPSCON equ 0EBFh ;# ">
"1125
[; ;Source\pic18f47j53.h: 1125: __asm("RPOR0 equ 0EC0h");
[; <" RPOR0 equ 0EC0h ;# ">
"1132
[; ;Source\pic18f47j53.h: 1132: __asm("RPOR1 equ 0EC1h");
[; <" RPOR1 equ 0EC1h ;# ">
"1139
[; ;Source\pic18f47j53.h: 1139: __asm("RPOR2 equ 0EC2h");
[; <" RPOR2 equ 0EC2h ;# ">
"1146
[; ;Source\pic18f47j53.h: 1146: __asm("RPOR3 equ 0EC3h");
[; <" RPOR3 equ 0EC3h ;# ">
"1153
[; ;Source\pic18f47j53.h: 1153: __asm("RPOR4 equ 0EC4h");
[; <" RPOR4 equ 0EC4h ;# ">
"1160
[; ;Source\pic18f47j53.h: 1160: __asm("RPOR5 equ 0EC5h");
[; <" RPOR5 equ 0EC5h ;# ">
"1167
[; ;Source\pic18f47j53.h: 1167: __asm("RPOR6 equ 0EC6h");
[; <" RPOR6 equ 0EC6h ;# ">
"1174
[; ;Source\pic18f47j53.h: 1174: __asm("RPOR7 equ 0EC7h");
[; <" RPOR7 equ 0EC7h ;# ">
"1181
[; ;Source\pic18f47j53.h: 1181: __asm("RPOR8 equ 0EC8h");
[; <" RPOR8 equ 0EC8h ;# ">
"1188
[; ;Source\pic18f47j53.h: 1188: __asm("RPOR9 equ 0EC9h");
[; <" RPOR9 equ 0EC9h ;# ">
"1195
[; ;Source\pic18f47j53.h: 1195: __asm("RPOR10 equ 0ECAh");
[; <" RPOR10 equ 0ECAh ;# ">
"1202
[; ;Source\pic18f47j53.h: 1202: __asm("RPOR11 equ 0ECBh");
[; <" RPOR11 equ 0ECBh ;# ">
"1209
[; ;Source\pic18f47j53.h: 1209: __asm("RPOR12 equ 0ECCh");
[; <" RPOR12 equ 0ECCh ;# ">
"1216
[; ;Source\pic18f47j53.h: 1216: __asm("RPOR13 equ 0ECDh");
[; <" RPOR13 equ 0ECDh ;# ">
"1223
[; ;Source\pic18f47j53.h: 1223: __asm("RPOR17 equ 0ED1h");
[; <" RPOR17 equ 0ED1h ;# ">
"1230
[; ;Source\pic18f47j53.h: 1230: __asm("RPOR18 equ 0ED2h");
[; <" RPOR18 equ 0ED2h ;# ">
"1237
[; ;Source\pic18f47j53.h: 1237: __asm("RPOR19 equ 0ED3h");
[; <" RPOR19 equ 0ED3h ;# ">
"1244
[; ;Source\pic18f47j53.h: 1244: __asm("RPOR20 equ 0ED4h");
[; <" RPOR20 equ 0ED4h ;# ">
"1251
[; ;Source\pic18f47j53.h: 1251: __asm("RPOR21 equ 0ED5h");
[; <" RPOR21 equ 0ED5h ;# ">
"1258
[; ;Source\pic18f47j53.h: 1258: __asm("RPOR22 equ 0ED6h");
[; <" RPOR22 equ 0ED6h ;# ">
"1265
[; ;Source\pic18f47j53.h: 1265: __asm("RPOR23 equ 0ED7h");
[; <" RPOR23 equ 0ED7h ;# ">
"1272
[; ;Source\pic18f47j53.h: 1272: __asm("RPOR24 equ 0ED8h");
[; <" RPOR24 equ 0ED8h ;# ">
"1279
[; ;Source\pic18f47j53.h: 1279: __asm("RPINR1 equ 0EE1h");
[; <" RPINR1 equ 0EE1h ;# ">
"1286
[; ;Source\pic18f47j53.h: 1286: __asm("RPINR2 equ 0EE2h");
[; <" RPINR2 equ 0EE2h ;# ">
"1293
[; ;Source\pic18f47j53.h: 1293: __asm("RPINR3 equ 0EE3h");
[; <" RPINR3 equ 0EE3h ;# ">
"1300
[; ;Source\pic18f47j53.h: 1300: __asm("RPINR4 equ 0EE4h");
[; <" RPINR4 equ 0EE4h ;# ">
"1307
[; ;Source\pic18f47j53.h: 1307: __asm("RPINR6 equ 0EE6h");
[; <" RPINR6 equ 0EE6h ;# ">
"1314
[; ;Source\pic18f47j53.h: 1314: __asm("RPINR15 equ 0EE7h");
[; <" RPINR15 equ 0EE7h ;# ">
"1321
[; ;Source\pic18f47j53.h: 1321: __asm("RPINR7 equ 0EE8h");
[; <" RPINR7 equ 0EE8h ;# ">
"1328
[; ;Source\pic18f47j53.h: 1328: __asm("RPINR8 equ 0EE9h");
[; <" RPINR8 equ 0EE9h ;# ">
"1335
[; ;Source\pic18f47j53.h: 1335: __asm("RPINR9 equ 0EEAh");
[; <" RPINR9 equ 0EEAh ;# ">
"1342
[; ;Source\pic18f47j53.h: 1342: __asm("RPINR12 equ 0EF2h");
[; <" RPINR12 equ 0EF2h ;# ">
"1349
[; ;Source\pic18f47j53.h: 1349: __asm("RPINR13 equ 0EF3h");
[; <" RPINR13 equ 0EF3h ;# ">
"1356
[; ;Source\pic18f47j53.h: 1356: __asm("RPINR14 equ 0EF4h");
[; <" RPINR14 equ 0EF4h ;# ">
"1363
[; ;Source\pic18f47j53.h: 1363: __asm("RPINR16 equ 0EF7h");
[; <" RPINR16 equ 0EF7h ;# ">
"1370
[; ;Source\pic18f47j53.h: 1370: __asm("RPINR17 equ 0EF8h");
[; <" RPINR17 equ 0EF8h ;# ">
"1377
[; ;Source\pic18f47j53.h: 1377: __asm("RPINR21 equ 0EFCh");
[; <" RPINR21 equ 0EFCh ;# ">
"1384
[; ;Source\pic18f47j53.h: 1384: __asm("RPINR22 equ 0EFDh");
[; <" RPINR22 equ 0EFDh ;# ">
"1391
[; ;Source\pic18f47j53.h: 1391: __asm("RPINR23 equ 0EFEh");
[; <" RPINR23 equ 0EFEh ;# ">
"1398
[; ;Source\pic18f47j53.h: 1398: __asm("RPINR24 equ 0EFFh");
[; <" RPINR24 equ 0EFFh ;# ">
"1405
[; ;Source\pic18f47j53.h: 1405: __asm("CCP10CON equ 0F00h");
[; <" CCP10CON equ 0F00h ;# ">
"1469
[; ;Source\pic18f47j53.h: 1469: __asm("CCPR10L equ 0F01h");
[; <" CCPR10L equ 0F01h ;# ">
"1489
[; ;Source\pic18f47j53.h: 1489: __asm("CCPR10H equ 0F02h");
[; <" CCPR10H equ 0F02h ;# ">
"1509
[; ;Source\pic18f47j53.h: 1509: __asm("CCP9CON equ 0F03h");
[; <" CCP9CON equ 0F03h ;# ">
"1573
[; ;Source\pic18f47j53.h: 1573: __asm("CCPR9L equ 0F04h");
[; <" CCPR9L equ 0F04h ;# ">
"1593
[; ;Source\pic18f47j53.h: 1593: __asm("CCPR9H equ 0F05h");
[; <" CCPR9H equ 0F05h ;# ">
"1613
[; ;Source\pic18f47j53.h: 1613: __asm("CCP8CON equ 0F06h");
[; <" CCP8CON equ 0F06h ;# ">
"1677
[; ;Source\pic18f47j53.h: 1677: __asm("CCPR8L equ 0F07h");
[; <" CCPR8L equ 0F07h ;# ">
"1697
[; ;Source\pic18f47j53.h: 1697: __asm("CCPR8H equ 0F08h");
[; <" CCPR8H equ 0F08h ;# ">
"1717
[; ;Source\pic18f47j53.h: 1717: __asm("CCP7CON equ 0F09h");
[; <" CCP7CON equ 0F09h ;# ">
"1781
[; ;Source\pic18f47j53.h: 1781: __asm("CCPR7L equ 0F0Ah");
[; <" CCPR7L equ 0F0Ah ;# ">
"1801
[; ;Source\pic18f47j53.h: 1801: __asm("CCPR7H equ 0F0Bh");
[; <" CCPR7H equ 0F0Bh ;# ">
"1821
[; ;Source\pic18f47j53.h: 1821: __asm("CCP6CON equ 0F0Ch");
[; <" CCP6CON equ 0F0Ch ;# ">
"1885
[; ;Source\pic18f47j53.h: 1885: __asm("CCPR6L equ 0F0Dh");
[; <" CCPR6L equ 0F0Dh ;# ">
"1905
[; ;Source\pic18f47j53.h: 1905: __asm("CCPR6H equ 0F0Eh");
[; <" CCPR6H equ 0F0Eh ;# ">
"1925
[; ;Source\pic18f47j53.h: 1925: __asm("CCP5CON equ 0F0Fh");
[; <" CCP5CON equ 0F0Fh ;# ">
"1989
[; ;Source\pic18f47j53.h: 1989: __asm("CCPR5L equ 0F10h");
[; <" CCPR5L equ 0F10h ;# ">
"2009
[; ;Source\pic18f47j53.h: 2009: __asm("CCPR5H equ 0F11h");
[; <" CCPR5H equ 0F11h ;# ">
"2029
[; ;Source\pic18f47j53.h: 2029: __asm("CCP4CON equ 0F12h");
[; <" CCP4CON equ 0F12h ;# ">
"2093
[; ;Source\pic18f47j53.h: 2093: __asm("CCPR4L equ 0F13h");
[; <" CCPR4L equ 0F13h ;# ">
"2113
[; ;Source\pic18f47j53.h: 2113: __asm("CCPR4H equ 0F14h");
[; <" CCPR4H equ 0F14h ;# ">
"2133
[; ;Source\pic18f47j53.h: 2133: __asm("CCP3CON equ 0F15h");
[; <" CCP3CON equ 0F15h ;# ">
"2215
[; ;Source\pic18f47j53.h: 2215: __asm("CCPR3L equ 0F16h");
[; <" CCPR3L equ 0F16h ;# ">
"2235
[; ;Source\pic18f47j53.h: 2235: __asm("CCPR3H equ 0F17h");
[; <" CCPR3H equ 0F17h ;# ">
"2255
[; ;Source\pic18f47j53.h: 2255: __asm("ECCP3DEL equ 0F18h");
[; <" ECCP3DEL equ 0F18h ;# ">
"2325
[; ;Source\pic18f47j53.h: 2325: __asm("ECCP3AS equ 0F19h");
[; <" ECCP3AS equ 0F19h ;# ">
"2407
[; ;Source\pic18f47j53.h: 2407: __asm("PSTR3CON equ 0F1Ah");
[; <" PSTR3CON equ 0F1Ah ;# ">
"2518
[; ;Source\pic18f47j53.h: 2518: __asm("T8CON equ 0F1Bh");
[; <" T8CON equ 0F1Bh ;# ">
"2589
[; ;Source\pic18f47j53.h: 2589: __asm("PR8 equ 0F1Ch");
[; <" PR8 equ 0F1Ch ;# ">
"2609
[; ;Source\pic18f47j53.h: 2609: __asm("TMR8 equ 0F1Dh");
[; <" TMR8 equ 0F1Dh ;# ">
"2629
[; ;Source\pic18f47j53.h: 2629: __asm("T6CON equ 0F1Eh");
[; <" T6CON equ 0F1Eh ;# ">
"2700
[; ;Source\pic18f47j53.h: 2700: __asm("PR6 equ 0F1Fh");
[; <" PR6 equ 0F1Fh ;# ">
"2720
[; ;Source\pic18f47j53.h: 2720: __asm("TMR6 equ 0F20h");
[; <" TMR6 equ 0F20h ;# ">
"2740
[; ;Source\pic18f47j53.h: 2740: __asm("T5GCON equ 0F21h");
[; <" T5GCON equ 0F21h ;# ">
"2853
[; ;Source\pic18f47j53.h: 2853: __asm("T5CON equ 0F22h");
[; <" T5CON equ 0F22h ;# ">
"2955
[; ;Source\pic18f47j53.h: 2955: __asm("TMR5L equ 0F23h");
[; <" TMR5L equ 0F23h ;# ">
"2975
[; ;Source\pic18f47j53.h: 2975: __asm("TMR5H equ 0F24h");
[; <" TMR5H equ 0F24h ;# ">
"2995
[; ;Source\pic18f47j53.h: 2995: __asm("CM3CON equ 0F25h");
[; <" CM3CON equ 0F25h ;# ">
"3122
[; ;Source\pic18f47j53.h: 3122: __asm("UEP0 equ 0F26h");
[; <" UEP0 equ 0F26h ;# ">
"3230
[; ;Source\pic18f47j53.h: 3230: __asm("UEP1 equ 0F27h");
[; <" UEP1 equ 0F27h ;# ">
"3338
[; ;Source\pic18f47j53.h: 3338: __asm("UEP2 equ 0F28h");
[; <" UEP2 equ 0F28h ;# ">
"3446
[; ;Source\pic18f47j53.h: 3446: __asm("UEP3 equ 0F29h");
[; <" UEP3 equ 0F29h ;# ">
"3554
[; ;Source\pic18f47j53.h: 3554: __asm("UEP4 equ 0F2Ah");
[; <" UEP4 equ 0F2Ah ;# ">
"3662
[; ;Source\pic18f47j53.h: 3662: __asm("UEP5 equ 0F2Bh");
[; <" UEP5 equ 0F2Bh ;# ">
"3770
[; ;Source\pic18f47j53.h: 3770: __asm("UEP6 equ 0F2Ch");
[; <" UEP6 equ 0F2Ch ;# ">
"3878
[; ;Source\pic18f47j53.h: 3878: __asm("UEP7 equ 0F2Dh");
[; <" UEP7 equ 0F2Dh ;# ">
"3986
[; ;Source\pic18f47j53.h: 3986: __asm("UEP8 equ 0F2Eh");
[; <" UEP8 equ 0F2Eh ;# ">
"4062
[; ;Source\pic18f47j53.h: 4062: __asm("UEP9 equ 0F2Fh");
[; <" UEP9 equ 0F2Fh ;# ">
"4138
[; ;Source\pic18f47j53.h: 4138: __asm("UEP10 equ 0F30h");
[; <" UEP10 equ 0F30h ;# ">
"4214
[; ;Source\pic18f47j53.h: 4214: __asm("UEP11 equ 0F31h");
[; <" UEP11 equ 0F31h ;# ">
"4290
[; ;Source\pic18f47j53.h: 4290: __asm("UEP12 equ 0F32h");
[; <" UEP12 equ 0F32h ;# ">
"4366
[; ;Source\pic18f47j53.h: 4366: __asm("UEP13 equ 0F33h");
[; <" UEP13 equ 0F33h ;# ">
"4442
[; ;Source\pic18f47j53.h: 4442: __asm("UEP14 equ 0F34h");
[; <" UEP14 equ 0F34h ;# ">
"4518
[; ;Source\pic18f47j53.h: 4518: __asm("UEP15 equ 0F35h");
[; <" UEP15 equ 0F35h ;# ">
"4594
[; ;Source\pic18f47j53.h: 4594: __asm("UIE equ 0F36h");
[; <" UIE equ 0F36h ;# ">
"4650
[; ;Source\pic18f47j53.h: 4650: __asm("UEIE equ 0F37h");
[; <" UEIE equ 0F37h ;# ">
"4701
[; ;Source\pic18f47j53.h: 4701: __asm("UADDR equ 0F38h");
[; <" UADDR equ 0F38h ;# ">
"4765
[; ;Source\pic18f47j53.h: 4765: __asm("UCFG equ 0F39h");
[; <" UCFG equ 0F39h ;# ">
"4836
[; ;Source\pic18f47j53.h: 4836: __asm("RTCVALL equ 0F3Ah");
[; <" RTCVALL equ 0F3Ah ;# ">
"4856
[; ;Source\pic18f47j53.h: 4856: __asm("RTCVALH equ 0F3Bh");
[; <" RTCVALH equ 0F3Bh ;# ">
"4926
[; ;Source\pic18f47j53.h: 4926: __asm("PADCFG1 equ 0F3Ch");
[; <" PADCFG1 equ 0F3Ch ;# ">
"4958
[; ;Source\pic18f47j53.h: 4958: __asm("REFOCON equ 0F3Dh");
[; <" REFOCON equ 0F3Dh ;# ">
"5023
[; ;Source\pic18f47j53.h: 5023: __asm("RTCCAL equ 0F3Eh");
[; <" RTCCAL equ 0F3Eh ;# ">
"5093
[; ;Source\pic18f47j53.h: 5093: __asm("RTCCFG equ 0F3Fh");
[; <" RTCCFG equ 0F3Fh ;# ">
"5150
[; ;Source\pic18f47j53.h: 5150: __asm("ODCON3 equ 0F40h");
[; <" ODCON3 equ 0F40h ;# ">
"5176
[; ;Source\pic18f47j53.h: 5176: __asm("ODCON2 equ 0F41h");
[; <" ODCON2 equ 0F41h ;# ">
"5214
[; ;Source\pic18f47j53.h: 5214: __asm("ODCON1 equ 0F42h");
[; <" ODCON1 equ 0F42h ;# ">
"5276
[; ;Source\pic18f47j53.h: 5276: __asm("ALRMVALL equ 0F44h");
[; <" ALRMVALL equ 0F44h ;# ">
"5296
[; ;Source\pic18f47j53.h: 5296: __asm("ALRMVALH equ 0F45h");
[; <" ALRMVALH equ 0F45h ;# ">
"5316
[; ;Source\pic18f47j53.h: 5316: __asm("ALRMRPT equ 0F46h");
[; <" ALRMRPT equ 0F46h ;# ">
"5386
[; ;Source\pic18f47j53.h: 5386: __asm("ALRMCFG equ 0F47h");
[; <" ALRMCFG equ 0F47h ;# ">
"5462
[; ;Source\pic18f47j53.h: 5462: __asm("ANCON0 equ 0F48h");
[; <" ANCON0 equ 0F48h ;# ">
"5524
[; ;Source\pic18f47j53.h: 5524: __asm("ANCON1 equ 0F49h");
[; <" ANCON1 equ 0F49h ;# ">
"5584
[; ;Source\pic18f47j53.h: 5584: __asm("DSWAKEL equ 0F4Ah");
[; <" DSWAKEL equ 0F4Ah ;# ">
"5636
[; ;Source\pic18f47j53.h: 5636: __asm("DSWAKEH equ 0F4Bh");
[; <" DSWAKEH equ 0F4Bh ;# ">
"5656
[; ;Source\pic18f47j53.h: 5656: __asm("DSCONL equ 0F4Ch");
[; <" DSCONL equ 0F4Ch ;# ">
"5688
[; ;Source\pic18f47j53.h: 5688: __asm("DSCONH equ 0F4Dh");
[; <" DSCONH equ 0F4Dh ;# ">
"5721
[; ;Source\pic18f47j53.h: 5721: __asm("DSGPR0 equ 0F4Eh");
[; <" DSGPR0 equ 0F4Eh ;# ">
"5741
[; ;Source\pic18f47j53.h: 5741: __asm("DSGPR1 equ 0F4Fh");
[; <" DSGPR1 equ 0F4Fh ;# ">
"5761
[; ;Source\pic18f47j53.h: 5761: __asm("CCPTMRS2 equ 0F50h");
[; <" CCPTMRS2 equ 0F50h ;# ">
"5808
[; ;Source\pic18f47j53.h: 5808: __asm("CCPTMRS1 equ 0F51h");
[; <" CCPTMRS1 equ 0F51h ;# ">
"5875
[; ;Source\pic18f47j53.h: 5875: __asm("CCPTMRS0 equ 0F52h");
[; <" CCPTMRS0 equ 0F52h ;# ">
"5957
[; ;Source\pic18f47j53.h: 5957: __asm("CVRCON equ 0F53h");
[; <" CVRCON equ 0F53h ;# ">
"6036
[; ;Source\pic18f47j53.h: 6036: __asm("PMSTATL equ 0F54h");
[; <" PMSTATL equ 0F54h ;# ">
"6087
[; ;Source\pic18f47j53.h: 6087: __asm("PMSTATH equ 0F55h");
[; <" PMSTATH equ 0F55h ;# ">
"6138
[; ;Source\pic18f47j53.h: 6138: __asm("PMEL equ 0F56h");
[; <" PMEL equ 0F56h ;# ">
"6208
[; ;Source\pic18f47j53.h: 6208: __asm("PMEH equ 0F57h");
[; <" PMEH equ 0F57h ;# ">
"6278
[; ;Source\pic18f47j53.h: 6278: __asm("PMDIN2L equ 0F58h");
[; <" PMDIN2L equ 0F58h ;# ">
"6298
[; ;Source\pic18f47j53.h: 6298: __asm("PMDIN2H equ 0F59h");
[; <" PMDIN2H equ 0F59h ;# ">
"6318
[; ;Source\pic18f47j53.h: 6318: __asm("PMDOUT2L equ 0F5Ah");
[; <" PMDOUT2L equ 0F5Ah ;# ">
"6338
[; ;Source\pic18f47j53.h: 6338: __asm("PMDOUT2H equ 0F5Bh");
[; <" PMDOUT2H equ 0F5Bh ;# ">
"6358
[; ;Source\pic18f47j53.h: 6358: __asm("PMMODEL equ 0F5Ch");
[; <" PMMODEL equ 0F5Ch ;# ">
"6440
[; ;Source\pic18f47j53.h: 6440: __asm("PMMODEH equ 0F5Dh");
[; <" PMMODEH equ 0F5Dh ;# ">
"6502
[; ;Source\pic18f47j53.h: 6502: __asm("PMCONL equ 0F5Eh");
[; <" PMCONL equ 0F5Eh ;# ">
"6559
[; ;Source\pic18f47j53.h: 6559: __asm("PMCONH equ 0F5Fh");
[; <" PMCONH equ 0F5Fh ;# ">
"6616
[; ;Source\pic18f47j53.h: 6616: __asm("UFRM equ 0F60h");
[; <" UFRM equ 0F60h ;# ">
"6623
[; ;Source\pic18f47j53.h: 6623: __asm("UFRML equ 0F60h");
[; <" UFRML equ 0F60h ;# ">
"6701
[; ;Source\pic18f47j53.h: 6701: __asm("UFRMH equ 0F61h");
[; <" UFRMH equ 0F61h ;# ">
"6741
[; ;Source\pic18f47j53.h: 6741: __asm("UIR equ 0F62h");
[; <" UIR equ 0F62h ;# ">
"6797
[; ;Source\pic18f47j53.h: 6797: __asm("UEIR equ 0F63h");
[; <" UEIR equ 0F63h ;# ">
"6848
[; ;Source\pic18f47j53.h: 6848: __asm("USTAT equ 0F64h");
[; <" USTAT equ 0F64h ;# ">
"6908
[; ;Source\pic18f47j53.h: 6908: __asm("UCON equ 0F65h");
[; <" UCON equ 0F65h ;# ">
"6959
[; ;Source\pic18f47j53.h: 6959: __asm("DMABCH equ 0F66h");
[; <" DMABCH equ 0F66h ;# ">
"6979
[; ;Source\pic18f47j53.h: 6979: __asm("DMABCL equ 0F67h");
[; <" DMABCL equ 0F67h ;# ">
"6999
[; ;Source\pic18f47j53.h: 6999: __asm("RXADDRH equ 0F68h");
[; <" RXADDRH equ 0F68h ;# ">
"7019
[; ;Source\pic18f47j53.h: 7019: __asm("RXADDRL equ 0F69h");
[; <" RXADDRL equ 0F69h ;# ">
"7039
[; ;Source\pic18f47j53.h: 7039: __asm("TXADDRH equ 0F6Ah");
[; <" TXADDRH equ 0F6Ah ;# ">
"7059
[; ;Source\pic18f47j53.h: 7059: __asm("TXADDRL equ 0F6Bh");
[; <" TXADDRL equ 0F6Bh ;# ">
"7079
[; ;Source\pic18f47j53.h: 7079: __asm("PMDIN1L equ 0F6Ch");
[; <" PMDIN1L equ 0F6Ch ;# ">
"7099
[; ;Source\pic18f47j53.h: 7099: __asm("PMDIN1H equ 0F6Dh");
[; <" PMDIN1H equ 0F6Dh ;# ">
"7119
[; ;Source\pic18f47j53.h: 7119: __asm("PMADDRL equ 0F6Eh");
[; <" PMADDRL equ 0F6Eh ;# ">
"7139
[; ;Source\pic18f47j53.h: 7139: __asm("PMDOUT1L equ 0F6Eh");
[; <" PMDOUT1L equ 0F6Eh ;# ">
"7159
[; ;Source\pic18f47j53.h: 7159: __asm("PMADDRH equ 0F6Fh");
[; <" PMADDRH equ 0F6Fh ;# ">
"7185
[; ;Source\pic18f47j53.h: 7185: __asm("PMDOUT1H equ 0F6Fh");
[; <" PMDOUT1H equ 0F6Fh ;# ">
"7205
[; ;Source\pic18f47j53.h: 7205: __asm("CMSTAT equ 0F70h");
[; <" CMSTAT equ 0F70h ;# ">
"7210
[; ;Source\pic18f47j53.h: 7210: __asm("CMSTATUS equ 0F70h");
[; <" CMSTATUS equ 0F70h ;# ">
"7267
[; ;Source\pic18f47j53.h: 7267: __asm("SSP2CON2 equ 0F71h");
[; <" SSP2CON2 equ 0F71h ;# ">
"7445
[; ;Source\pic18f47j53.h: 7445: __asm("SSP2CON1 equ 0F72h");
[; <" SSP2CON1 equ 0F72h ;# ">
"7565
[; ;Source\pic18f47j53.h: 7565: __asm("SSP2STAT equ 0F73h");
[; <" SSP2STAT equ 0F73h ;# ">
"7867
[; ;Source\pic18f47j53.h: 7867: __asm("SSP2ADD equ 0F74h");
[; <" SSP2ADD equ 0F74h ;# ">
"7937
[; ;Source\pic18f47j53.h: 7937: __asm("SSP2MSK equ 0F74h");
[; <" SSP2MSK equ 0F74h ;# ">
"7999
[; ;Source\pic18f47j53.h: 7999: __asm("SSP2BUF equ 0F75h");
[; <" SSP2BUF equ 0F75h ;# ">
"8019
[; ;Source\pic18f47j53.h: 8019: __asm("T4CON equ 0F76h");
[; <" T4CON equ 0F76h ;# ">
"8090
[; ;Source\pic18f47j53.h: 8090: __asm("PR4 equ 0F77h");
[; <" PR4 equ 0F77h ;# ">
"8110
[; ;Source\pic18f47j53.h: 8110: __asm("TMR4 equ 0F78h");
[; <" TMR4 equ 0F78h ;# ">
"8130
[; ;Source\pic18f47j53.h: 8130: __asm("T3CON equ 0F79h");
[; <" T3CON equ 0F79h ;# ">
"8241
[; ;Source\pic18f47j53.h: 8241: __asm("TMR3 equ 0F7Ah");
[; <" TMR3 equ 0F7Ah ;# ">
"8248
[; ;Source\pic18f47j53.h: 8248: __asm("TMR3L equ 0F7Ah");
[; <" TMR3L equ 0F7Ah ;# ">
"8268
[; ;Source\pic18f47j53.h: 8268: __asm("TMR3H equ 0F7Bh");
[; <" TMR3H equ 0F7Bh ;# ">
"8288
[; ;Source\pic18f47j53.h: 8288: __asm("BAUDCON2 equ 0F7Ch");
[; <" BAUDCON2 equ 0F7Ch ;# ">
"8411
[; ;Source\pic18f47j53.h: 8411: __asm("SPBRGH2 equ 0F7Dh");
[; <" SPBRGH2 equ 0F7Dh ;# ">
"8431
[; ;Source\pic18f47j53.h: 8431: __asm("BAUDCON1 equ 0F7Eh");
[; <" BAUDCON1 equ 0F7Eh ;# ">
"8436
[; ;Source\pic18f47j53.h: 8436: __asm("BAUDCON equ 0F7Eh");
[; <" BAUDCON equ 0F7Eh ;# ">
"8440
[; ;Source\pic18f47j53.h: 8440: __asm("BAUDCTL equ 0F7Eh");
[; <" BAUDCTL equ 0F7Eh ;# ">
"8938
[; ;Source\pic18f47j53.h: 8938: __asm("SPBRGH1 equ 0F7Fh");
[; <" SPBRGH1 equ 0F7Fh ;# ">
"8943
[; ;Source\pic18f47j53.h: 8943: __asm("SPBRGH equ 0F7Fh");
[; <" SPBRGH equ 0F7Fh ;# ">
"8976
[; ;Source\pic18f47j53.h: 8976: __asm("PORTA equ 0F80h");
[; <" PORTA equ 0F80h ;# ">
"9257
[; ;Source\pic18f47j53.h: 9257: __asm("PORTB equ 0F81h");
[; <" PORTB equ 0F81h ;# ">
"9603
[; ;Source\pic18f47j53.h: 9603: __asm("PORTC equ 0F82h");
[; <" PORTC equ 0F82h ;# ">
"9869
[; ;Source\pic18f47j53.h: 9869: __asm("PORTD equ 0F83h");
[; <" PORTD equ 0F83h ;# ">
"10040
[; ;Source\pic18f47j53.h: 10040: __asm("PORTE equ 0F84h");
[; <" PORTE equ 0F84h ;# ">
"10181
[; ;Source\pic18f47j53.h: 10181: __asm("HLVDCON equ 0F85h");
[; <" HLVDCON equ 0F85h ;# ">
"10251
[; ;Source\pic18f47j53.h: 10251: __asm("DMACON2 equ 0F86h");
[; <" DMACON2 equ 0F86h ;# ">
"10327
[; ;Source\pic18f47j53.h: 10327: __asm("OSCCON2 equ 0F87h");
[; <" OSCCON2 equ 0F87h ;# ">
"10367
[; ;Source\pic18f47j53.h: 10367: __asm("DMACON1 equ 0F88h");
[; <" DMACON1 equ 0F88h ;# ">
"10429
[; ;Source\pic18f47j53.h: 10429: __asm("LATA equ 0F89h");
[; <" LATA equ 0F89h ;# ">
"10531
[; ;Source\pic18f47j53.h: 10531: __asm("LATB equ 0F8Ah");
[; <" LATB equ 0F8Ah ;# ">
"10643
[; ;Source\pic18f47j53.h: 10643: __asm("LATC equ 0F8Bh");
[; <" LATC equ 0F8Bh ;# ">
"10721
[; ;Source\pic18f47j53.h: 10721: __asm("LATD equ 0F8Ch");
[; <" LATD equ 0F8Ch ;# ">
"10833
[; ;Source\pic18f47j53.h: 10833: __asm("LATE equ 0F8Dh");
[; <" LATE equ 0F8Dh ;# ">
"10885
[; ;Source\pic18f47j53.h: 10885: __asm("PIE4 equ 0F8Eh");
[; <" PIE4 equ 0F8Eh ;# ">
"10947
[; ;Source\pic18f47j53.h: 10947: __asm("PIR4 equ 0F8Fh");
[; <" PIR4 equ 0F8Fh ;# ">
"11009
[; ;Source\pic18f47j53.h: 11009: __asm("IPR4 equ 0F90h");
[; <" IPR4 equ 0F90h ;# ">
"11079
[; ;Source\pic18f47j53.h: 11079: __asm("PIE5 equ 0F91h");
[; <" PIE5 equ 0F91h ;# ">
"11129
[; ;Source\pic18f47j53.h: 11129: __asm("TRISA equ 0F92h");
[; <" TRISA equ 0F92h ;# ">
"11186
[; ;Source\pic18f47j53.h: 11186: __asm("TRISB equ 0F93h");
[; <" TRISB equ 0F93h ;# ">
"11248
[; ;Source\pic18f47j53.h: 11248: __asm("TRISC equ 0F94h");
[; <" TRISC equ 0F94h ;# ">
"11293
[; ;Source\pic18f47j53.h: 11293: __asm("TRISD equ 0F95h");
[; <" TRISD equ 0F95h ;# ">
"11355
[; ;Source\pic18f47j53.h: 11355: __asm("TRISE equ 0F96h");
[; <" TRISE equ 0F96h ;# ">
"11400
[; ;Source\pic18f47j53.h: 11400: __asm("T3GCON equ 0F97h");
[; <" T3GCON equ 0F97h ;# ">
"11489
[; ;Source\pic18f47j53.h: 11489: __asm("PIR5 equ 0F98h");
[; <" PIR5 equ 0F98h ;# ">
"11539
[; ;Source\pic18f47j53.h: 11539: __asm("IPR5 equ 0F99h");
[; <" IPR5 equ 0F99h ;# ">
"11616
[; ;Source\pic18f47j53.h: 11616: __asm("T1GCON equ 0F9Ah");
[; <" T1GCON equ 0F9Ah ;# ">
"11723
[; ;Source\pic18f47j53.h: 11723: __asm("OSCTUNE equ 0F9Bh");
[; <" OSCTUNE equ 0F9Bh ;# ">
"11793
[; ;Source\pic18f47j53.h: 11793: __asm("RCSTA2 equ 0F9Ch");
[; <" RCSTA2 equ 0F9Ch ;# ">
"11929
[; ;Source\pic18f47j53.h: 11929: __asm("PIE1 equ 0F9Dh");
[; <" PIE1 equ 0F9Dh ;# ">
"12021
[; ;Source\pic18f47j53.h: 12021: __asm("PIR1 equ 0F9Eh");
[; <" PIR1 equ 0F9Eh ;# ">
"12113
[; ;Source\pic18f47j53.h: 12113: __asm("IPR1 equ 0F9Fh");
[; <" IPR1 equ 0F9Fh ;# ">
"12205
[; ;Source\pic18f47j53.h: 12205: __asm("PIE2 equ 0FA0h");
[; <" PIE2 equ 0FA0h ;# ">
"12291
[; ;Source\pic18f47j53.h: 12291: __asm("PIR2 equ 0FA1h");
[; <" PIR2 equ 0FA1h ;# ">
"12377
[; ;Source\pic18f47j53.h: 12377: __asm("IPR2 equ 0FA2h");
[; <" IPR2 equ 0FA2h ;# ">
"12463
[; ;Source\pic18f47j53.h: 12463: __asm("PIE3 equ 0FA3h");
[; <" PIE3 equ 0FA3h ;# ">
"12573
[; ;Source\pic18f47j53.h: 12573: __asm("PIR3 equ 0FA4h");
[; <" PIR3 equ 0FA4h ;# ">
"12651
[; ;Source\pic18f47j53.h: 12651: __asm("IPR3 equ 0FA5h");
[; <" IPR3 equ 0FA5h ;# ">
"12729
[; ;Source\pic18f47j53.h: 12729: __asm("EECON1 equ 0FA6h");
[; <" EECON1 equ 0FA6h ;# ">
"12774
[; ;Source\pic18f47j53.h: 12774: __asm("EECON2 equ 0FA7h");
[; <" EECON2 equ 0FA7h ;# ">
"12794
[; ;Source\pic18f47j53.h: 12794: __asm("TXSTA2 equ 0FA8h");
[; <" TXSTA2 equ 0FA8h ;# ">
"12921
[; ;Source\pic18f47j53.h: 12921: __asm("TXREG2 equ 0FA9h");
[; <" TXREG2 equ 0FA9h ;# ">
"12941
[; ;Source\pic18f47j53.h: 12941: __asm("RCREG2 equ 0FAAh");
[; <" RCREG2 equ 0FAAh ;# ">
"12961
[; ;Source\pic18f47j53.h: 12961: __asm("SPBRG2 equ 0FABh");
[; <" SPBRG2 equ 0FABh ;# ">
"12981
[; ;Source\pic18f47j53.h: 12981: __asm("RCSTA1 equ 0FACh");
[; <" RCSTA1 equ 0FACh ;# ">
"12986
[; ;Source\pic18f47j53.h: 12986: __asm("RCSTA equ 0FACh");
[; <" RCSTA equ 0FACh ;# ">
"13319
[; ;Source\pic18f47j53.h: 13319: __asm("TXSTA1 equ 0FADh");
[; <" TXSTA1 equ 0FADh ;# ">
"13324
[; ;Source\pic18f47j53.h: 13324: __asm("TXSTA equ 0FADh");
[; <" TXSTA equ 0FADh ;# ">
"13607
[; ;Source\pic18f47j53.h: 13607: __asm("TXREG1 equ 0FAEh");
[; <" TXREG1 equ 0FAEh ;# ">
"13612
[; ;Source\pic18f47j53.h: 13612: __asm("TXREG equ 0FAEh");
[; <" TXREG equ 0FAEh ;# ">
"13645
[; ;Source\pic18f47j53.h: 13645: __asm("RCREG1 equ 0FAFh");
[; <" RCREG1 equ 0FAFh ;# ">
"13650
[; ;Source\pic18f47j53.h: 13650: __asm("RCREG equ 0FAFh");
[; <" RCREG equ 0FAFh ;# ">
"13683
[; ;Source\pic18f47j53.h: 13683: __asm("SPBRG1 equ 0FB0h");
[; <" SPBRG1 equ 0FB0h ;# ">
"13688
[; ;Source\pic18f47j53.h: 13688: __asm("SPBRG equ 0FB0h");
[; <" SPBRG equ 0FB0h ;# ">
"13721
[; ;Source\pic18f47j53.h: 13721: __asm("CTMUICON equ 0FB1h");
[; <" CTMUICON equ 0FB1h ;# ">
"13797
[; ;Source\pic18f47j53.h: 13797: __asm("CTMUCONL equ 0FB2h");
[; <" CTMUCONL equ 0FB2h ;# ">
"13859
[; ;Source\pic18f47j53.h: 13859: __asm("CTMUCONH equ 0FB3h");
[; <" CTMUCONH equ 0FB3h ;# ">
"13916
[; ;Source\pic18f47j53.h: 13916: __asm("CCP2CON equ 0FB4h");
[; <" CCP2CON equ 0FB4h ;# ">
"13921
[; ;Source\pic18f47j53.h: 13921: __asm("ECCP2CON equ 0FB4h");
[; <" ECCP2CON equ 0FB4h ;# ">
"14108
[; ;Source\pic18f47j53.h: 14108: __asm("CCPR2 equ 0FB5h");
[; <" CCPR2 equ 0FB5h ;# ">
"14115
[; ;Source\pic18f47j53.h: 14115: __asm("CCPR2L equ 0FB5h");
[; <" CCPR2L equ 0FB5h ;# ">
"14135
[; ;Source\pic18f47j53.h: 14135: __asm("CCPR2H equ 0FB6h");
[; <" CCPR2H equ 0FB6h ;# ">
"14155
[; ;Source\pic18f47j53.h: 14155: __asm("ECCP2DEL equ 0FB7h");
[; <" ECCP2DEL equ 0FB7h ;# ">
"14160
[; ;Source\pic18f47j53.h: 14160: __asm("PWM2CON equ 0FB7h");
[; <" PWM2CON equ 0FB7h ;# ">
"14293
[; ;Source\pic18f47j53.h: 14293: __asm("ECCP2AS equ 0FB8h");
[; <" ECCP2AS equ 0FB8h ;# ">
"14375
[; ;Source\pic18f47j53.h: 14375: __asm("PSTR2CON equ 0FB9h");
[; <" PSTR2CON equ 0FB9h ;# ">
"14617
[; ;Source\pic18f47j53.h: 14617: __asm("CCP1CON equ 0FBAh");
[; <" CCP1CON equ 0FBAh ;# ">
"14622
[; ;Source\pic18f47j53.h: 14622: __asm("ECCP1CON equ 0FBAh");
[; <" ECCP1CON equ 0FBAh ;# ">
"14809
[; ;Source\pic18f47j53.h: 14809: __asm("CCPR1 equ 0FBBh");
[; <" CCPR1 equ 0FBBh ;# ">
"14816
[; ;Source\pic18f47j53.h: 14816: __asm("CCPR1L equ 0FBBh");
[; <" CCPR1L equ 0FBBh ;# ">
"14836
[; ;Source\pic18f47j53.h: 14836: __asm("CCPR1H equ 0FBCh");
[; <" CCPR1H equ 0FBCh ;# ">
"14856
[; ;Source\pic18f47j53.h: 14856: __asm("ECCP1DEL equ 0FBDh");
[; <" ECCP1DEL equ 0FBDh ;# ">
"14861
[; ;Source\pic18f47j53.h: 14861: __asm("PWM1CON equ 0FBDh");
[; <" PWM1CON equ 0FBDh ;# ">
"14994
[; ;Source\pic18f47j53.h: 14994: __asm("ECCP1AS equ 0FBEh");
[; <" ECCP1AS equ 0FBEh ;# ">
"15076
[; ;Source\pic18f47j53.h: 15076: __asm("PSTR1CON equ 0FBFh");
[; <" PSTR1CON equ 0FBFh ;# ">
"15133
[; ;Source\pic18f47j53.h: 15133: __asm("WDTCON equ 0FC0h");
[; <" WDTCON equ 0FC0h ;# ">
"15203
[; ;Source\pic18f47j53.h: 15203: __asm("ADCON1 equ 0FC1h");
[; <" ADCON1 equ 0FC1h ;# ">
"15300
[; ;Source\pic18f47j53.h: 15300: __asm("ADCON0 equ 0FC2h");
[; <" ADCON0 equ 0FC2h ;# ">
"15444
[; ;Source\pic18f47j53.h: 15444: __asm("ADRES equ 0FC3h");
[; <" ADRES equ 0FC3h ;# ">
"15451
[; ;Source\pic18f47j53.h: 15451: __asm("ADRESL equ 0FC3h");
[; <" ADRESL equ 0FC3h ;# ">
"15471
[; ;Source\pic18f47j53.h: 15471: __asm("ADRESH equ 0FC4h");
[; <" ADRESH equ 0FC4h ;# ">
"15491
[; ;Source\pic18f47j53.h: 15491: __asm("SSP1CON2 equ 0FC5h");
[; <" SSP1CON2 equ 0FC5h ;# ">
"15496
[; ;Source\pic18f47j53.h: 15496: __asm("SSPCON2 equ 0FC5h");
[; <" SSPCON2 equ 0FC5h ;# ">
"15845
[; ;Source\pic18f47j53.h: 15845: __asm("SSP1CON1 equ 0FC6h");
[; <" SSP1CON1 equ 0FC6h ;# ">
"15850
[; ;Source\pic18f47j53.h: 15850: __asm("SSPCON1 equ 0FC6h");
[; <" SSPCON1 equ 0FC6h ;# ">
"16083
[; ;Source\pic18f47j53.h: 16083: __asm("SSP1STAT equ 0FC7h");
[; <" SSP1STAT equ 0FC7h ;# ">
"16088
[; ;Source\pic18f47j53.h: 16088: __asm("SSPSTAT equ 0FC7h");
[; <" SSPSTAT equ 0FC7h ;# ">
"16681
[; ;Source\pic18f47j53.h: 16681: __asm("SSP1ADD equ 0FC8h");
[; <" SSP1ADD equ 0FC8h ;# ">
"16686
[; ;Source\pic18f47j53.h: 16686: __asm("SSPADD equ 0FC8h");
[; <" SSPADD equ 0FC8h ;# ">
"16919
[; ;Source\pic18f47j53.h: 16919: __asm("SSP1MSK equ 0FC8h");
[; <" SSP1MSK equ 0FC8h ;# ">
"16981
[; ;Source\pic18f47j53.h: 16981: __asm("SSP1BUF equ 0FC9h");
[; <" SSP1BUF equ 0FC9h ;# ">
"16986
[; ;Source\pic18f47j53.h: 16986: __asm("SSPBUF equ 0FC9h");
[; <" SSPBUF equ 0FC9h ;# ">
"17019
[; ;Source\pic18f47j53.h: 17019: __asm("T2CON equ 0FCAh");
[; <" T2CON equ 0FCAh ;# ">
"17090
[; ;Source\pic18f47j53.h: 17090: __asm("PR2 equ 0FCBh");
[; <" PR2 equ 0FCBh ;# ">
"17095
[; ;Source\pic18f47j53.h: 17095: __asm("MEMCON equ 0FCBh");
[; <" MEMCON equ 0FCBh ;# ">
"17216
[; ;Source\pic18f47j53.h: 17216: __asm("TMR2 equ 0FCCh");
[; <" TMR2 equ 0FCCh ;# ">
"17236
[; ;Source\pic18f47j53.h: 17236: __asm("T1CON equ 0FCDh");
[; <" T1CON equ 0FCDh ;# ">
"17338
[; ;Source\pic18f47j53.h: 17338: __asm("TMR1 equ 0FCEh");
[; <" TMR1 equ 0FCEh ;# ">
"17345
[; ;Source\pic18f47j53.h: 17345: __asm("TMR1L equ 0FCEh");
[; <" TMR1L equ 0FCEh ;# ">
"17365
[; ;Source\pic18f47j53.h: 17365: __asm("TMR1H equ 0FCFh");
[; <" TMR1H equ 0FCFh ;# ">
"17385
[; ;Source\pic18f47j53.h: 17385: __asm("RCON equ 0FD0h");
[; <" RCON equ 0FD0h ;# ">
"17533
[; ;Source\pic18f47j53.h: 17533: __asm("CM2CON equ 0FD1h");
[; <" CM2CON equ 0FD1h ;# ">
"17538
[; ;Source\pic18f47j53.h: 17538: __asm("CM2CON1 equ 0FD1h");
[; <" CM2CON1 equ 0FD1h ;# ">
"17785
[; ;Source\pic18f47j53.h: 17785: __asm("CM1CON equ 0FD2h");
[; <" CM1CON equ 0FD2h ;# ">
"17790
[; ;Source\pic18f47j53.h: 17790: __asm("CM1CON1 equ 0FD2h");
[; <" CM1CON1 equ 0FD2h ;# ">
"18065
[; ;Source\pic18f47j53.h: 18065: __asm("OSCCON equ 0FD3h");
[; <" OSCCON equ 0FD3h ;# ">
"18142
[; ;Source\pic18f47j53.h: 18142: __asm("T0CON equ 0FD5h");
[; <" T0CON equ 0FD5h ;# ">
"18212
[; ;Source\pic18f47j53.h: 18212: __asm("TMR0 equ 0FD6h");
[; <" TMR0 equ 0FD6h ;# ">
"18219
[; ;Source\pic18f47j53.h: 18219: __asm("TMR0L equ 0FD6h");
[; <" TMR0L equ 0FD6h ;# ">
"18239
[; ;Source\pic18f47j53.h: 18239: __asm("TMR0H equ 0FD7h");
[; <" TMR0H equ 0FD7h ;# ">
"18259
[; ;Source\pic18f47j53.h: 18259: __asm("STATUS equ 0FD8h");
[; <" STATUS equ 0FD8h ;# ">
"18330
[; ;Source\pic18f47j53.h: 18330: __asm("FSR2 equ 0FD9h");
[; <" FSR2 equ 0FD9h ;# ">
"18337
[; ;Source\pic18f47j53.h: 18337: __asm("FSR2L equ 0FD9h");
[; <" FSR2L equ 0FD9h ;# ">
"18357
[; ;Source\pic18f47j53.h: 18357: __asm("FSR2H equ 0FDAh");
[; <" FSR2H equ 0FDAh ;# ">
"18364
[; ;Source\pic18f47j53.h: 18364: __asm("PLUSW2 equ 0FDBh");
[; <" PLUSW2 equ 0FDBh ;# ">
"18384
[; ;Source\pic18f47j53.h: 18384: __asm("PREINC2 equ 0FDCh");
[; <" PREINC2 equ 0FDCh ;# ">
"18404
[; ;Source\pic18f47j53.h: 18404: __asm("POSTDEC2 equ 0FDDh");
[; <" POSTDEC2 equ 0FDDh ;# ">
"18424
[; ;Source\pic18f47j53.h: 18424: __asm("POSTINC2 equ 0FDEh");
[; <" POSTINC2 equ 0FDEh ;# ">
"18444
[; ;Source\pic18f47j53.h: 18444: __asm("INDF2 equ 0FDFh");
[; <" INDF2 equ 0FDFh ;# ">
"18464
[; ;Source\pic18f47j53.h: 18464: __asm("BSR equ 0FE0h");
[; <" BSR equ 0FE0h ;# ">
"18471
[; ;Source\pic18f47j53.h: 18471: __asm("FSR1 equ 0FE1h");
[; <" FSR1 equ 0FE1h ;# ">
"18478
[; ;Source\pic18f47j53.h: 18478: __asm("FSR1L equ 0FE1h");
[; <" FSR1L equ 0FE1h ;# ">
"18498
[; ;Source\pic18f47j53.h: 18498: __asm("FSR1H equ 0FE2h");
[; <" FSR1H equ 0FE2h ;# ">
"18505
[; ;Source\pic18f47j53.h: 18505: __asm("PLUSW1 equ 0FE3h");
[; <" PLUSW1 equ 0FE3h ;# ">
"18525
[; ;Source\pic18f47j53.h: 18525: __asm("PREINC1 equ 0FE4h");
[; <" PREINC1 equ 0FE4h ;# ">
"18545
[; ;Source\pic18f47j53.h: 18545: __asm("POSTDEC1 equ 0FE5h");
[; <" POSTDEC1 equ 0FE5h ;# ">
"18565
[; ;Source\pic18f47j53.h: 18565: __asm("POSTINC1 equ 0FE6h");
[; <" POSTINC1 equ 0FE6h ;# ">
"18585
[; ;Source\pic18f47j53.h: 18585: __asm("INDF1 equ 0FE7h");
[; <" INDF1 equ 0FE7h ;# ">
"18605
[; ;Source\pic18f47j53.h: 18605: __asm("WREG equ 0FE8h");
[; <" WREG equ 0FE8h ;# ">
"18625
[; ;Source\pic18f47j53.h: 18625: __asm("FSR0 equ 0FE9h");
[; <" FSR0 equ 0FE9h ;# ">
"18632
[; ;Source\pic18f47j53.h: 18632: __asm("FSR0L equ 0FE9h");
[; <" FSR0L equ 0FE9h ;# ">
"18652
[; ;Source\pic18f47j53.h: 18652: __asm("FSR0H equ 0FEAh");
[; <" FSR0H equ 0FEAh ;# ">
"18659
[; ;Source\pic18f47j53.h: 18659: __asm("PLUSW0 equ 0FEBh");
[; <" PLUSW0 equ 0FEBh ;# ">
"18679
[; ;Source\pic18f47j53.h: 18679: __asm("PREINC0 equ 0FECh");
[; <" PREINC0 equ 0FECh ;# ">
"18699
[; ;Source\pic18f47j53.h: 18699: __asm("POSTDEC0 equ 0FEDh");
[; <" POSTDEC0 equ 0FEDh ;# ">
"18719
[; ;Source\pic18f47j53.h: 18719: __asm("POSTINC0 equ 0FEEh");
[; <" POSTINC0 equ 0FEEh ;# ">
"18739
[; ;Source\pic18f47j53.h: 18739: __asm("INDF0 equ 0FEFh");
[; <" INDF0 equ 0FEFh ;# ">
"18759
[; ;Source\pic18f47j53.h: 18759: __asm("INTCON3 equ 0FF0h");
[; <" INTCON3 equ 0FF0h ;# ">
"18871
[; ;Source\pic18f47j53.h: 18871: __asm("INTCON2 equ 0FF1h");
[; <" INTCON2 equ 0FF1h ;# ">
"18964
[; ;Source\pic18f47j53.h: 18964: __asm("INTCON equ 0FF2h");
[; <" INTCON equ 0FF2h ;# ">
"19081
[; ;Source\pic18f47j53.h: 19081: __asm("PROD equ 0FF3h");
[; <" PROD equ 0FF3h ;# ">
"19088
[; ;Source\pic18f47j53.h: 19088: __asm("PRODL equ 0FF3h");
[; <" PRODL equ 0FF3h ;# ">
"19108
[; ;Source\pic18f47j53.h: 19108: __asm("PRODH equ 0FF4h");
[; <" PRODH equ 0FF4h ;# ">
"19128
[; ;Source\pic18f47j53.h: 19128: __asm("TABLAT equ 0FF5h");
[; <" TABLAT equ 0FF5h ;# ">
"19150
[; ;Source\pic18f47j53.h: 19150: __asm("TBLPTR equ 0FF6h");
[; <" TBLPTR equ 0FF6h ;# ">
"19157
[; ;Source\pic18f47j53.h: 19157: __asm("TBLPTRL equ 0FF6h");
[; <" TBLPTRL equ 0FF6h ;# ">
"19177
[; ;Source\pic18f47j53.h: 19177: __asm("TBLPTRH equ 0FF7h");
[; <" TBLPTRH equ 0FF7h ;# ">
"19197
[; ;Source\pic18f47j53.h: 19197: __asm("TBLPTRU equ 0FF8h");
[; <" TBLPTRU equ 0FF8h ;# ">
"19206
[; ;Source\pic18f47j53.h: 19206: __asm("PCLAT equ 0FF9h");
[; <" PCLAT equ 0FF9h ;# ">
"19213
[; ;Source\pic18f47j53.h: 19213: __asm("PC equ 0FF9h");
[; <" PC equ 0FF9h ;# ">
"19220
[; ;Source\pic18f47j53.h: 19220: __asm("PCL equ 0FF9h");
[; <" PCL equ 0FF9h ;# ">
"19240
[; ;Source\pic18f47j53.h: 19240: __asm("PCLATH equ 0FFAh");
[; <" PCLATH equ 0FFAh ;# ">
"19260
[; ;Source\pic18f47j53.h: 19260: __asm("PCLATU equ 0FFBh");
[; <" PCLATU equ 0FFBh ;# ">
"19267
[; ;Source\pic18f47j53.h: 19267: __asm("STKPTR equ 0FFCh");
[; <" STKPTR equ 0FFCh ;# ">
"19341
[; ;Source\pic18f47j53.h: 19341: __asm("TOS equ 0FFDh");
[; <" TOS equ 0FFDh ;# ">
"19348
[; ;Source\pic18f47j53.h: 19348: __asm("TOSL equ 0FFDh");
[; <" TOSL equ 0FFDh ;# ">
"19368
[; ;Source\pic18f47j53.h: 19368: __asm("TOSH equ 0FFEh");
[; <" TOSH equ 0FFEh ;# ">
"19388
[; ;Source\pic18f47j53.h: 19388: __asm("TOSU equ 0FFFh");
[; <" TOSU equ 0FFFh ;# ">
"47 Source/FreeRTOS/tasks.c
[; ;Source/FreeRTOS/tasks.c: 47:                 static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
[v _uxCurrentNumberOfTasks `Vuc ~T0 @X0 1 s ]
[i _uxCurrentNumberOfTasks
-> -> 0 `ui `uc
]
"48
[; ;Source/FreeRTOS/tasks.c: 48:                 static volatile TickType_t xTickCount = ( TickType_t ) 0;
[v _xTickCount `Vus ~T0 @X0 1 s ]
[i _xTickCount
-> -> 0 `i `us
]
"49
[; ;Source/FreeRTOS/tasks.c: 49:                 static volatile UBaseType_t uxTopReadyPriority = ( ( UBaseType_t ) 0U );
[v _uxTopReadyPriority `Vuc ~T0 @X0 1 s ]
[i _uxTopReadyPriority
-> -> 0 `ui `uc
]
"50
[; ;Source/FreeRTOS/tasks.c: 50:                 static volatile BaseType_t xSchedulerRunning = ( ( BaseType_t ) 0 );
[v _xSchedulerRunning `Vc ~T0 @X0 1 s ]
[i _xSchedulerRunning
-> -> 0 `i `c
]
"51
[; ;Source/FreeRTOS/tasks.c: 51:                 static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
[v _xPendedTicks `Vus ~T0 @X0 1 s ]
[i _xPendedTicks
-> -> 0 `ui `us
]
"52
[; ;Source/FreeRTOS/tasks.c: 52:                 static volatile BaseType_t xYieldPending = ( ( BaseType_t ) 0 );
[v _xYieldPending `Vc ~T0 @X0 1 s ]
[i _xYieldPending
-> -> 0 `i `c
]
"53
[; ;Source/FreeRTOS/tasks.c: 53:                 static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
[v _xNumOfOverflows `Vc ~T0 @X0 1 s ]
[i _xNumOfOverflows
-> -> 0 `i `c
]
"54
[; ;Source/FreeRTOS/tasks.c: 54:                 static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
[v _uxTaskNumber `uc ~T0 @X0 1 s ]
[i _uxTaskNumber
-> -> 0 `ui `uc
]
"55
[; ;Source/FreeRTOS/tasks.c: 55:                 static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U;
[v _xNextTaskUnblockTime `Vus ~T0 @X0 1 s ]
[i _xNextTaskUnblockTime
-> -> 0 `ui `us
]
"56
[; ;Source/FreeRTOS/tasks.c: 56:                 static TaskHandle_t xIdleTaskHandle = ((void*)0);
[v _xIdleTaskHandle `*S936 ~T0 @X0 1 s ]
[i _xIdleTaskHandle
-> -> -> 0 `i `*v `*S936
]
[v F7455 `*S936 ~T0 @X0 1 t ]
"353
[; ;Source/FreeRTOS/tasks.c: 353:                                  TCB_t * volatile pxCurrentTCB = ((void*)0);
[v _pxCurrentTCB `V*S936 ~T0 @X0 1 e ]
[i _pxCurrentTCB
[v F7456 `*S936 ~T0 @X0 1 t ]
-> -> -> 0 `i `*v `V*S936
]
"360
[; ;Source/FreeRTOS/tasks.c: 360:                 static List_t pxReadyTasksLists[ ( 3 ) ];
[v _pxReadyTasksLists `S931 ~T0 @X0 -> 3 `i s ]
"361
[; ;Source/FreeRTOS/tasks.c: 361:                 static List_t xDelayedTaskList1;
[v _xDelayedTaskList1 `S931 ~T0 @X0 1 s ]
"362
[; ;Source/FreeRTOS/tasks.c: 362:                 static List_t xDelayedTaskList2;
[v _xDelayedTaskList2 `S931 ~T0 @X0 1 s ]
[v F7461 `*S931 ~T0 @X0 1 t ]
"363
[; ;Source/FreeRTOS/tasks.c: 363:                 static List_t * volatile pxDelayedTaskList;
[v _pxDelayedTaskList `V*S931 ~T0 @X0 1 s ]
[v F7463 `*S931 ~T0 @X0 1 t ]
"364
[; ;Source/FreeRTOS/tasks.c: 364:                 static List_t * volatile pxOverflowDelayedTaskList;
[v _pxOverflowDelayedTaskList `V*S931 ~T0 @X0 1 s ]
"365
[; ;Source/FreeRTOS/tasks.c: 365:                 static List_t xPendingReadyList;
[v _xPendingReadyList `S931 ~T0 @X0 1 s ]
"368
[; ;Source/FreeRTOS/tasks.c: 368: void pxCurrentTCB_point(uint32_t *dt)
[v _pxCurrentTCB_point `(v ~T0 @X0 1 ef1`*ul ]
"369
[; ;Source/FreeRTOS/tasks.c: 369: {
{
[e :U _pxCurrentTCB_point ]
"368
[; ;Source/FreeRTOS/tasks.c: 368: void pxCurrentTCB_point(uint32_t *dt)
[v _dt `*ul ~T0 @X0 1 r1 ]
"369
[; ;Source/FreeRTOS/tasks.c: 369: {
[f ]
"370
[; ;Source/FreeRTOS/tasks.c: 370:     *dt = pxReadyTasksLists[2].pxIndex->pvOwner;
[e = *U _dt -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul ]
"372
[; ;Source/FreeRTOS/tasks.c: 372: }
[e :UE 943 ]
}
"377
[; ;Source/FreeRTOS/tasks.c: 377:                     static List_t xTasksWaitingTermination;
[v _xTasksWaitingTermination `S931 ~T0 @X0 1 s ]
"378
[; ;Source/FreeRTOS/tasks.c: 378:                     static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
[v _uxDeletedTasksWaitingCleanUp `Vuc ~T0 @X0 1 s ]
[i _uxDeletedTasksWaitingCleanUp
-> -> 0 `ui `uc
]
"384
[; ;Source/FreeRTOS/tasks.c: 384:                     static List_t xSuspendedTaskList;
[v _xSuspendedTaskList `S931 ~T0 @X0 1 s ]
"398
[; ;Source/FreeRTOS/tasks.c: 398: const volatile UBaseType_t uxTopUsedPriority = ( 3 ) - 1U;
[v _uxTopUsedPriority `CVuc ~T0 @X0 1 e ]
[i _uxTopUsedPriority
-> - -> -> 3 `i `ui -> 1 `ui `uc
]
"408
[; ;Source/FreeRTOS/tasks.c: 408:                 static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) ( ( BaseType_t ) 0 );
[v _uxSchedulerSuspended `Vuc ~T0 @X0 1 s ]
[i _uxSchedulerSuspended
-> -> -> 0 `i `c `uc
]
"424
[; ;Source/FreeRTOS/tasks.c: 424: void __prvAddTaskToReadyList( TCB_t *pxTCB)
[v ___prvAddTaskToReadyList `(v ~T0 @X0 1 ef1`*S936 ]
"425
[; ;Source/FreeRTOS/tasks.c: 425: {
{
[e :U ___prvAddTaskToReadyList ]
"424
[; ;Source/FreeRTOS/tasks.c: 424: void __prvAddTaskToReadyList( TCB_t *pxTCB)
[v _pxTCB `*S936 ~T0 @X0 1 r1 ]
"425
[; ;Source/FreeRTOS/tasks.c: 425: {
[f ]
"426
[; ;Source/FreeRTOS/tasks.c: 426:     ListItem_t *pxIndex;
[v _pxIndex `*S930 ~T0 @X0 1 a ]
"427
[; ;Source/FreeRTOS/tasks.c: 427:     ListItem_t *pxNewListItem;
[v _pxNewListItem `*S930 ~T0 @X0 1 a ]
"428
[; ;Source/FreeRTOS/tasks.c: 428:     List_t *pxList;
[v _pxList `*S931 ~T0 @X0 1 a ]
"436
[; ;Source/FreeRTOS/tasks.c: 436:     if( pxTCB->uxPriority > uxTopReadyPriority ){
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 945  ]
{
"437
[; ;Source/FreeRTOS/tasks.c: 437:         uxTopReadyPriority = pxTCB->uxPriority;
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
"438
[; ;Source/FreeRTOS/tasks.c: 438:     }
}
[e :U 945 ]
"441
[; ;Source/FreeRTOS/tasks.c: 441:     pxList = &pxReadyTasksLists[ pxTCB->uxPriority ];
[e = _pxList &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
"442
[; ;Source/FreeRTOS/tasks.c: 442:     pxNewListItem = &pxTCB->xStateListItem;
[e = _pxNewListItem &U . *U _pxTCB 1 ]
"444
[; ;Source/FreeRTOS/tasks.c: 444:     pxIndex = pxList->pxIndex;
[e = _pxIndex . *U _pxList 1 ]
"449
[; ;Source/FreeRTOS/tasks.c: 449:     pxNewListItem->pxNext = pxIndex;
[e = . *U _pxNewListItem 1 _pxIndex ]
"450
[; ;Source/FreeRTOS/tasks.c: 450:     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
[e = . *U _pxNewListItem 2 . *U _pxIndex 2 ]
"452
[; ;Source/FreeRTOS/tasks.c: 452:     pxIndex->pxPrevious->pxNext = pxNewListItem;
[e = . *U . *U _pxIndex 2 1 _pxNewListItem ]
"453
[; ;Source/FreeRTOS/tasks.c: 453:     pxIndex->pxPrevious = pxNewListItem;
[e = . *U _pxIndex 2 _pxNewListItem ]
"456
[; ;Source/FreeRTOS/tasks.c: 456:     pxNewListItem->pvContainer = pxList;
[e = . *U _pxNewListItem 4 _pxList ]
"457
[; ;Source/FreeRTOS/tasks.c: 457:     pxList->uxNumberOfItems ++;
[e ++ . *U _pxList 0 -> -> 1 `i `Vuc ]
"461
[; ;Source/FreeRTOS/tasks.c: 461: }
[e :UE 944 ]
}
"788
[; ;Source/FreeRTOS/tasks.c: 788:     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
[v _xTaskCreate `(c ~T0 @X0 1 ef6`*F7526`C*Cuc`Cus`C*v`uc`C**S936 ]
"794
[; ;Source/FreeRTOS/tasks.c: 794:     {
{
[e :U _xTaskCreate ]
"788
[; ;Source/FreeRTOS/tasks.c: 788:     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
[v _pxTaskCode `*F7532 ~T0 @X0 1 r1 ]
[v F7535 `*Cuc ~T0 @X0 1 t ]
"789
[; ;Source/FreeRTOS/tasks.c: 789:                             const char * const pcName,
[v _pcName `C*Cuc ~T0 @X0 1 r2 ]
"790
[; ;Source/FreeRTOS/tasks.c: 790:                             const uint16_t usStackDepth,
[v _usStackDepth `Cus ~T0 @X0 1 r3 ]
[v F7538 `*v ~T0 @X0 1 t ]
"791
[; ;Source/FreeRTOS/tasks.c: 791:                             void * const pvParameters,
[v _pvParameters `C*v ~T0 @X0 1 r4 ]
"792
[; ;Source/FreeRTOS/tasks.c: 792:                             UBaseType_t uxPriority,
[v _uxPriority `uc ~T0 @X0 1 r5 ]
[v F7541 `**S936 ~T0 @X0 1 t ]
"793
[; ;Source/FreeRTOS/tasks.c: 793:                             TaskHandle_t * const pxCreatedTask )
[v _pxCreatedTask `C**S936 ~T0 @X0 1 r6 ]
"794
[; ;Source/FreeRTOS/tasks.c: 794:     {
[f ]
"795
[; ;Source/FreeRTOS/tasks.c: 795:         TCB_t * pxNewTCB;
[v _pxNewTCB `*S936 ~T0 @X0 1 a ]
"796
[; ;Source/FreeRTOS/tasks.c: 796:         BaseType_t xReturn;
[v _xReturn `c ~T0 @X0 1 a ]
"797
[; ;Source/FreeRTOS/tasks.c: 797:         uint32_t mAdd;
[v _mAdd `ul ~T0 @X0 1 a ]
"803
[; ;Source/FreeRTOS/tasks.c: 803:         {
{
"806
[; ;Source/FreeRTOS/tasks.c: 806:             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
[e = _pxNewTCB -> ( _pvPortMalloc (1 -> # `S936 `ui `*S936 ]
"808
[; ;Source/FreeRTOS/tasks.c: 808:             if( pxNewTCB != ((void*)0) )
[e $ ! != _pxNewTCB -> -> -> 0 `i `*v `*S936 947  ]
"809
[; ;Source/FreeRTOS/tasks.c: 809:             {
{
"810
[; ;Source/FreeRTOS/tasks.c: 810:                 Xprintf("xTaskCreate 001 pxNewTCB=%p\r\n",(void *)pxNewTCB);
[e ( _Xprintf , (. :s 1C -> _pxNewTCB `*v ]
"811
[; ;Source/FreeRTOS/tasks.c: 811:                 mAdd = (uint32_t)(TCB_t *)pxNewTCB;
[e = _mAdd -> _pxNewTCB `ul ]
"813
[; ;Source/FreeRTOS/tasks.c: 813:                 Xprintf("xTaskCreate 00A pxNewTCB=%p\r\n",(uint32_t)mAdd);
[e ( _Xprintf , (. :s 2C _mAdd ]
"814
[; ;Source/FreeRTOS/tasks.c: 814:                 do { if( isr_cnt < 10 ){ const char* _s = ("pxNewTCB(1)="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 28 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 24 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 20 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 16 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)mAdd & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 950 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 951  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 3C ]
[e $U 952  ]
[e :U 953 ]
{
{
[e $U 955  ]
[e :U 956 ]
[e :U 955 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 956  ]
[e :U 957 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 952 ]
[e $ != -> *U __s `i -> 0 `i 953  ]
[e :U 954 ]
{
[e $U 958  ]
[e :U 959 ]
[e :U 958 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 959  ]
[e :U 960 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 28 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 961  ]
[e :U 962 ]
[e :U 961 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 962  ]
[e :U 963 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 24 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 964  ]
[e :U 965 ]
[e :U 964 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 965  ]
[e :U 966 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 20 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 967  ]
[e :U 968 ]
[e :U 967 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 968  ]
[e :U 969 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 16 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 970  ]
[e :U 971 ]
[e :U 970 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 971  ]
[e :U 972 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 12 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 973  ]
[e :U 974 ]
[e :U 973 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 974  ]
[e :U 975 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 8 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 976  ]
[e :U 977 ]
[e :U 976 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 977  ]
[e :U 978 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> _mAdd -> 4 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 979  ]
[e :U 980 ]
[e :U 979 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 980  ]
[e :U 981 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & _mAdd -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 982  ]
[e :U 983 ]
[e :U 982 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 983  ]
[e :U 984 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 985  ]
[e :U 986 ]
[e :U 985 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 986  ]
[e :U 987 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 951 ]
}
[e :U 949 ]
"818
[; ;Source/FreeRTOS/tasks.c: 818:                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
[e ( _memset (3 , , -> _pxNewTCB `*v -> 0 `i -> # `S936 `ui ]
"823
[; ;Source/FreeRTOS/tasks.c: 823:                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
[e = . *U _pxNewTCB 4 -> ( _pvPortMalloc (1 * -> _usStackDepth `ui -> # `uc `ui `*uc ]
"825
[; ;Source/FreeRTOS/tasks.c: 825:                 Xprintf("xTaskCreate 002 pxStack=%p\r\n",(void *)pxNewTCB->pxStack);
[e ( _Xprintf , (. :s 4C -> . *U _pxNewTCB 4 `*v ]
"826
[; ;Source/FreeRTOS/tasks.c: 826:                 if( pxNewTCB->pxStack == ((void*)0) )
[e $ ! == . *U _pxNewTCB 4 -> -> -> 0 `i `*v `*uc 988  ]
"827
[; ;Source/FreeRTOS/tasks.c: 827:                 {
{
"829
[; ;Source/FreeRTOS/tasks.c: 829:                     vPortFree( pxNewTCB );
[e ( _vPortFree (1 -> _pxNewTCB `*v ]
"830
[; ;Source/FreeRTOS/tasks.c: 830:                     pxNewTCB = ((void*)0);
[e = _pxNewTCB -> -> -> 0 `i `*v `*S936 ]
"831
[; ;Source/FreeRTOS/tasks.c: 831:                 }
}
[e :U 988 ]
"832
[; ;Source/FreeRTOS/tasks.c: 832:             }
}
[e :U 947 ]
"833
[; ;Source/FreeRTOS/tasks.c: 833:         }
}
"867
[; ;Source/FreeRTOS/tasks.c: 867:         if( pxNewTCB != ((void*)0) )
[e $ ! != _pxNewTCB -> -> -> 0 `i `*v `*S936 989  ]
"868
[; ;Source/FreeRTOS/tasks.c: 868:         {
{
"877
[; ;Source/FreeRTOS/tasks.c: 877:             Xprintf("xTaskCreate 003\r\n");
[e ( _Xprintf :s 5C ]
"879
[; ;Source/FreeRTOS/tasks.c: 879:             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, ((void*)0) );
[e ( _prvInitialiseNewTask (4 , , , , , , , _pxTaskCode _pcName -> _usStackDepth `ul _pvParameters _uxPriority _pxCreatedTask _pxNewTCB -> -> -> 0 `i `*v `*CS938 ]
"880
[; ;Source/FreeRTOS/tasks.c: 880:             prvAddNewTaskToReadyList( pxNewTCB );
[e ( _prvAddNewTaskToReadyList (1 _pxNewTCB ]
"881
[; ;Source/FreeRTOS/tasks.c: 881:             xReturn = ( ( ( BaseType_t ) 1 ) );
[e = _xReturn -> -> 1 `i `c ]
"883
[; ;Source/FreeRTOS/tasks.c: 883:         }
}
[e $U 990  ]
"884
[; ;Source/FreeRTOS/tasks.c: 884:         else
[e :U 989 ]
"885
[; ;Source/FreeRTOS/tasks.c: 885:         {
{
"886
[; ;Source/FreeRTOS/tasks.c: 886:             xReturn = ( -1 );
[e = _xReturn -> -U -> 1 `i `c ]
"887
[; ;Source/FreeRTOS/tasks.c: 887:         }
}
[e :U 990 ]
"889
[; ;Source/FreeRTOS/tasks.c: 889:         return xReturn;
[e ) _xReturn ]
[e $UE 946  ]
"890
[; ;Source/FreeRTOS/tasks.c: 890:     }
[e :UE 946 ]
}
"895
[; ;Source/FreeRTOS/tasks.c: 895: static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
[v _prvInitialiseNewTask `(v ~T0 @X0 1 sf8`*F7547`C*Cuc`Cul`C*v`uc`C**S936`*S936`C*CS938 ]
"903
[; ;Source/FreeRTOS/tasks.c: 903: {
{
[e :U _prvInitialiseNewTask ]
"895
[; ;Source/FreeRTOS/tasks.c: 895: static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
[v _pxTaskCode `*F7554 ~T0 @X0 1 r1 ]
[v F7557 `*Cuc ~T0 @X0 1 t ]
"896
[; ;Source/FreeRTOS/tasks.c: 896:                                   const char * const pcName,
[v _pcName `C*Cuc ~T0 @X0 1 r2 ]
"897
[; ;Source/FreeRTOS/tasks.c: 897:                                   const uint32_t ulStackDepth,
[v _ulStackDepth `Cul ~T0 @X0 1 r3 ]
[v F7560 `*v ~T0 @X0 1 t ]
"898
[; ;Source/FreeRTOS/tasks.c: 898:                                   void * const pvParameters,
[v _pvParameters `C*v ~T0 @X0 1 r4 ]
"899
[; ;Source/FreeRTOS/tasks.c: 899:                                   UBaseType_t uxPriority,
[v _uxPriority `uc ~T0 @X0 1 r5 ]
[v F7563 `**S936 ~T0 @X0 1 t ]
"900
[; ;Source/FreeRTOS/tasks.c: 900:                                   TaskHandle_t * const pxCreatedTask,
[v _pxCreatedTask `C**S936 ~T0 @X0 1 r6 ]
"901
[; ;Source/FreeRTOS/tasks.c: 901:                                   TCB_t * pxNewTCB,
[v _pxNewTCB `*S936 ~T0 @X0 1 r7 ]
[v F7566 `*CS938 ~T0 @X0 1 t ]
"902
[; ;Source/FreeRTOS/tasks.c: 902:                                   const MemoryRegion_t * const xRegions )
[v _xRegions `C*CS938 ~T0 @X0 1 r8 ]
"903
[; ;Source/FreeRTOS/tasks.c: 903: {
[f ]
"904
[; ;Source/FreeRTOS/tasks.c: 904:     StackType_t * pxTopOfStack;
[v _pxTopOfStack `*uc ~T0 @X0 1 a ]
"905
[; ;Source/FreeRTOS/tasks.c: 905:     UBaseType_t x;
[v _x `uc ~T0 @X0 1 a ]
"907
[; ;Source/FreeRTOS/tasks.c: 907:     Xprintf("prvInitialiseNewTask 001 pxNewTCB=%p\r\n",(void *)pxNewTCB);
[e ( _Xprintf , (. :s 6C -> _pxNewTCB `*v ]
"908
[; ;Source/FreeRTOS/tasks.c: 908:     Xprintf("prvInitialiseNewTask 002 pxStack=%p\r\n",(void *)pxNewTCB->pxStack);
[e ( _Xprintf , (. :s 7C -> . *U _pxNewTCB 4 `*v ]
"927
[; ;Source/FreeRTOS/tasks.c: 927:     {
{
"929
[; ;Source/FreeRTOS/tasks.c: 929:         ( void ) memset( pxNewTCB->pxStack, ( int ) ( 0xa5U ), ( size_t ) ulStackDepth * sizeof( StackType_t ) );
[e ( _memset (3 , , -> . *U _pxNewTCB 4 `*v -> -> 165 `ui `i * -> _ulStackDepth `ui -> # `uc `ui ]
"930
[; ;Source/FreeRTOS/tasks.c: 930:     }
}
"954
[; ;Source/FreeRTOS/tasks.c: 954:     {
{
"955
[; ;Source/FreeRTOS/tasks.c: 955:         Xprintf("prvInitialiseNewTask 002\r\n");
[e ( _Xprintf :s 8C ]
"956
[; ;Source/FreeRTOS/tasks.c: 956:         pxTopOfStack = pxNewTCB->pxStack;
[e = _pxTopOfStack . *U _pxNewTCB 4 ]
"959
[; ;Source/FreeRTOS/tasks.c: 959:         if( ( ( ( ( uint32_t ) pxNewTCB->pxStack & ( uint32_t ) ( 0x0000 ) ) == 0UL ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 959 );
[e $ ! == -> == & -> . *U _pxNewTCB 4 `ul -> -> 0 `i `ul -> 0 `ul `i -> 0 `i 992  ]
[e ( _Xprintf , (. :s 9C -> 959 `i ]
[e :U 992 ]
"962
[; ;Source/FreeRTOS/tasks.c: 962:         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
[e = . *U _pxNewTCB 6 + . *U _pxNewTCB 4 * -> - _ulStackDepth -> -> 1 `i `ul `ux -> -> # *U . *U _pxNewTCB 4 `ui `ux ]
"963
[; ;Source/FreeRTOS/tasks.c: 963:     }
}
"967
[; ;Source/FreeRTOS/tasks.c: 967:     if( pcName != ((void*)0) )
[e $ ! != _pcName -> -> -> 0 `i `*v `*Cuc 993  ]
"968
[; ;Source/FreeRTOS/tasks.c: 968:     {
{
"969
[; ;Source/FreeRTOS/tasks.c: 969:         Xprintf("prvInitialiseNewTask 003\r\n");
[e ( _Xprintf :s 10C ]
"970
[; ;Source/FreeRTOS/tasks.c: 970:         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) ( 4 ); x++ )
{
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> -> -> 4 `i `uc `i 994  ]
[e $U 995  ]
[e :U 994 ]
"971
[; ;Source/FreeRTOS/tasks.c: 971:         {
{
"972
[; ;Source/FreeRTOS/tasks.c: 972:             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
[e = *U + &U . *U _pxNewTCB 5 * -> _x `ux -> -> # *U &U . *U _pxNewTCB 5 `ui `ux *U + _pcName * -> _x `ux -> -> # *U _pcName `ui `ux ]
"978
[; ;Source/FreeRTOS/tasks.c: 978:             if( pcName[ x ] == ( char ) 0x00 )
[e $ ! == -> *U + _pcName * -> _x `ux -> -> # *U _pcName `ui `ux `i -> -> -> 0 `i `uc `i 997  ]
"979
[; ;Source/FreeRTOS/tasks.c: 979:             {
{
"980
[; ;Source/FreeRTOS/tasks.c: 980:                 break;
[e $U 995  ]
"981
[; ;Source/FreeRTOS/tasks.c: 981:             }
}
[e $U 998  ]
"982
[; ;Source/FreeRTOS/tasks.c: 982:             else
[e :U 997 ]
"983
[; ;Source/FreeRTOS/tasks.c: 983:             {
{
"985
[; ;Source/FreeRTOS/tasks.c: 985:             }
}
[e :U 998 ]
"986
[; ;Source/FreeRTOS/tasks.c: 986:         }
}
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> -> -> 4 `i `uc `i 994  ]
[e :U 995 ]
}
"990
[; ;Source/FreeRTOS/tasks.c: 990:         pxNewTCB->pcTaskName[ ( 4 ) - 1 ] = '\0';
[e = *U + &U . *U _pxNewTCB 5 * -> -> - -> 4 `i -> 1 `i `ui `ux -> -> # *U &U . *U _pxNewTCB 5 `ui `ux -> -> 0 `ui `uc ]
"991
[; ;Source/FreeRTOS/tasks.c: 991:     }
}
[e $U 999  ]
"992
[; ;Source/FreeRTOS/tasks.c: 992:     else
[e :U 993 ]
"993
[; ;Source/FreeRTOS/tasks.c: 993:     {
{
"995
[; ;Source/FreeRTOS/tasks.c: 995:     }
}
[e :U 999 ]
"998
[; ;Source/FreeRTOS/tasks.c: 998:     if( ( uxPriority < ( 3 ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 998 );
[e $ ! == -> < -> _uxPriority `i -> 3 `i `i -> 0 `i 1000  ]
[e ( _Xprintf , (. :s 11C -> 998 `i ]
[e :U 1000 ]
"1000
[; ;Source/FreeRTOS/tasks.c: 1000:     if( uxPriority >= ( UBaseType_t ) ( 3 ) )
[e $ ! >= -> _uxPriority `i -> -> -> 3 `i `uc `i 1001  ]
"1001
[; ;Source/FreeRTOS/tasks.c: 1001:     {
{
"1002
[; ;Source/FreeRTOS/tasks.c: 1002:         uxPriority = ( UBaseType_t ) ( 3 ) - ( UBaseType_t ) 1U;
[e = _uxPriority -> - -> -> -> 3 `i `uc `i -> -> -> 1 `ui `uc `i `uc ]
"1003
[; ;Source/FreeRTOS/tasks.c: 1003:     }
}
[e $U 1002  ]
"1004
[; ;Source/FreeRTOS/tasks.c: 1004:     else
[e :U 1001 ]
"1005
[; ;Source/FreeRTOS/tasks.c: 1005:     {
{
"1007
[; ;Source/FreeRTOS/tasks.c: 1007:     }
}
[e :U 1002 ]
"1009
[; ;Source/FreeRTOS/tasks.c: 1009:     pxNewTCB->uxPriority = uxPriority;
[e = . *U _pxNewTCB 3 _uxPriority ]
"1016
[; ;Source/FreeRTOS/tasks.c: 1016:     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
[e ( _vListInitialiseItem (1 &U . *U _pxNewTCB 1 ]
"1017
[; ;Source/FreeRTOS/tasks.c: 1017:     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
[e ( _vListInitialiseItem (1 &U . *U _pxNewTCB 2 ]
"1021
[; ;Source/FreeRTOS/tasks.c: 1021:     ( ( &( pxNewTCB->xStateListItem ) )->pvOwner = ( void * ) ( pxNewTCB ) );
[e = . *U &U . *U _pxNewTCB 1 3 -> _pxNewTCB `*v ]
"1024
[; ;Source/FreeRTOS/tasks.c: 1024:     ( ( &( pxNewTCB->xEventListItem ) )->xItemValue = ( ( TickType_t ) ( 3 ) - ( TickType_t ) uxPriority ) );
[e = . *U &U . *U _pxNewTCB 2 0 -> - -> -> -> 3 `i `us `ui -> -> _uxPriority `us `ui `us ]
"1025
[; ;Source/FreeRTOS/tasks.c: 1025:     ( ( &( pxNewTCB->xEventListItem ) )->pvOwner = ( void * ) ( pxNewTCB ) );
[e = . *U &U . *U _pxNewTCB 2 3 -> _pxNewTCB `*v ]
"1032
[; ;Source/FreeRTOS/tasks.c: 1032:     {
{
"1034
[; ;Source/FreeRTOS/tasks.c: 1034:         ( void ) xRegions;
[e _xRegions ]
"1035
[; ;Source/FreeRTOS/tasks.c: 1035:     }
}
"1071
[; ;Source/FreeRTOS/tasks.c: 1071:     {
{
"1087
[; ;Source/FreeRTOS/tasks.c: 1087:         {
{
"1088
[; ;Source/FreeRTOS/tasks.c: 1088:             do { if( isr_cnt < 10 ){ const char* _s = ("pIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 1 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 1 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1005 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1006  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 12C ]
[e $U 1007  ]
[e :U 1008 ]
{
{
[e $U 1010  ]
[e :U 1011 ]
[e :U 1010 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1011  ]
[e :U 1012 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1007 ]
[e $ != -> *U __s `i -> 0 `i 1008  ]
[e :U 1009 ]
{
[e $U 1013  ]
[e :U 1014 ]
[e :U 1013 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1014  ]
[e :U 1015 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 1 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1016  ]
[e :U 1017 ]
[e :U 1016 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1017  ]
[e :U 1018 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 1 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1019  ]
[e :U 1020 ]
[e :U 1019 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1020  ]
[e :U 1021 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1022  ]
[e :U 1023 ]
[e :U 1022 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1023  ]
[e :U 1024 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1006 ]
}
[e :U 1004 ]
"1089
[; ;Source/FreeRTOS/tasks.c: 1089:             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
[e = . *U _pxNewTCB 0 -> ( _pxPortInitialiseStack (3 , , _pxTopOfStack _pxTaskCode _pvParameters `*Vuc ]
"1090
[; ;Source/FreeRTOS/tasks.c: 1090:         }
}
"1092
[; ;Source/FreeRTOS/tasks.c: 1092:     }
}
"1095
[; ;Source/FreeRTOS/tasks.c: 1095:     if( pxCreatedTask != ((void*)0) )
[e $ ! != _pxCreatedTask -> -> -> 0 `i `*v `**S936 1025  ]
"1096
[; ;Source/FreeRTOS/tasks.c: 1096:     {
{
"1099
[; ;Source/FreeRTOS/tasks.c: 1099:         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
[e = *U _pxCreatedTask _pxNewTCB ]
"1100
[; ;Source/FreeRTOS/tasks.c: 1100:     }
}
[e $U 1026  ]
"1101
[; ;Source/FreeRTOS/tasks.c: 1101:     else
[e :U 1025 ]
"1102
[; ;Source/FreeRTOS/tasks.c: 1102:     {
{
"1104
[; ;Source/FreeRTOS/tasks.c: 1104:     }
}
[e :U 1026 ]
"1105
[; ;Source/FreeRTOS/tasks.c: 1105: }
[e :UE 991 ]
}
"1110
[; ;Source/FreeRTOS/tasks.c: 1110: void taskInfo( TCB_t *tcb )
[v _taskInfo `(v ~T0 @X0 1 ef1`*S936 ]
"1111
[; ;Source/FreeRTOS/tasks.c: 1111: {
{
[e :U _taskInfo ]
"1110
[; ;Source/FreeRTOS/tasks.c: 1110: void taskInfo( TCB_t *tcb )
[v _tcb `*S936 ~T0 @X0 1 r1 ]
"1111
[; ;Source/FreeRTOS/tasks.c: 1111: {
[f ]
"1112
[; ;Source/FreeRTOS/tasks.c: 1112:     Xprintf("\r\n");
[e ( _Xprintf :s 13C ]
"1114
[; ;Source/FreeRTOS/tasks.c: 1114:     Xprintf("******************\r\n");
[e ( _Xprintf :s 14C ]
"1115
[; ;Source/FreeRTOS/tasks.c: 1115:     Xprintf("***  taskInfo  ***\r\n",(void *)tcb);
[e ( _Xprintf , (. :s 15C -> _tcb `*v ]
"1116
[; ;Source/FreeRTOS/tasks.c: 1116:     Xprintf("******************\r\n");
[e ( _Xprintf :s 16C ]
"1117
[; ;Source/FreeRTOS/tasks.c: 1117:     Xprintf("pxNewTCB       = %p\r\n",(void *)tcb);
[e ( _Xprintf , (. :s 17C -> _tcb `*v ]
"1118
[; ;Source/FreeRTOS/tasks.c: 1118:     Xprintf("pcTaskName     = %s\r\n", &tcb->pcTaskName[0]);
[e ( _Xprintf , (. :s 18C &U *U + &U . *U _tcb 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _tcb 5 `ui `ux ]
"1119
[; ;Source/FreeRTOS/tasks.c: 1119:     Xprintf(" uxPriority    = %d\r\n", tcb->uxPriority);
[e ( _Xprintf , (. :s 19C -> . *U _tcb 3 `i ]
"1120
[; ;Source/FreeRTOS/tasks.c: 1120:     Xprintf(" pxStack       = %p\r\n", (void *)tcb->pxStack);
[e ( _Xprintf , (. :s 20C -> . *U _tcb 4 `*v ]
"1121
[; ;Source/FreeRTOS/tasks.c: 1121:     Xprintf(" pxTopOfStack  = %p\r\n", (void *)tcb->pxTopOfStack);
[e ( _Xprintf , (. :s 21C -> . *U _tcb 0 `*v ]
"1122
[; ;Source/FreeRTOS/tasks.c: 1122:     Xprintf(" pxEndOfStack  = %p\r\n", (void *)tcb->pxEndOfStack);
[e ( _Xprintf , (. :s 22C -> . *U _tcb 6 `*v ]
"1124
[; ;Source/FreeRTOS/tasks.c: 1124:     Xprintf("xStateListItem = %p\r\n", (void *)&tcb->xStateListItem);
[e ( _Xprintf , (. :s 23C -> &U . *U _tcb 1 `*v ]
"1125
[; ;Source/FreeRTOS/tasks.c: 1125:     Xprintf(" pvContainer   = %p\r\n", (void *)tcb->xStateListItem.pvContainer);
[e ( _Xprintf , (. :s 24C -> . . *U _tcb 1 4 `*v ]
"1126
[; ;Source/FreeRTOS/tasks.c: 1126:     Xprintf(" pvOwner       = %p\r\n", (void *)tcb->xStateListItem.pvOwner);
[e ( _Xprintf , (. :s 25C . . *U _tcb 1 3 ]
"1127
[; ;Source/FreeRTOS/tasks.c: 1127:     Xprintf(" pxNext        = %p\r\n", (void *)tcb->xStateListItem.pxNext);
[e ( _Xprintf , (. :s 26C -> . . *U _tcb 1 1 `*v ]
"1128
[; ;Source/FreeRTOS/tasks.c: 1128:     Xprintf(" pxPrevious    = %p\r\n", (void *)tcb->xStateListItem.pxPrevious);
[e ( _Xprintf , (. :s 27C -> . . *U _tcb 1 2 `*v ]
"1129
[; ;Source/FreeRTOS/tasks.c: 1129:     Xprintf(" xItemValue  　= %x\r\n", tcb->xStateListItem.xItemValue);
[e ( _Xprintf , (. :s 28C -> . . *U _tcb 1 0 `ui ]
"1132
[; ;Source/FreeRTOS/tasks.c: 1132:     Xprintf("xEventListItem = %p\r\n", (void *)&tcb->xEventListItem);
[e ( _Xprintf , (. :s 29C -> &U . *U _tcb 2 `*v ]
"1133
[; ;Source/FreeRTOS/tasks.c: 1133:     Xprintf(" pvContainer 　= %p\r\n", (void *)tcb->xEventListItem.pvContainer);
[e ( _Xprintf , (. :s 30C -> . . *U _tcb 2 4 `*v ]
"1134
[; ;Source/FreeRTOS/tasks.c: 1134:     Xprintf(" pvOwner     　= %p\r\n", (void *)tcb->xEventListItem.pvOwner);
[e ( _Xprintf , (. :s 31C . . *U _tcb 2 3 ]
"1135
[; ;Source/FreeRTOS/tasks.c: 1135:     Xprintf(" pxNext     　 = %p\r\n", (void *)tcb->xEventListItem.pxNext);
[e ( _Xprintf , (. :s 32C -> . . *U _tcb 2 1 `*v ]
"1136
[; ;Source/FreeRTOS/tasks.c: 1136:     Xprintf(" pxPrevious  　= %p\r\n", (void *)tcb->xEventListItem.pxPrevious);
[e ( _Xprintf , (. :s 33C -> . . *U _tcb 2 2 `*v ]
"1137
[; ;Source/FreeRTOS/tasks.c: 1137:     Xprintf(" xItemValue    = %x\r\n", tcb->xEventListItem.xItemValue);
[e ( _Xprintf , (. :s 34C -> . . *U _tcb 2 0 `ui ]
"1154
[; ;Source/FreeRTOS/tasks.c: 1154: }
[e :UE 1027 ]
}
"1156
[; ;Source/FreeRTOS/tasks.c: 1156: void pxReadyTasksLists_info(void)
[v _pxReadyTasksLists_info `(v ~T0 @X0 1 ef ]
"1157
[; ;Source/FreeRTOS/tasks.c: 1157: {
{
[e :U _pxReadyTasksLists_info ]
[f ]
"1158
[; ;Source/FreeRTOS/tasks.c: 1158:     uint8_t i,j;
[v _i `uc ~T0 @X0 1 a ]
[v _j `uc ~T0 @X0 1 a ]
"1159
[; ;Source/FreeRTOS/tasks.c: 1159:     ListItem_t *xlist;
[v _xlist `*S930 ~T0 @X0 1 a ]
"1161
[; ;Source/FreeRTOS/tasks.c: 1161:      do { if( isr_cnt < 10 ){ const char* _s = ("pxCurrentTCB="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 28 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 24 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 20 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 16 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1031 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1032  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 35C ]
[e $U 1033  ]
[e :U 1034 ]
{
{
[e $U 1036  ]
[e :U 1037 ]
[e :U 1036 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1037  ]
[e :U 1038 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1033 ]
[e $ != -> *U __s `i -> 0 `i 1034  ]
[e :U 1035 ]
{
[e $U 1039  ]
[e :U 1040 ]
[e :U 1039 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1040  ]
[e :U 1041 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 28 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1042  ]
[e :U 1043 ]
[e :U 1042 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1043  ]
[e :U 1044 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 24 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1045  ]
[e :U 1046 ]
[e :U 1045 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1046  ]
[e :U 1047 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 20 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1048  ]
[e :U 1049 ]
[e :U 1048 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1049  ]
[e :U 1050 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 16 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1051  ]
[e :U 1052 ]
[e :U 1051 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1052  ]
[e :U 1053 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 12 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1054  ]
[e :U 1055 ]
[e :U 1054 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1055  ]
[e :U 1056 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 8 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1057  ]
[e :U 1058 ]
[e :U 1057 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1058  ]
[e :U 1059 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 4 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1060  ]
[e :U 1061 ]
[e :U 1060 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1061  ]
[e :U 1062 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> _pxCurrentTCB `ul -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1063  ]
[e :U 1064 ]
[e :U 1063 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1064  ]
[e :U 1065 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1066  ]
[e :U 1067 ]
[e :U 1066 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1067  ]
[e :U 1068 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1032 ]
}
[e :U 1030 ]
"1163
[; ;Source/FreeRTOS/tasks.c: 1163:     Xprintf("\r\n");
[e ( _Xprintf :s 36C ]
"1164
[; ;Source/FreeRTOS/tasks.c: 1164:     Xprintf("***************************\r\n");
[e ( _Xprintf :s 37C ]
"1165
[; ;Source/FreeRTOS/tasks.c: 1165:     Xprintf("*** pxReadyTasksLists[] ***\r\n");
[e ( _Xprintf :s 38C ]
"1166
[; ;Source/FreeRTOS/tasks.c: 1166:     Xprintf("***************************\r\n");
[e ( _Xprintf :s 39C ]
"1167
[; ;Source/FreeRTOS/tasks.c: 1167:     for(i = 0; i<( 3 ); i++ ){
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 3 `i 1069  ]
[e $U 1070  ]
[e :U 1069 ]
{
"1168
[; ;Source/FreeRTOS/tasks.c: 1168:         Xprintf("PRIORITY = %d --------------------------\r\n",i);
[e ( _Xprintf , (. :s 40C -> _i `i ]
"1169
[; ;Source/FreeRTOS/tasks.c: 1169:         Xprintf("TASK NUM = %d\r\n", pxReadyTasksLists[i].uxNumberOfItems);
[e ( _Xprintf , (. :s 41C -> . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 `i ]
"1170
[; ;Source/FreeRTOS/tasks.c: 1170:         Xprintf("xListEnd          =%p\r\n", (void *)&pxReadyTasksLists[i].xListEnd　);
[e ( _Xprintf , (. :s 42C -> &U . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 2 `*v ]
"1171
[; ;Source/FreeRTOS/tasks.c: 1171:         Xprintf("  +-- xItemValue  =%d\r\n", (void *)pxReadyTasksLists[i].xListEnd.xItemValue　);
[e ( _Xprintf , (. :s 43C -> . . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 2 0 `*v ]
"1172
[; ;Source/FreeRTOS/tasks.c: 1172:         xlist = pxReadyTasksLists[i].xListEnd.pxNext;
[e = _xlist . . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 2 1 ]
"1173
[; ;Source/FreeRTOS/tasks.c: 1173:         Xprintf("  +-- pxNext      =%p\r\n", (void *)xlist　);
[e ( _Xprintf , (. :s 44C -> _xlist `*v ]
"1174
[; ;Source/FreeRTOS/tasks.c: 1174:         Xprintf("  +-- pxPrevious  =%p\r\n", (void *)pxReadyTasksLists[i].xListEnd.pxPrevious　);
[e ( _Xprintf , (. :s 45C -> . . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 2 2 `*v ]
"1175
[; ;Source/FreeRTOS/tasks.c: 1175:         Xprintf("\r\n");
[e ( _Xprintf :s 46C ]
"1176
[; ;Source/FreeRTOS/tasks.c: 1176:         Xprintf("pxIndex           =%p\r\n", (void *)pxReadyTasksLists[i].pxIndex　);
[e ( _Xprintf , (. :s 47C -> . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 `*v ]
"1177
[; ;Source/FreeRTOS/tasks.c: 1177:         Xprintf("  +-- xItemValue  =%d\r\n", (void *)pxReadyTasksLists[i].pxIndex->xItemValue　);
[e ( _Xprintf , (. :s 48C -> . *U . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 0 `*v ]
"1178
[; ;Source/FreeRTOS/tasks.c: 1178:         Xprintf("  +-- pxNext      =%p\r\n", (void *)xlist　);
[e ( _Xprintf , (. :s 49C -> _xlist `*v ]
"1179
[; ;Source/FreeRTOS/tasks.c: 1179:         Xprintf("  +-- pxPrevious  =%p\r\n", (void *)pxReadyTasksLists[i].pxIndex->pxPrevious　);
[e ( _Xprintf , (. :s 50C -> . *U . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 2 `*v ]
"1180
[; ;Source/FreeRTOS/tasks.c: 1180:         Xprintf("  +-- pvOwner     =%p\r\n", (void *)pxReadyTasksLists[i].pxIndex->pvOwner　);
[e ( _Xprintf , (. :s 51C . *U . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 ]
"1182
[; ;Source/FreeRTOS/tasks.c: 1182:         Xprintf("\r\n");
[e ( _Xprintf :s 52C ]
"1185
[; ;Source/FreeRTOS/tasks.c: 1185:         j = 1;
[e = _j -> -> 1 `i `uc ]
"1186
[; ;Source/FreeRTOS/tasks.c: 1186:         while( (void *)xlist != (void *)&pxReadyTasksLists[i].xListEnd ){
[e $U 1072  ]
[e :U 1073 ]
{
"1187
[; ;Source/FreeRTOS/tasks.c: 1187:             Xprintf("xListEnd.pxNext(%d) %p\r\n", j,(void *)xlist);
[e ( _Xprintf , , (. :s 53C -> _j `i -> _xlist `*v ]
"1188
[; ;Source/FreeRTOS/tasks.c: 1188:             Xprintf("  +-- xItemValue  =%d\r\n", (void *)xlist->xItemValue　);
[e ( _Xprintf , (. :s 54C -> . *U _xlist 0 `*v ]
"1189
[; ;Source/FreeRTOS/tasks.c: 1189:             Xprintf("  +-- pxNext      =%p\r\n", (void *)xlist->pxNext);
[e ( _Xprintf , (. :s 55C -> . *U _xlist 1 `*v ]
"1190
[; ;Source/FreeRTOS/tasks.c: 1190:             Xprintf("  +-- pxPrevious  =%p\r\n", (void *)xlist->pxPrevious);
[e ( _Xprintf , (. :s 56C -> . *U _xlist 2 `*v ]
"1191
[; ;Source/FreeRTOS/tasks.c: 1191:             Xprintf("  +-- pvOwner     =%p\r\n", (void *)xlist->pvOwner);
[e ( _Xprintf , (. :s 57C . *U _xlist 3 ]
"1192
[; ;Source/FreeRTOS/tasks.c: 1192:             Xprintf("  +-- pxContainer =%p\r\n", (void *)xlist->pvContainer　);
[e ( _Xprintf , (. :s 58C -> . *U _xlist 4 `*v ]
"1193
[; ;Source/FreeRTOS/tasks.c: 1193:             xlist = xlist->pxNext;
[e = _xlist . *U _xlist 1 ]
"1194
[; ;Source/FreeRTOS/tasks.c: 1194:             j ++;
[e ++ _j -> -> 1 `i `uc ]
"1195
[; ;Source/FreeRTOS/tasks.c: 1195:         }
}
[e :U 1072 ]
"1186
[; ;Source/FreeRTOS/tasks.c: 1186:         while( (void *)xlist != (void *)&pxReadyTasksLists[i].xListEnd ){
[e $ != -> _xlist `*v -> &U . *U + &U _pxReadyTasksLists * -> _i `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 2 `*v 1073  ]
[e :U 1074 ]
"1196
[; ;Source/FreeRTOS/tasks.c: 1196:         Xprintf("\r\n");
[e ( _Xprintf :s 59C ]
"1198
[; ;Source/FreeRTOS/tasks.c: 1198:         Xprintf("xListEnd.pxNext(%d) %p\r\n", j,(void *)xlist);
[e ( _Xprintf , , (. :s 60C -> _j `i -> _xlist `*v ]
"1199
[; ;Source/FreeRTOS/tasks.c: 1199:         Xprintf("  +-- xItemValue  =%d\r\n", (void *)xlist->xItemValue　);
[e ( _Xprintf , (. :s 61C -> . *U _xlist 0 `*v ]
"1200
[; ;Source/FreeRTOS/tasks.c: 1200:         Xprintf("  +-- pxNext      =%p\r\n", (void *)xlist->pxNext);
[e ( _Xprintf , (. :s 62C -> . *U _xlist 1 `*v ]
"1201
[; ;Source/FreeRTOS/tasks.c: 1201:         Xprintf("  +-- pxPrevious  =%p\r\n", (void *)xlist->pxPrevious);
[e ( _Xprintf , (. :s 63C -> . *U _xlist 2 `*v ]
"1202
[; ;Source/FreeRTOS/tasks.c: 1202:         Xprintf("  +-- pvOwner     =%p\r\n", (void *)xlist->pvOwner);
[e ( _Xprintf , (. :s 64C . *U _xlist 3 ]
"1203
[; ;Source/FreeRTOS/tasks.c: 1203:         Xprintf("  +-- pxContainer =%p\r\n", (void *)xlist->pvContainer　);
[e ( _Xprintf , (. :s 65C -> . *U _xlist 4 `*v ]
"1205
[; ;Source/FreeRTOS/tasks.c: 1205:     }
}
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 3 `i 1069  ]
[e :U 1070 ]
}
"1206
[; ;Source/FreeRTOS/tasks.c: 1206: }
[e :UE 1028 ]
}
"1209
[; ;Source/FreeRTOS/tasks.c: 1209: static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
[v _prvAddNewTaskToReadyList `(v ~T0 @X0 1 sf1`*S936 ]
"1210
[; ;Source/FreeRTOS/tasks.c: 1210: {
{
[e :U _prvAddNewTaskToReadyList ]
"1209
[; ;Source/FreeRTOS/tasks.c: 1209: static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
[v _pxNewTCB `*S936 ~T0 @X0 1 r1 ]
"1210
[; ;Source/FreeRTOS/tasks.c: 1210: {
[f ]
"1211
[; ;Source/FreeRTOS/tasks.c: 1211:     taskInfo( pxNewTCB );
[e ( _taskInfo (1 _pxNewTCB ]
"1215
[; ;Source/FreeRTOS/tasks.c: 1215:     POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1216
[; ;Source/FreeRTOS/tasks.c: 1216:     {
{
"1217
[; ;Source/FreeRTOS/tasks.c: 1217:         uxCurrentNumberOfTasks++;
[e ++ _uxCurrentNumberOfTasks -> -> 1 `i `Vuc ]
"1218
[; ;Source/FreeRTOS/tasks.c: 1218:          Xprintf("uxCurrentNumberOfTasks=%d\r\n",uxCurrentNumberOfTasks);
[e ( _Xprintf , (. :s 66C -> _uxCurrentNumberOfTasks `i ]
"1220
[; ;Source/FreeRTOS/tasks.c: 1220:         if( pxCurrentTCB == ((void*)0) )
[e $ ! == _pxCurrentTCB -> -> -> 0 `i `*v `*S936 1076  ]
"1221
[; ;Source/FreeRTOS/tasks.c: 1221:         {
{
"1222
[; ;Source/FreeRTOS/tasks.c: 1222:             Xprintf("prvAddNewTaskToReadyList　02\r\n");
[e ( _Xprintf :s 67C ]
"1224
[; ;Source/FreeRTOS/tasks.c: 1224:             pxCurrentTCB = pxNewTCB;
[e = _pxCurrentTCB _pxNewTCB ]
"1226
[; ;Source/FreeRTOS/tasks.c: 1226:             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
[e $ ! == -> _uxCurrentNumberOfTasks `i -> -> -> 1 `i `uc `i 1077  ]
"1227
[; ;Source/FreeRTOS/tasks.c: 1227:             {
{
"1230
[; ;Source/FreeRTOS/tasks.c: 1230:                 prvInitialiseTaskLists();
[e ( _prvInitialiseTaskLists ..  ]
"1231
[; ;Source/FreeRTOS/tasks.c: 1231:             }
}
[e $U 1078  ]
"1232
[; ;Source/FreeRTOS/tasks.c: 1232:             else
[e :U 1077 ]
"1233
[; ;Source/FreeRTOS/tasks.c: 1233:             {
{
"1235
[; ;Source/FreeRTOS/tasks.c: 1235:             }
}
[e :U 1078 ]
"1236
[; ;Source/FreeRTOS/tasks.c: 1236:         }
}
[e $U 1079  ]
"1237
[; ;Source/FreeRTOS/tasks.c: 1237:         else
[e :U 1076 ]
"1238
[; ;Source/FreeRTOS/tasks.c: 1238:         {
{
"1239
[; ;Source/FreeRTOS/tasks.c: 1239:             Xprintf("prvAddNewTaskToReadyList　03\r\n");
[e ( _Xprintf :s 68C ]
"1242
[; ;Source/FreeRTOS/tasks.c: 1242:             if( xSchedulerRunning == ( ( BaseType_t ) 0 ) )
[e $ ! == -> _xSchedulerRunning `i -> -> -> 0 `i `c `i 1080  ]
"1243
[; ;Source/FreeRTOS/tasks.c: 1243:             {
{
"1244
[; ;Source/FreeRTOS/tasks.c: 1244:                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
[e $ ! <= -> . *U _pxCurrentTCB 3 `i -> . *U _pxNewTCB 3 `i 1081  ]
"1245
[; ;Source/FreeRTOS/tasks.c: 1245:                 {
{
"1246
[; ;Source/FreeRTOS/tasks.c: 1246:                     pxCurrentTCB = pxNewTCB;
[e = _pxCurrentTCB _pxNewTCB ]
"1247
[; ;Source/FreeRTOS/tasks.c: 1247:                 }
}
[e $U 1082  ]
"1248
[; ;Source/FreeRTOS/tasks.c: 1248:                 else
[e :U 1081 ]
"1249
[; ;Source/FreeRTOS/tasks.c: 1249:                 {
{
"1251
[; ;Source/FreeRTOS/tasks.c: 1251:                 }
}
[e :U 1082 ]
"1252
[; ;Source/FreeRTOS/tasks.c: 1252:             }
}
[e $U 1083  ]
"1253
[; ;Source/FreeRTOS/tasks.c: 1253:             else
[e :U 1080 ]
"1254
[; ;Source/FreeRTOS/tasks.c: 1254:             {
{
"1256
[; ;Source/FreeRTOS/tasks.c: 1256:             }
}
[e :U 1083 ]
"1257
[; ;Source/FreeRTOS/tasks.c: 1257:         }
}
[e :U 1079 ]
"1259
[; ;Source/FreeRTOS/tasks.c: 1259:         uxTaskNumber++;
[e ++ _uxTaskNumber -> -> 1 `i `uc ]
"1262
[; ;Source/FreeRTOS/tasks.c: 1262:         {
{
"1264
[; ;Source/FreeRTOS/tasks.c: 1264:             pxNewTCB->uxTCBNumber = uxTaskNumber;
[e = . *U _pxNewTCB 7 _uxTaskNumber ]
"1265
[; ;Source/FreeRTOS/tasks.c: 1265:         }
}
"1269
[; ;Source/FreeRTOS/tasks.c: 1269:         ; { if( ( ( pxNewTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxNewTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxNewTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxNewTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxNewTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxNewTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxNewTCB )->xStateListItem ) ); ( &( ( pxNewTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxNewTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxNewTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxNewTCB 3 `i -> _uxTopReadyPriority `i 1084  ]
{
[e = _uxTopReadyPriority . *U _pxNewTCB 3 ]
}
[e :U 1084 ]
}
{
[v F7580 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxNewTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxNewTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxNewTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxNewTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxNewTCB 1 ]
[e = . *U &U . *U _pxNewTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxNewTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxNewTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"1271
[; ;Source/FreeRTOS/tasks.c: 1271:         ( void ) ( pxNewTCB );
[e _pxNewTCB ]
"1272
[; ;Source/FreeRTOS/tasks.c: 1272:     }
}
"1273
[; ;Source/FreeRTOS/tasks.c: 1273:     __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1085  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1085 ]
"1275
[; ;Source/FreeRTOS/tasks.c: 1275:     if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xSchedulerRunning `i -> -> -> 0 `i `c `i 1086  ]
"1276
[; ;Source/FreeRTOS/tasks.c: 1276:     {
{
"1278
[; ;Source/FreeRTOS/tasks.c: 1278:         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
[e $ ! < -> . *U _pxCurrentTCB 3 `i -> . *U _pxNewTCB 3 `i 1087  ]
"1279
[; ;Source/FreeRTOS/tasks.c: 1279:         {
{
"1280
[; ;Source/FreeRTOS/tasks.c: 1280:             vPortYield();
[e ( _vPortYield ..  ]
"1281
[; ;Source/FreeRTOS/tasks.c: 1281:         }
}
[e $U 1088  ]
"1282
[; ;Source/FreeRTOS/tasks.c: 1282:         else
[e :U 1087 ]
"1283
[; ;Source/FreeRTOS/tasks.c: 1283:         {
{
"1285
[; ;Source/FreeRTOS/tasks.c: 1285:         }
}
[e :U 1088 ]
"1286
[; ;Source/FreeRTOS/tasks.c: 1286:     }
}
[e $U 1089  ]
"1287
[; ;Source/FreeRTOS/tasks.c: 1287:     else
[e :U 1086 ]
"1288
[; ;Source/FreeRTOS/tasks.c: 1288:     {
{
"1290
[; ;Source/FreeRTOS/tasks.c: 1290:     }
}
[e :U 1089 ]
"1292
[; ;Source/FreeRTOS/tasks.c: 1292:    taskInfo( pxCurrentTCB );
[e ( _taskInfo (1 _pxCurrentTCB ]
"1294
[; ;Source/FreeRTOS/tasks.c: 1294:    vTaskList(0);
[e ( _vTaskList (1 -> -> 0 `i `*uc ]
"1295
[; ;Source/FreeRTOS/tasks.c: 1295:  }
[e :UE 1075 ]
}
"1300
[; ;Source/FreeRTOS/tasks.c: 1300:     void vTaskDelete( TaskHandle_t xTaskToDelete )
[v _vTaskDelete `(v ~T0 @X0 1 ef1`*S936 ]
"1301
[; ;Source/FreeRTOS/tasks.c: 1301:     {
{
[e :U _vTaskDelete ]
"1300
[; ;Source/FreeRTOS/tasks.c: 1300:     void vTaskDelete( TaskHandle_t xTaskToDelete )
[v _xTaskToDelete `*S936 ~T0 @X0 1 r1 ]
"1301
[; ;Source/FreeRTOS/tasks.c: 1301:     {
[f ]
"1302
[; ;Source/FreeRTOS/tasks.c: 1302:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"1304
[; ;Source/FreeRTOS/tasks.c: 1304:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1305
[; ;Source/FreeRTOS/tasks.c: 1305:         {
{
"1308
[; ;Source/FreeRTOS/tasks.c: 1308:             pxTCB = ( ( ( xTaskToDelete ) == ((void*)0) ) ? pxCurrentTCB : ( xTaskToDelete ) );
[e = _pxTCB ? == _xTaskToDelete -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTaskToDelete ]
"1311
[; ;Source/FreeRTOS/tasks.c: 1311:             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
[e $ ! == -> ( _uxListRemove (1 &U . *U _pxTCB 1 `i -> -> -> 0 `i `uc `i 1091  ]
"1312
[; ;Source/FreeRTOS/tasks.c: 1312:             {
{
"1314
[; ;Source/FreeRTOS/tasks.c: 1314:             }
}
[e $U 1092  ]
"1315
[; ;Source/FreeRTOS/tasks.c: 1315:             else
[e :U 1091 ]
"1316
[; ;Source/FreeRTOS/tasks.c: 1316:             {
{
"1318
[; ;Source/FreeRTOS/tasks.c: 1318:             }
}
[e :U 1092 ]
"1321
[; ;Source/FreeRTOS/tasks.c: 1321:             if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != ((void*)0) )
[e $ ! != . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 1093  ]
"1322
[; ;Source/FreeRTOS/tasks.c: 1322:             {
{
"1323
[; ;Source/FreeRTOS/tasks.c: 1323:                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
[e ( _uxListRemove (1 &U . *U _pxTCB 2 ]
"1324
[; ;Source/FreeRTOS/tasks.c: 1324:             }
}
[e $U 1094  ]
"1325
[; ;Source/FreeRTOS/tasks.c: 1325:             else
[e :U 1093 ]
"1326
[; ;Source/FreeRTOS/tasks.c: 1326:             {
{
"1328
[; ;Source/FreeRTOS/tasks.c: 1328:             }
}
[e :U 1094 ]
"1334
[; ;Source/FreeRTOS/tasks.c: 1334:             uxTaskNumber++;
[e ++ _uxTaskNumber -> -> 1 `i `uc ]
"1336
[; ;Source/FreeRTOS/tasks.c: 1336:             if( pxTCB == pxCurrentTCB )
[e $ ! == _pxTCB _pxCurrentTCB 1095  ]
"1337
[; ;Source/FreeRTOS/tasks.c: 1337:             {
{
"1343
[; ;Source/FreeRTOS/tasks.c: 1343:                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
[e ( _vListInsertEnd (2 , &U _xTasksWaitingTermination &U . *U _pxTCB 1 ]
"1348
[; ;Source/FreeRTOS/tasks.c: 1348:                 ++uxDeletedTasksWaitingCleanUp;
[e =+ _uxDeletedTasksWaitingCleanUp -> -> 1 `i `Vuc ]
"1360
[; ;Source/FreeRTOS/tasks.c: 1360:             }
}
[e $U 1096  ]
"1361
[; ;Source/FreeRTOS/tasks.c: 1361:             else
[e :U 1095 ]
"1362
[; ;Source/FreeRTOS/tasks.c: 1362:             {
{
"1363
[; ;Source/FreeRTOS/tasks.c: 1363:                 --uxCurrentNumberOfTasks;
[e =- _uxCurrentNumberOfTasks -> -> 1 `i `Vuc ]
"1368
[; ;Source/FreeRTOS/tasks.c: 1368:                 prvResetNextTaskUnblockTime();
[e ( _prvResetNextTaskUnblockTime ..  ]
"1369
[; ;Source/FreeRTOS/tasks.c: 1369:             }
}
[e :U 1096 ]
"1370
[; ;Source/FreeRTOS/tasks.c: 1370:         }
}
"1371
[; ;Source/FreeRTOS/tasks.c: 1371:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1097  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1097 ]
"1376
[; ;Source/FreeRTOS/tasks.c: 1376:         if( pxTCB != pxCurrentTCB )
[e $ ! != _pxTCB _pxCurrentTCB 1098  ]
"1377
[; ;Source/FreeRTOS/tasks.c: 1377:         {
{
"1378
[; ;Source/FreeRTOS/tasks.c: 1378:             prvDeleteTCB( pxTCB );
[e ( _prvDeleteTCB (1 _pxTCB ]
"1379
[; ;Source/FreeRTOS/tasks.c: 1379:         }
}
[e :U 1098 ]
"1383
[; ;Source/FreeRTOS/tasks.c: 1383:         if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xSchedulerRunning `i -> -> -> 0 `i `c `i 1099  ]
"1384
[; ;Source/FreeRTOS/tasks.c: 1384:         {
{
"1385
[; ;Source/FreeRTOS/tasks.c: 1385:             if( pxTCB == pxCurrentTCB )
[e $ ! == _pxTCB _pxCurrentTCB 1100  ]
"1386
[; ;Source/FreeRTOS/tasks.c: 1386:             {
{
"1387
[; ;Source/FreeRTOS/tasks.c: 1387:                 if( ( uxSchedulerSuspended == 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1387 );
[e $ ! == -> == -> _uxSchedulerSuspended `i -> 0 `i `i -> 0 `i 1101  ]
[e ( _Xprintf , (. :s 69C -> 1387 `i ]
[e :U 1101 ]
"1388
[; ;Source/FreeRTOS/tasks.c: 1388:                 vPortYield();
[e ( _vPortYield ..  ]
"1389
[; ;Source/FreeRTOS/tasks.c: 1389:             }
}
[e $U 1102  ]
"1390
[; ;Source/FreeRTOS/tasks.c: 1390:             else
[e :U 1100 ]
"1391
[; ;Source/FreeRTOS/tasks.c: 1391:             {
{
"1393
[; ;Source/FreeRTOS/tasks.c: 1393:             }
}
[e :U 1102 ]
"1394
[; ;Source/FreeRTOS/tasks.c: 1394:         }
}
[e :U 1099 ]
"1395
[; ;Source/FreeRTOS/tasks.c: 1395:     }
[e :UE 1090 ]
}
"1402
[; ;Source/FreeRTOS/tasks.c: 1402:     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
[v _xTaskDelayUntil `(c ~T0 @X0 1 ef2`C*us`Cus ]
"1404
[; ;Source/FreeRTOS/tasks.c: 1404:     {
{
[e :U _xTaskDelayUntil ]
[v F7587 `*us ~T0 @X0 1 t ]
"1402
[; ;Source/FreeRTOS/tasks.c: 1402:     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
[v _pxPreviousWakeTime `C*us ~T0 @X0 1 r1 ]
"1403
[; ;Source/FreeRTOS/tasks.c: 1403:                                 const TickType_t xTimeIncrement )
[v _xTimeIncrement `Cus ~T0 @X0 1 r2 ]
"1404
[; ;Source/FreeRTOS/tasks.c: 1404:     {
[f ]
"1405
[; ;Source/FreeRTOS/tasks.c: 1405:         TickType_t xTimeToWake;
[v _xTimeToWake `us ~T0 @X0 1 a ]
"1406
[; ;Source/FreeRTOS/tasks.c: 1406:         BaseType_t xAlreadyYielded, xShouldDelay = ( ( BaseType_t ) 0 );
[v _xAlreadyYielded `c ~T0 @X0 1 a ]
[v _xShouldDelay `c ~T0 @X0 1 a ]
[e = _xShouldDelay -> -> 0 `i `c ]
"1408
[; ;Source/FreeRTOS/tasks.c: 1408:         if( ( pxPreviousWakeTime ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1408 );
[e $ ! == _pxPreviousWakeTime -> -> 0 `i `*us 1104  ]
[e ( _Xprintf , (. :s 70C -> 1408 `i ]
[e :U 1104 ]
"1409
[; ;Source/FreeRTOS/tasks.c: 1409:         if( ( ( xTimeIncrement > 0U ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1409 );
[e $ ! == -> > -> _xTimeIncrement `ui -> 0 `ui `i -> 0 `i 1105  ]
[e ( _Xprintf , (. :s 71C -> 1409 `i ]
[e :U 1105 ]
"1410
[; ;Source/FreeRTOS/tasks.c: 1410:         if( ( uxSchedulerSuspended == 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1410 );
[e $ ! == -> == -> _uxSchedulerSuspended `i -> 0 `i `i -> 0 `i 1106  ]
[e ( _Xprintf , (. :s 72C -> 1410 `i ]
[e :U 1106 ]
"1412
[; ;Source/FreeRTOS/tasks.c: 1412:         vTaskSuspendAll();
[e ( _vTaskSuspendAll ..  ]
"1413
[; ;Source/FreeRTOS/tasks.c: 1413:         {
{
"1416
[; ;Source/FreeRTOS/tasks.c: 1416:             const TickType_t xConstTickCount = xTickCount;
[v _xConstTickCount `Cus ~T0 @X0 1 a ]
[e = _xConstTickCount _xTickCount ]
"1419
[; ;Source/FreeRTOS/tasks.c: 1419:             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
[e = _xTimeToWake -> + -> *U _pxPreviousWakeTime `ui -> _xTimeIncrement `ui `us ]
"1421
[; ;Source/FreeRTOS/tasks.c: 1421:             if( xConstTickCount < *pxPreviousWakeTime )
[e $ ! < -> _xConstTickCount `ui -> *U _pxPreviousWakeTime `ui 1107  ]
"1422
[; ;Source/FreeRTOS/tasks.c: 1422:             {
{
"1428
[; ;Source/FreeRTOS/tasks.c: 1428:                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
[e $ ! && < -> _xTimeToWake `ui -> *U _pxPreviousWakeTime `ui > -> _xTimeToWake `ui -> _xConstTickCount `ui 1108  ]
"1429
[; ;Source/FreeRTOS/tasks.c: 1429:                 {
{
"1430
[; ;Source/FreeRTOS/tasks.c: 1430:                     xShouldDelay = ( ( BaseType_t ) 1 );
[e = _xShouldDelay -> -> 1 `i `c ]
"1431
[; ;Source/FreeRTOS/tasks.c: 1431:                 }
}
[e $U 1109  ]
"1432
[; ;Source/FreeRTOS/tasks.c: 1432:                 else
[e :U 1108 ]
"1433
[; ;Source/FreeRTOS/tasks.c: 1433:                 {
{
"1435
[; ;Source/FreeRTOS/tasks.c: 1435:                 }
}
[e :U 1109 ]
"1436
[; ;Source/FreeRTOS/tasks.c: 1436:             }
}
[e $U 1110  ]
"1437
[; ;Source/FreeRTOS/tasks.c: 1437:             else
[e :U 1107 ]
"1438
[; ;Source/FreeRTOS/tasks.c: 1438:             {
{
"1442
[; ;Source/FreeRTOS/tasks.c: 1442:                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
[e $ ! || < -> _xTimeToWake `ui -> *U _pxPreviousWakeTime `ui > -> _xTimeToWake `ui -> _xConstTickCount `ui 1111  ]
"1443
[; ;Source/FreeRTOS/tasks.c: 1443:                 {
{
"1444
[; ;Source/FreeRTOS/tasks.c: 1444:                     xShouldDelay = ( ( BaseType_t ) 1 );
[e = _xShouldDelay -> -> 1 `i `c ]
"1445
[; ;Source/FreeRTOS/tasks.c: 1445:                 }
}
[e $U 1112  ]
"1446
[; ;Source/FreeRTOS/tasks.c: 1446:                 else
[e :U 1111 ]
"1447
[; ;Source/FreeRTOS/tasks.c: 1447:                 {
{
"1449
[; ;Source/FreeRTOS/tasks.c: 1449:                 }
}
[e :U 1112 ]
"1450
[; ;Source/FreeRTOS/tasks.c: 1450:             }
}
[e :U 1110 ]
"1453
[; ;Source/FreeRTOS/tasks.c: 1453:             *pxPreviousWakeTime = xTimeToWake;
[e = *U _pxPreviousWakeTime _xTimeToWake ]
"1455
[; ;Source/FreeRTOS/tasks.c: 1455:             if( xShouldDelay != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xShouldDelay `i -> -> -> 0 `i `c `i 1113  ]
"1456
[; ;Source/FreeRTOS/tasks.c: 1456:             {
{
"1461
[; ;Source/FreeRTOS/tasks.c: 1461:                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, ( ( BaseType_t ) 0 ) );
[e ( _prvAddCurrentTaskToDelayedList (2 , -> - -> _xTimeToWake `ui -> _xConstTickCount `ui `us -> -> 0 `i `c ]
"1462
[; ;Source/FreeRTOS/tasks.c: 1462:             }
}
[e $U 1114  ]
"1463
[; ;Source/FreeRTOS/tasks.c: 1463:             else
[e :U 1113 ]
"1464
[; ;Source/FreeRTOS/tasks.c: 1464:             {
{
"1466
[; ;Source/FreeRTOS/tasks.c: 1466:             }
}
[e :U 1114 ]
"1467
[; ;Source/FreeRTOS/tasks.c: 1467:         }
}
"1468
[; ;Source/FreeRTOS/tasks.c: 1468:         xAlreadyYielded = xTaskResumeAll();
[e = _xAlreadyYielded ( _xTaskResumeAll ..  ]
"1472
[; ;Source/FreeRTOS/tasks.c: 1472:         if( xAlreadyYielded == ( ( BaseType_t ) 0 ) )
[e $ ! == -> _xAlreadyYielded `i -> -> -> 0 `i `c `i 1115  ]
"1473
[; ;Source/FreeRTOS/tasks.c: 1473:         {
{
"1474
[; ;Source/FreeRTOS/tasks.c: 1474:             vPortYield();
[e ( _vPortYield ..  ]
"1475
[; ;Source/FreeRTOS/tasks.c: 1475:         }
}
[e $U 1116  ]
"1476
[; ;Source/FreeRTOS/tasks.c: 1476:         else
[e :U 1115 ]
"1477
[; ;Source/FreeRTOS/tasks.c: 1477:         {
{
"1479
[; ;Source/FreeRTOS/tasks.c: 1479:         }
}
[e :U 1116 ]
"1481
[; ;Source/FreeRTOS/tasks.c: 1481:         return xShouldDelay;
[e ) _xShouldDelay ]
[e $UE 1103  ]
"1482
[; ;Source/FreeRTOS/tasks.c: 1482:     }
[e :UE 1103 ]
}
"1489
[; ;Source/FreeRTOS/tasks.c: 1489:     void vTaskDelay( const TickType_t xTicksToDelay )
[v _vTaskDelay `(v ~T0 @X0 1 ef1`Cus ]
"1490
[; ;Source/FreeRTOS/tasks.c: 1490:     {
{
[e :U _vTaskDelay ]
"1489
[; ;Source/FreeRTOS/tasks.c: 1489:     void vTaskDelay( const TickType_t xTicksToDelay )
[v _xTicksToDelay `Cus ~T0 @X0 1 r1 ]
"1490
[; ;Source/FreeRTOS/tasks.c: 1490:     {
[f ]
"1491
[; ;Source/FreeRTOS/tasks.c: 1491:         BaseType_t xAlreadyYielded = ( ( BaseType_t ) 0 );
[v _xAlreadyYielded `c ~T0 @X0 1 a ]
[e = _xAlreadyYielded -> -> 0 `i `c ]
"1494
[; ;Source/FreeRTOS/tasks.c: 1494:         if( xTicksToDelay > ( TickType_t ) 0U )
[e $ ! > -> _xTicksToDelay `ui -> -> -> 0 `ui `us `ui 1118  ]
"1495
[; ;Source/FreeRTOS/tasks.c: 1495:         {
{
"1496
[; ;Source/FreeRTOS/tasks.c: 1496:             if( ( uxSchedulerSuspended == 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1496 );
[e $ ! == -> == -> _uxSchedulerSuspended `i -> 0 `i `i -> 0 `i 1119  ]
[e ( _Xprintf , (. :s 73C -> 1496 `i ]
[e :U 1119 ]
"1497
[; ;Source/FreeRTOS/tasks.c: 1497:             vTaskSuspendAll();
[e ( _vTaskSuspendAll ..  ]
"1498
[; ;Source/FreeRTOS/tasks.c: 1498:             {
{
"1508
[; ;Source/FreeRTOS/tasks.c: 1508:                 prvAddCurrentTaskToDelayedList( xTicksToDelay, ( ( BaseType_t ) 0 ) );
[e ( _prvAddCurrentTaskToDelayedList (2 , _xTicksToDelay -> -> 0 `i `c ]
"1509
[; ;Source/FreeRTOS/tasks.c: 1509:             }
}
"1510
[; ;Source/FreeRTOS/tasks.c: 1510:             xAlreadyYielded = xTaskResumeAll();
[e = _xAlreadyYielded ( _xTaskResumeAll ..  ]
"1511
[; ;Source/FreeRTOS/tasks.c: 1511:         }
}
[e $U 1120  ]
"1512
[; ;Source/FreeRTOS/tasks.c: 1512:         else
[e :U 1118 ]
"1513
[; ;Source/FreeRTOS/tasks.c: 1513:         {
{
"1515
[; ;Source/FreeRTOS/tasks.c: 1515:         }
}
[e :U 1120 ]
"1519
[; ;Source/FreeRTOS/tasks.c: 1519:         if( xAlreadyYielded == ( ( BaseType_t ) 0 ) )
[e $ ! == -> _xAlreadyYielded `i -> -> -> 0 `i `c `i 1121  ]
"1520
[; ;Source/FreeRTOS/tasks.c: 1520:         {
{
"1521
[; ;Source/FreeRTOS/tasks.c: 1521:             vPortYield();
[e ( _vPortYield ..  ]
"1522
[; ;Source/FreeRTOS/tasks.c: 1522:         }
}
[e $U 1122  ]
"1523
[; ;Source/FreeRTOS/tasks.c: 1523:         else
[e :U 1121 ]
"1524
[; ;Source/FreeRTOS/tasks.c: 1524:         {
{
"1526
[; ;Source/FreeRTOS/tasks.c: 1526:         }
}
[e :U 1122 ]
"1527
[; ;Source/FreeRTOS/tasks.c: 1527:     }
[e :UE 1117 ]
}
"1534
[; ;Source/FreeRTOS/tasks.c: 1534:     eTaskState eTaskGetState( TaskHandle_t xTask )
[v _eTaskGetState `(E7103 ~T0 @X0 1 ef1`*S936 ]
"1535
[; ;Source/FreeRTOS/tasks.c: 1535:     {
{
[e :U _eTaskGetState ]
"1534
[; ;Source/FreeRTOS/tasks.c: 1534:     eTaskState eTaskGetState( TaskHandle_t xTask )
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"1535
[; ;Source/FreeRTOS/tasks.c: 1535:     {
[f ]
"1536
[; ;Source/FreeRTOS/tasks.c: 1536:         eTaskState eReturn;
[v _eReturn `E7103 ~T0 @X0 1 a ]
"1537
[; ;Source/FreeRTOS/tasks.c: 1537:         List_t const * pxStateList;
[v _pxStateList `*CS931 ~T0 @X0 1 a ]
"1538
[; ;Source/FreeRTOS/tasks.c: 1538:         List_t const * pxDelayedList;
[v _pxDelayedList `*CS931 ~T0 @X0 1 a ]
"1539
[; ;Source/FreeRTOS/tasks.c: 1539:         List_t const * pxOverflowedDelayedList;
[v _pxOverflowedDelayedList `*CS931 ~T0 @X0 1 a ]
[v F7603 `*CS936 ~T0 @X0 1 t ]
"1540
[; ;Source/FreeRTOS/tasks.c: 1540:         const TCB_t * const pxTCB = xTask;
[v _pxTCB `C*CS936 ~T0 @X0 1 a ]
[e = _pxTCB -> _xTask `*CS936 ]
"1542
[; ;Source/FreeRTOS/tasks.c: 1542:         if( ( pxTCB ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1542 );
[e $ ! == _pxTCB -> -> 0 `i `*CS936 1124  ]
[e ( _Xprintf , (. :s 74C -> 1542 `i ]
[e :U 1124 ]
"1544
[; ;Source/FreeRTOS/tasks.c: 1544:         if( pxTCB == pxCurrentTCB )
[e $ ! == _pxTCB -> _pxCurrentTCB `*CS936 1125  ]
"1545
[; ;Source/FreeRTOS/tasks.c: 1545:         {
{
"1547
[; ;Source/FreeRTOS/tasks.c: 1547:             eReturn = eRunning;
[e = _eReturn . `E7103 0 ]
"1548
[; ;Source/FreeRTOS/tasks.c: 1548:         }
}
[e $U 1126  ]
"1549
[; ;Source/FreeRTOS/tasks.c: 1549:         else
[e :U 1125 ]
"1550
[; ;Source/FreeRTOS/tasks.c: 1550:         {
{
"1551
[; ;Source/FreeRTOS/tasks.c: 1551:             POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1552
[; ;Source/FreeRTOS/tasks.c: 1552:             {
{
"1553
[; ;Source/FreeRTOS/tasks.c: 1553:                 pxStateList = ( ( &( pxTCB->xStateListItem ) )->pvContainer );
[e = _pxStateList -> . *U &U . *U _pxTCB 1 4 `*CS931 ]
"1554
[; ;Source/FreeRTOS/tasks.c: 1554:                 pxDelayedList = pxDelayedTaskList;
[e = _pxDelayedList -> _pxDelayedTaskList `*CS931 ]
"1555
[; ;Source/FreeRTOS/tasks.c: 1555:                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
[e = _pxOverflowedDelayedList -> _pxOverflowDelayedTaskList `*CS931 ]
"1556
[; ;Source/FreeRTOS/tasks.c: 1556:             }
}
"1557
[; ;Source/FreeRTOS/tasks.c: 1557:             __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1127  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1127 ]
"1559
[; ;Source/FreeRTOS/tasks.c: 1559:             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
[e $ ! || == _pxStateList _pxDelayedList == _pxStateList _pxOverflowedDelayedList 1128  ]
"1560
[; ;Source/FreeRTOS/tasks.c: 1560:             {
{
"1563
[; ;Source/FreeRTOS/tasks.c: 1563:                 eReturn = eBlocked;
[e = _eReturn . `E7103 2 ]
"1564
[; ;Source/FreeRTOS/tasks.c: 1564:             }
}
[e $U 1129  ]
"1567
[; ;Source/FreeRTOS/tasks.c: 1567:                 else if( pxStateList == &xSuspendedTaskList )
[e :U 1128 ]
[e $ ! == _pxStateList -> &U _xSuspendedTaskList `*CS931 1130  ]
"1568
[; ;Source/FreeRTOS/tasks.c: 1568:                 {
{
"1572
[; ;Source/FreeRTOS/tasks.c: 1572:                     if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == ((void*)0) )
[e $ ! == . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 1131  ]
"1573
[; ;Source/FreeRTOS/tasks.c: 1573:                     {
{
"1575
[; ;Source/FreeRTOS/tasks.c: 1575:                         {
{
"1576
[; ;Source/FreeRTOS/tasks.c: 1576:                             BaseType_t x;
[v _x `c ~T0 @X0 1 a ]
"1583
[; ;Source/FreeRTOS/tasks.c: 1583:                             eReturn = eSuspended;
[e = _eReturn . `E7103 3 ]
"1585
[; ;Source/FreeRTOS/tasks.c: 1585:                             for( x = 0; x < 1; x++ )
{
[e = _x -> -> 0 `i `c ]
[e $ < -> _x `i -> 1 `i 1132  ]
[e $U 1133  ]
[e :U 1132 ]
"1586
[; ;Source/FreeRTOS/tasks.c: 1586:                             {
{
"1587
[; ;Source/FreeRTOS/tasks.c: 1587:                                 if( pxTCB->ucNotifyState[ x ] == ( ( uint8_t ) 1 ) )
[e $ ! == -> *U + &U . *U _pxTCB 10 * -> -> _x `uc `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux `i -> -> -> 1 `i `uc `i 1135  ]
"1588
[; ;Source/FreeRTOS/tasks.c: 1588:                                 {
{
"1589
[; ;Source/FreeRTOS/tasks.c: 1589:                                     eReturn = eBlocked;
[e = _eReturn . `E7103 2 ]
"1590
[; ;Source/FreeRTOS/tasks.c: 1590:                                     break;
[e $U 1133  ]
"1591
[; ;Source/FreeRTOS/tasks.c: 1591:                                 }
}
[e :U 1135 ]
"1592
[; ;Source/FreeRTOS/tasks.c: 1592:                             }
}
[e ++ _x -> -> 1 `i `c ]
[e $ < -> _x `i -> 1 `i 1132  ]
[e :U 1133 ]
}
"1593
[; ;Source/FreeRTOS/tasks.c: 1593:                         }
}
"1599
[; ;Source/FreeRTOS/tasks.c: 1599:                     }
}
[e $U 1136  ]
"1600
[; ;Source/FreeRTOS/tasks.c: 1600:                     else
[e :U 1131 ]
"1601
[; ;Source/FreeRTOS/tasks.c: 1601:                     {
{
"1602
[; ;Source/FreeRTOS/tasks.c: 1602:                         eReturn = eBlocked;
[e = _eReturn . `E7103 2 ]
"1603
[; ;Source/FreeRTOS/tasks.c: 1603:                     }
}
[e :U 1136 ]
"1604
[; ;Source/FreeRTOS/tasks.c: 1604:                 }
}
[e $U 1137  ]
"1608
[; ;Source/FreeRTOS/tasks.c: 1608:                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == ((void*)0) ) )
[e :U 1130 ]
[e $ ! || == _pxStateList -> &U _xTasksWaitingTermination `*CS931 == _pxStateList -> -> -> 0 `i `*v `*CS931 1138  ]
"1609
[; ;Source/FreeRTOS/tasks.c: 1609:                 {
{
"1613
[; ;Source/FreeRTOS/tasks.c: 1613:                     eReturn = eDeleted;
[e = _eReturn . `E7103 4 ]
"1614
[; ;Source/FreeRTOS/tasks.c: 1614:                 }
}
[e $U 1139  ]
"1617
[; ;Source/FreeRTOS/tasks.c: 1617:             else
[e :U 1138 ]
"1618
[; ;Source/FreeRTOS/tasks.c: 1618:             {
{
"1621
[; ;Source/FreeRTOS/tasks.c: 1621:                 eReturn = eReady;
[e = _eReturn . `E7103 1 ]
"1622
[; ;Source/FreeRTOS/tasks.c: 1622:             }
}
[e :U 1139 ]
[e :U 1137 ]
[e :U 1129 ]
"1623
[; ;Source/FreeRTOS/tasks.c: 1623:         }
}
[e :U 1126 ]
"1625
[; ;Source/FreeRTOS/tasks.c: 1625:         return eReturn;
[e ) _eReturn ]
[e $UE 1123  ]
"1626
[; ;Source/FreeRTOS/tasks.c: 1626:     }
[e :UE 1123 ]
}
"1633
[; ;Source/FreeRTOS/tasks.c: 1633:     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
[v _uxTaskPriorityGet `(uc ~T0 @X0 1 ef1`C*S936 ]
"1634
[; ;Source/FreeRTOS/tasks.c: 1634:     {
{
[e :U _uxTaskPriorityGet ]
[v F7610 `*S936 ~T0 @X0 1 t ]
"1633
[; ;Source/FreeRTOS/tasks.c: 1633:     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
[v _xTask `C*S936 ~T0 @X0 1 r1 ]
"1634
[; ;Source/FreeRTOS/tasks.c: 1634:     {
[f ]
"1635
[; ;Source/FreeRTOS/tasks.c: 1635:         TCB_t const * pxTCB;
[v _pxTCB `*CS936 ~T0 @X0 1 a ]
"1636
[; ;Source/FreeRTOS/tasks.c: 1636:         UBaseType_t uxReturn;
[v _uxReturn `uc ~T0 @X0 1 a ]
"1638
[; ;Source/FreeRTOS/tasks.c: 1638:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1639
[; ;Source/FreeRTOS/tasks.c: 1639:         {
{
"1642
[; ;Source/FreeRTOS/tasks.c: 1642:             pxTCB = ( ( ( xTask ) == ((void*)0) ) ? pxCurrentTCB : ( xTask ) );
[e = _pxTCB -> ? == _xTask -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTask `*CS936 ]
"1643
[; ;Source/FreeRTOS/tasks.c: 1643:             uxReturn = pxTCB->uxPriority;
[e = _uxReturn . *U _pxTCB 3 ]
"1644
[; ;Source/FreeRTOS/tasks.c: 1644:         }
}
"1645
[; ;Source/FreeRTOS/tasks.c: 1645:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1141  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1141 ]
"1647
[; ;Source/FreeRTOS/tasks.c: 1647:         return uxReturn;
[e ) _uxReturn ]
[e $UE 1140  ]
"1648
[; ;Source/FreeRTOS/tasks.c: 1648:     }
[e :UE 1140 ]
}
"1655
[; ;Source/FreeRTOS/tasks.c: 1655:     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
[v _uxTaskPriorityGetFromISR `(uc ~T0 @X0 1 ef1`C*S936 ]
"1656
[; ;Source/FreeRTOS/tasks.c: 1656:     {
{
[e :U _uxTaskPriorityGetFromISR ]
[v F7616 `*S936 ~T0 @X0 1 t ]
"1655
[; ;Source/FreeRTOS/tasks.c: 1655:     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
[v _xTask `C*S936 ~T0 @X0 1 r1 ]
"1656
[; ;Source/FreeRTOS/tasks.c: 1656:     {
[f ]
"1657
[; ;Source/FreeRTOS/tasks.c: 1657:         TCB_t const * pxTCB;
[v _pxTCB `*CS936 ~T0 @X0 1 a ]
"1658
[; ;Source/FreeRTOS/tasks.c: 1658:         UBaseType_t uxReturn, uxSavedInterruptState;
[v _uxReturn `uc ~T0 @X0 1 a ]
[v _uxSavedInterruptState `uc ~T0 @X0 1 a ]
"1678
[; ;Source/FreeRTOS/tasks.c: 1678:         uxSavedInterruptState = 0;
[e = _uxSavedInterruptState -> -> 0 `i `uc ]
"1679
[; ;Source/FreeRTOS/tasks.c: 1679:         {
{
"1682
[; ;Source/FreeRTOS/tasks.c: 1682:             pxTCB = ( ( ( xTask ) == ((void*)0) ) ? pxCurrentTCB : ( xTask ) );
[e = _pxTCB -> ? == _xTask -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTask `*CS936 ]
"1683
[; ;Source/FreeRTOS/tasks.c: 1683:             uxReturn = pxTCB->uxPriority;
[e = _uxReturn . *U _pxTCB 3 ]
"1684
[; ;Source/FreeRTOS/tasks.c: 1684:         }
}
"1685
[; ;Source/FreeRTOS/tasks.c: 1685:         ( void ) ( uxSavedInterruptState );
[e _uxSavedInterruptState ]
"1687
[; ;Source/FreeRTOS/tasks.c: 1687:         return uxReturn;
[e ) _uxReturn ]
[e $UE 1142  ]
"1688
[; ;Source/FreeRTOS/tasks.c: 1688:     }
[e :UE 1142 ]
}
"1695
[; ;Source/FreeRTOS/tasks.c: 1695:     void vTaskPrioritySet( TaskHandle_t xTask,
[v _vTaskPrioritySet `(v ~T0 @X0 1 ef2`*S936`uc ]
"1697
[; ;Source/FreeRTOS/tasks.c: 1697:     {
{
[e :U _vTaskPrioritySet ]
"1695
[; ;Source/FreeRTOS/tasks.c: 1695:     void vTaskPrioritySet( TaskHandle_t xTask,
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"1696
[; ;Source/FreeRTOS/tasks.c: 1696:                            UBaseType_t uxNewPriority )
[v _uxNewPriority `uc ~T0 @X0 1 r2 ]
"1697
[; ;Source/FreeRTOS/tasks.c: 1697:     {
[f ]
"1698
[; ;Source/FreeRTOS/tasks.c: 1698:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"1699
[; ;Source/FreeRTOS/tasks.c: 1699:         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
[v _uxCurrentBasePriority `uc ~T0 @X0 1 a ]
[v _uxPriorityUsedOnEntry `uc ~T0 @X0 1 a ]
"1700
[; ;Source/FreeRTOS/tasks.c: 1700:         BaseType_t xYieldRequired = ( ( BaseType_t ) 0 );
[v _xYieldRequired `c ~T0 @X0 1 a ]
[e = _xYieldRequired -> -> 0 `i `c ]
"1702
[; ;Source/FreeRTOS/tasks.c: 1702:         if( ( uxNewPriority < ( 3 ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1702 );
[e $ ! == -> < -> _uxNewPriority `i -> 3 `i `i -> 0 `i 1144  ]
[e ( _Xprintf , (. :s 75C -> 1702 `i ]
[e :U 1144 ]
"1705
[; ;Source/FreeRTOS/tasks.c: 1705:         if( uxNewPriority >= ( UBaseType_t ) ( 3 ) )
[e $ ! >= -> _uxNewPriority `i -> -> -> 3 `i `uc `i 1145  ]
"1706
[; ;Source/FreeRTOS/tasks.c: 1706:         {
{
"1707
[; ;Source/FreeRTOS/tasks.c: 1707:             uxNewPriority = ( UBaseType_t ) ( 3 ) - ( UBaseType_t ) 1U;
[e = _uxNewPriority -> - -> -> -> 3 `i `uc `i -> -> -> 1 `ui `uc `i `uc ]
"1708
[; ;Source/FreeRTOS/tasks.c: 1708:         }
}
[e $U 1146  ]
"1709
[; ;Source/FreeRTOS/tasks.c: 1709:         else
[e :U 1145 ]
"1710
[; ;Source/FreeRTOS/tasks.c: 1710:         {
{
"1712
[; ;Source/FreeRTOS/tasks.c: 1712:         }
}
[e :U 1146 ]
"1714
[; ;Source/FreeRTOS/tasks.c: 1714:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1715
[; ;Source/FreeRTOS/tasks.c: 1715:         {
{
"1718
[; ;Source/FreeRTOS/tasks.c: 1718:             pxTCB = ( ( ( xTask ) == ((void*)0) ) ? pxCurrentTCB : ( xTask ) );
[e = _pxTCB ? == _xTask -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTask ]
"1727
[; ;Source/FreeRTOS/tasks.c: 1727:             {
{
"1728
[; ;Source/FreeRTOS/tasks.c: 1728:                 uxCurrentBasePriority = pxTCB->uxPriority;
[e = _uxCurrentBasePriority . *U _pxTCB 3 ]
"1729
[; ;Source/FreeRTOS/tasks.c: 1729:             }
}
"1732
[; ;Source/FreeRTOS/tasks.c: 1732:             if( uxCurrentBasePriority != uxNewPriority )
[e $ ! != -> _uxCurrentBasePriority `i -> _uxNewPriority `i 1147  ]
"1733
[; ;Source/FreeRTOS/tasks.c: 1733:             {
{
"1736
[; ;Source/FreeRTOS/tasks.c: 1736:                 if( uxNewPriority > uxCurrentBasePriority )
[e $ ! > -> _uxNewPriority `i -> _uxCurrentBasePriority `i 1148  ]
"1737
[; ;Source/FreeRTOS/tasks.c: 1737:                 {
{
"1738
[; ;Source/FreeRTOS/tasks.c: 1738:                     if( pxTCB != pxCurrentTCB )
[e $ ! != _pxTCB _pxCurrentTCB 1149  ]
"1739
[; ;Source/FreeRTOS/tasks.c: 1739:                     {
{
"1743
[; ;Source/FreeRTOS/tasks.c: 1743:                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
[e $ ! >= -> _uxNewPriority `i -> . *U _pxCurrentTCB 3 `i 1150  ]
"1744
[; ;Source/FreeRTOS/tasks.c: 1744:                         {
{
"1745
[; ;Source/FreeRTOS/tasks.c: 1745:                             xYieldRequired = ( ( BaseType_t ) 1 );
[e = _xYieldRequired -> -> 1 `i `c ]
"1746
[; ;Source/FreeRTOS/tasks.c: 1746:                         }
}
[e $U 1151  ]
"1747
[; ;Source/FreeRTOS/tasks.c: 1747:                         else
[e :U 1150 ]
"1748
[; ;Source/FreeRTOS/tasks.c: 1748:                         {
{
"1750
[; ;Source/FreeRTOS/tasks.c: 1750:                         }
}
[e :U 1151 ]
"1751
[; ;Source/FreeRTOS/tasks.c: 1751:                     }
}
[e $U 1152  ]
"1752
[; ;Source/FreeRTOS/tasks.c: 1752:                     else
[e :U 1149 ]
"1753
[; ;Source/FreeRTOS/tasks.c: 1753:                     {
{
"1757
[; ;Source/FreeRTOS/tasks.c: 1757:                     }
}
[e :U 1152 ]
"1758
[; ;Source/FreeRTOS/tasks.c: 1758:                 }
}
[e $U 1153  ]
"1759
[; ;Source/FreeRTOS/tasks.c: 1759:                 else if( pxTCB == pxCurrentTCB )
[e :U 1148 ]
[e $ ! == _pxTCB _pxCurrentTCB 1154  ]
"1760
[; ;Source/FreeRTOS/tasks.c: 1760:                 {
{
"1764
[; ;Source/FreeRTOS/tasks.c: 1764:                     xYieldRequired = ( ( BaseType_t ) 1 );
[e = _xYieldRequired -> -> 1 `i `c ]
"1765
[; ;Source/FreeRTOS/tasks.c: 1765:                 }
}
[e $U 1155  ]
"1766
[; ;Source/FreeRTOS/tasks.c: 1766:                 else
[e :U 1154 ]
"1767
[; ;Source/FreeRTOS/tasks.c: 1767:                 {
{
"1771
[; ;Source/FreeRTOS/tasks.c: 1771:                 }
}
[e :U 1155 ]
[e :U 1153 ]
"1776
[; ;Source/FreeRTOS/tasks.c: 1776:                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
[e = _uxPriorityUsedOnEntry . *U _pxTCB 3 ]
"1795
[; ;Source/FreeRTOS/tasks.c: 1795:                 {
{
"1796
[; ;Source/FreeRTOS/tasks.c: 1796:                     pxTCB->uxPriority = uxNewPriority;
[e = . *U _pxTCB 3 _uxNewPriority ]
"1797
[; ;Source/FreeRTOS/tasks.c: 1797:                 }
}
"1802
[; ;Source/FreeRTOS/tasks.c: 1802:                 if( ( ( ( &( pxTCB->xEventListItem ) )->xItemValue ) & 0x8000U ) == 0UL )
[e $ ! == -> & -> . *U &U . *U _pxTCB 2 0 `ui -> 32768 `ui `ul -> 0 `ul 1156  ]
"1803
[; ;Source/FreeRTOS/tasks.c: 1803:                 {
{
"1804
[; ;Source/FreeRTOS/tasks.c: 1804:                     ( ( &( pxTCB->xEventListItem ) )->xItemValue = ( ( ( TickType_t ) ( 3 ) - ( TickType_t ) uxNewPriority ) ) );
[e = . *U &U . *U _pxTCB 2 0 -> - -> -> -> 3 `i `us `ui -> -> _uxNewPriority `us `ui `us ]
"1805
[; ;Source/FreeRTOS/tasks.c: 1805:                 }
}
[e $U 1157  ]
"1806
[; ;Source/FreeRTOS/tasks.c: 1806:                 else
[e :U 1156 ]
"1807
[; ;Source/FreeRTOS/tasks.c: 1807:                 {
{
"1809
[; ;Source/FreeRTOS/tasks.c: 1809:                 }
}
[e :U 1157 ]
"1815
[; ;Source/FreeRTOS/tasks.c: 1815:                 if( ( ( ( &( pxTCB->xStateListItem ) )->pvContainer == ( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ) ) ) ? ( ( ( BaseType_t ) 1 ) ) : ( ( ( BaseType_t ) 0 ) ) ) != ( ( BaseType_t ) 0 ) )
[e $ ! != ? == . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> _uxPriorityUsedOnEntry `ux -> -> # *U &U _pxReadyTasksLists `ui `ux : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 1158  ]
"1816
[; ;Source/FreeRTOS/tasks.c: 1816:                 {
{
"1820
[; ;Source/FreeRTOS/tasks.c: 1820:                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
[e $ ! == -> ( _uxListRemove (1 &U . *U _pxTCB 1 `i -> -> -> 0 `i `uc `i 1159  ]
"1821
[; ;Source/FreeRTOS/tasks.c: 1821:                     {
{
"1826
[; ;Source/FreeRTOS/tasks.c: 1826:                     }
}
[e $U 1160  ]
"1827
[; ;Source/FreeRTOS/tasks.c: 1827:                     else
[e :U 1159 ]
"1828
[; ;Source/FreeRTOS/tasks.c: 1828:                     {
{
"1830
[; ;Source/FreeRTOS/tasks.c: 1830:                     }
}
[e :U 1160 ]
"1832
[; ;Source/FreeRTOS/tasks.c: 1832:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 1161  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 1161 ]
}
{
[v F7628 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"1833
[; ;Source/FreeRTOS/tasks.c: 1833:                 }
}
[e $U 1162  ]
"1834
[; ;Source/FreeRTOS/tasks.c: 1834:                 else
[e :U 1158 ]
"1835
[; ;Source/FreeRTOS/tasks.c: 1835:                 {
{
"1837
[; ;Source/FreeRTOS/tasks.c: 1837:                 }
}
[e :U 1162 ]
"1839
[; ;Source/FreeRTOS/tasks.c: 1839:                 if( xYieldRequired != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xYieldRequired `i -> -> -> 0 `i `c `i 1163  ]
"1840
[; ;Source/FreeRTOS/tasks.c: 1840:                 {
{
"1841
[; ;Source/FreeRTOS/tasks.c: 1841:                     vPortYield();
[e ( _vPortYield ..  ]
"1842
[; ;Source/FreeRTOS/tasks.c: 1842:                 }
}
[e $U 1164  ]
"1843
[; ;Source/FreeRTOS/tasks.c: 1843:                 else
[e :U 1163 ]
"1844
[; ;Source/FreeRTOS/tasks.c: 1844:                 {
{
"1846
[; ;Source/FreeRTOS/tasks.c: 1846:                 }
}
[e :U 1164 ]
"1850
[; ;Source/FreeRTOS/tasks.c: 1850:                 ( void ) uxPriorityUsedOnEntry;
[e _uxPriorityUsedOnEntry ]
"1851
[; ;Source/FreeRTOS/tasks.c: 1851:             }
}
[e :U 1147 ]
"1852
[; ;Source/FreeRTOS/tasks.c: 1852:         }
}
"1853
[; ;Source/FreeRTOS/tasks.c: 1853:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1165  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1165 ]
"1854
[; ;Source/FreeRTOS/tasks.c: 1854:     }
[e :UE 1143 ]
}
"1861
[; ;Source/FreeRTOS/tasks.c: 1861:     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
[v _vTaskSuspend `(v ~T0 @X0 1 ef1`*S936 ]
"1862
[; ;Source/FreeRTOS/tasks.c: 1862:     {
{
[e :U _vTaskSuspend ]
"1861
[; ;Source/FreeRTOS/tasks.c: 1861:     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
[v _xTaskToSuspend `*S936 ~T0 @X0 1 r1 ]
"1862
[; ;Source/FreeRTOS/tasks.c: 1862:     {
[f ]
"1863
[; ;Source/FreeRTOS/tasks.c: 1863:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"1865
[; ;Source/FreeRTOS/tasks.c: 1865:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1866
[; ;Source/FreeRTOS/tasks.c: 1866:         {
{
"1869
[; ;Source/FreeRTOS/tasks.c: 1869:             pxTCB = ( ( ( xTaskToSuspend ) == ((void*)0) ) ? pxCurrentTCB : ( xTaskToSuspend ) );
[e = _pxTCB ? == _xTaskToSuspend -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTaskToSuspend ]
"1875
[; ;Source/FreeRTOS/tasks.c: 1875:             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
[e $ ! == -> ( _uxListRemove (1 &U . *U _pxTCB 1 `i -> -> -> 0 `i `uc `i 1167  ]
"1876
[; ;Source/FreeRTOS/tasks.c: 1876:             {
{
"1878
[; ;Source/FreeRTOS/tasks.c: 1878:             }
}
[e $U 1168  ]
"1879
[; ;Source/FreeRTOS/tasks.c: 1879:             else
[e :U 1167 ]
"1880
[; ;Source/FreeRTOS/tasks.c: 1880:             {
{
"1882
[; ;Source/FreeRTOS/tasks.c: 1882:             }
}
[e :U 1168 ]
"1885
[; ;Source/FreeRTOS/tasks.c: 1885:             if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != ((void*)0) )
[e $ ! != . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 1169  ]
"1886
[; ;Source/FreeRTOS/tasks.c: 1886:             {
{
"1887
[; ;Source/FreeRTOS/tasks.c: 1887:                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
[e ( _uxListRemove (1 &U . *U _pxTCB 2 ]
"1888
[; ;Source/FreeRTOS/tasks.c: 1888:             }
}
[e $U 1170  ]
"1889
[; ;Source/FreeRTOS/tasks.c: 1889:             else
[e :U 1169 ]
"1890
[; ;Source/FreeRTOS/tasks.c: 1890:             {
{
"1892
[; ;Source/FreeRTOS/tasks.c: 1892:             }
}
[e :U 1170 ]
"1894
[; ;Source/FreeRTOS/tasks.c: 1894:             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
[e ( _vListInsertEnd (2 , &U _xSuspendedTaskList &U . *U _pxTCB 1 ]
"1897
[; ;Source/FreeRTOS/tasks.c: 1897:             {
{
"1898
[; ;Source/FreeRTOS/tasks.c: 1898:                 BaseType_t x;
[v _x `c ~T0 @X0 1 a ]
"1900
[; ;Source/FreeRTOS/tasks.c: 1900:                 for( x = 0; x < 1; x++ )
{
[e = _x -> -> 0 `i `c ]
[e $ < -> _x `i -> 1 `i 1171  ]
[e $U 1172  ]
[e :U 1171 ]
"1901
[; ;Source/FreeRTOS/tasks.c: 1901:                 {
{
"1902
[; ;Source/FreeRTOS/tasks.c: 1902:                     if( pxTCB->ucNotifyState[ x ] == ( ( uint8_t ) 1 ) )
[e $ ! == -> *U + &U . *U _pxTCB 10 * -> -> _x `uc `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux `i -> -> -> 1 `i `uc `i 1174  ]
"1903
[; ;Source/FreeRTOS/tasks.c: 1903:                     {
{
"1906
[; ;Source/FreeRTOS/tasks.c: 1906:                         pxTCB->ucNotifyState[ x ] = ( ( uint8_t ) 0 );
[e = *U + &U . *U _pxTCB 10 * -> -> _x `uc `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux -> -> 0 `i `uc ]
"1907
[; ;Source/FreeRTOS/tasks.c: 1907:                     }
}
[e :U 1174 ]
"1908
[; ;Source/FreeRTOS/tasks.c: 1908:                 }
}
[e ++ _x -> -> 1 `i `c ]
[e $ < -> _x `i -> 1 `i 1171  ]
[e :U 1172 ]
}
"1909
[; ;Source/FreeRTOS/tasks.c: 1909:             }
}
"1911
[; ;Source/FreeRTOS/tasks.c: 1911:         }
}
"1912
[; ;Source/FreeRTOS/tasks.c: 1912:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1175  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1175 ]
"1914
[; ;Source/FreeRTOS/tasks.c: 1914:         if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xSchedulerRunning `i -> -> -> 0 `i `c `i 1176  ]
"1915
[; ;Source/FreeRTOS/tasks.c: 1915:         {
{
"1918
[; ;Source/FreeRTOS/tasks.c: 1918:             POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"1919
[; ;Source/FreeRTOS/tasks.c: 1919:             {
{
"1920
[; ;Source/FreeRTOS/tasks.c: 1920:                 prvResetNextTaskUnblockTime();
[e ( _prvResetNextTaskUnblockTime ..  ]
"1921
[; ;Source/FreeRTOS/tasks.c: 1921:             }
}
"1922
[; ;Source/FreeRTOS/tasks.c: 1922:             __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1177  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1177 ]
"1923
[; ;Source/FreeRTOS/tasks.c: 1923:         }
}
[e $U 1178  ]
"1924
[; ;Source/FreeRTOS/tasks.c: 1924:         else
[e :U 1176 ]
"1925
[; ;Source/FreeRTOS/tasks.c: 1925:         {
{
"1927
[; ;Source/FreeRTOS/tasks.c: 1927:         }
}
[e :U 1178 ]
"1929
[; ;Source/FreeRTOS/tasks.c: 1929:         if( pxTCB == pxCurrentTCB )
[e $ ! == _pxTCB _pxCurrentTCB 1179  ]
"1930
[; ;Source/FreeRTOS/tasks.c: 1930:         {
{
"1931
[; ;Source/FreeRTOS/tasks.c: 1931:             if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xSchedulerRunning `i -> -> -> 0 `i `c `i 1180  ]
"1932
[; ;Source/FreeRTOS/tasks.c: 1932:             {
{
"1934
[; ;Source/FreeRTOS/tasks.c: 1934:                 if( ( uxSchedulerSuspended == 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1934 );
[e $ ! == -> == -> _uxSchedulerSuspended `i -> 0 `i `i -> 0 `i 1181  ]
[e ( _Xprintf , (. :s 76C -> 1934 `i ]
[e :U 1181 ]
"1935
[; ;Source/FreeRTOS/tasks.c: 1935:                 vPortYield();
[e ( _vPortYield ..  ]
"1936
[; ;Source/FreeRTOS/tasks.c: 1936:             }
}
[e $U 1182  ]
"1937
[; ;Source/FreeRTOS/tasks.c: 1937:             else
[e :U 1180 ]
"1938
[; ;Source/FreeRTOS/tasks.c: 1938:             {
{
"1942
[; ;Source/FreeRTOS/tasks.c: 1942:                 if( ( ( &xSuspendedTaskList )->uxNumberOfItems ) == uxCurrentNumberOfTasks )
[e $ ! == -> . *U &U _xSuspendedTaskList 0 `i -> _uxCurrentNumberOfTasks `i 1183  ]
"1943
[; ;Source/FreeRTOS/tasks.c: 1943:                 {
{
[v F7633 `*S936 ~T0 @X0 1 t ]
"1948
[; ;Source/FreeRTOS/tasks.c: 1948:                     pxCurrentTCB = ((void*)0);
[e = _pxCurrentTCB -> -> -> 0 `i `*v `V*S936 ]
"1949
[; ;Source/FreeRTOS/tasks.c: 1949:                 }
}
[e $U 1184  ]
"1950
[; ;Source/FreeRTOS/tasks.c: 1950:                 else
[e :U 1183 ]
"1951
[; ;Source/FreeRTOS/tasks.c: 1951:                 {
{
"1952
[; ;Source/FreeRTOS/tasks.c: 1952:                     vTaskSwitchContext();
[e ( _vTaskSwitchContext ..  ]
"1953
[; ;Source/FreeRTOS/tasks.c: 1953:                 }
}
[e :U 1184 ]
"1954
[; ;Source/FreeRTOS/tasks.c: 1954:             }
}
[e :U 1182 ]
"1955
[; ;Source/FreeRTOS/tasks.c: 1955:         }
}
[e $U 1185  ]
"1956
[; ;Source/FreeRTOS/tasks.c: 1956:         else
[e :U 1179 ]
"1957
[; ;Source/FreeRTOS/tasks.c: 1957:         {
{
"1959
[; ;Source/FreeRTOS/tasks.c: 1959:         }
}
[e :U 1185 ]
"1960
[; ;Source/FreeRTOS/tasks.c: 1960:     }
[e :UE 1166 ]
}
"1967
[; ;Source/FreeRTOS/tasks.c: 1967:     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
[v _prvTaskIsTaskSuspended `(c ~T0 @X0 1 sf1`C*S936 ]
"1968
[; ;Source/FreeRTOS/tasks.c: 1968:     {
{
[e :U _prvTaskIsTaskSuspended ]
[v F7637 `*S936 ~T0 @X0 1 t ]
"1967
[; ;Source/FreeRTOS/tasks.c: 1967:     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
[v _xTask `C*S936 ~T0 @X0 1 r1 ]
"1968
[; ;Source/FreeRTOS/tasks.c: 1968:     {
[f ]
"1969
[; ;Source/FreeRTOS/tasks.c: 1969:         BaseType_t xReturn = ( ( BaseType_t ) 0 );
[v _xReturn `c ~T0 @X0 1 a ]
[e = _xReturn -> -> 0 `i `c ]
[v F7640 `*CS936 ~T0 @X0 1 t ]
"1970
[; ;Source/FreeRTOS/tasks.c: 1970:         const TCB_t * const pxTCB = xTask;
[v _pxTCB `C*CS936 ~T0 @X0 1 a ]
[e = _pxTCB -> _xTask `*CS936 ]
"1976
[; ;Source/FreeRTOS/tasks.c: 1976:         if( ( xTask ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 1976 );
[e $ ! == _xTask -> -> 0 `i `*S936 1187  ]
[e ( _Xprintf , (. :s 77C -> 1976 `i ]
[e :U 1187 ]
"1979
[; ;Source/FreeRTOS/tasks.c: 1979:         if( ( ( ( &( pxTCB->xStateListItem ) )->pvContainer == ( &xSuspendedTaskList ) ) ? ( ( ( BaseType_t ) 1 ) ) : ( ( ( BaseType_t ) 0 ) ) ) != ( ( BaseType_t ) 0 ) )
[e $ ! != ? == . *U &U . *U _pxTCB 1 4 &U _xSuspendedTaskList : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 1188  ]
"1980
[; ;Source/FreeRTOS/tasks.c: 1980:         {
{
"1982
[; ;Source/FreeRTOS/tasks.c: 1982:             if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer == ( &xPendingReadyList ) ) ? ( ( ( BaseType_t ) 1 ) ) : ( ( ( BaseType_t ) 0 ) ) ) == ( ( BaseType_t ) 0 ) )
[e $ ! == ? == . *U &U . *U _pxTCB 2 4 &U _xPendingReadyList : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 1189  ]
"1983
[; ;Source/FreeRTOS/tasks.c: 1983:             {
{
"1986
[; ;Source/FreeRTOS/tasks.c: 1986:                 if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer == ( ((void*)0) ) ) ? ( ( ( BaseType_t ) 1 ) ) : ( ( ( BaseType_t ) 0 ) ) ) != ( ( BaseType_t ) 0 ) )
[e $ ! != ? == . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 1190  ]
"1987
[; ;Source/FreeRTOS/tasks.c: 1987:                 {
{
"1988
[; ;Source/FreeRTOS/tasks.c: 1988:                     xReturn = ( ( BaseType_t ) 1 );
[e = _xReturn -> -> 1 `i `c ]
"1989
[; ;Source/FreeRTOS/tasks.c: 1989:                 }
}
[e $U 1191  ]
"1990
[; ;Source/FreeRTOS/tasks.c: 1990:                 else
[e :U 1190 ]
"1991
[; ;Source/FreeRTOS/tasks.c: 1991:                 {
{
"1993
[; ;Source/FreeRTOS/tasks.c: 1993:                 }
}
[e :U 1191 ]
"1994
[; ;Source/FreeRTOS/tasks.c: 1994:             }
}
[e $U 1192  ]
"1995
[; ;Source/FreeRTOS/tasks.c: 1995:             else
[e :U 1189 ]
"1996
[; ;Source/FreeRTOS/tasks.c: 1996:             {
{
"1998
[; ;Source/FreeRTOS/tasks.c: 1998:             }
}
[e :U 1192 ]
"1999
[; ;Source/FreeRTOS/tasks.c: 1999:         }
}
[e $U 1193  ]
"2000
[; ;Source/FreeRTOS/tasks.c: 2000:         else
[e :U 1188 ]
"2001
[; ;Source/FreeRTOS/tasks.c: 2001:         {
{
"2003
[; ;Source/FreeRTOS/tasks.c: 2003:         }
}
[e :U 1193 ]
"2005
[; ;Source/FreeRTOS/tasks.c: 2005:         return xReturn;
[e ) _xReturn ]
[e $UE 1186  ]
"2006
[; ;Source/FreeRTOS/tasks.c: 2006:     }
[e :UE 1186 ]
}
"2013
[; ;Source/FreeRTOS/tasks.c: 2013:     void vTaskResume( TaskHandle_t xTaskToResume )
[v _vTaskResume `(v ~T0 @X0 1 ef1`*S936 ]
"2014
[; ;Source/FreeRTOS/tasks.c: 2014:     {
{
[e :U _vTaskResume ]
"2013
[; ;Source/FreeRTOS/tasks.c: 2013:     void vTaskResume( TaskHandle_t xTaskToResume )
[v _xTaskToResume `*S936 ~T0 @X0 1 r1 ]
"2014
[; ;Source/FreeRTOS/tasks.c: 2014:     {
[f ]
[v F7647 `*S936 ~T0 @X0 1 t ]
"2015
[; ;Source/FreeRTOS/tasks.c: 2015:         TCB_t * const pxTCB = xTaskToResume;
[v _pxTCB `C*S936 ~T0 @X0 1 a ]
[e = _pxTCB _xTaskToResume ]
"2018
[; ;Source/FreeRTOS/tasks.c: 2018:         if( ( xTaskToResume ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2018 );
[e $ ! == _xTaskToResume -> -> 0 `i `*S936 1195  ]
[e ( _Xprintf , (. :s 78C -> 2018 `i ]
[e :U 1195 ]
"2022
[; ;Source/FreeRTOS/tasks.c: 2022:         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != ((void*)0) ) )
[e $ ! && != _pxTCB _pxCurrentTCB != _pxTCB -> -> -> 0 `i `*v `*S936 1196  ]
"2023
[; ;Source/FreeRTOS/tasks.c: 2023:         {
{
"2024
[; ;Source/FreeRTOS/tasks.c: 2024:             POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"2025
[; ;Source/FreeRTOS/tasks.c: 2025:             {
{
"2026
[; ;Source/FreeRTOS/tasks.c: 2026:                 if( prvTaskIsTaskSuspended( pxTCB ) != ( ( BaseType_t ) 0 ) )
[e $ ! != -> ( _prvTaskIsTaskSuspended (1 _pxTCB `i -> -> -> 0 `i `c `i 1197  ]
"2027
[; ;Source/FreeRTOS/tasks.c: 2027:                 {
{
"2032
[; ;Source/FreeRTOS/tasks.c: 2032:                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
[e ( _uxListRemove (1 &U . *U _pxTCB 1 ]
"2033
[; ;Source/FreeRTOS/tasks.c: 2033:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 1198  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 1198 ]
}
{
[v F7649 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"2036
[; ;Source/FreeRTOS/tasks.c: 2036:                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
[e $ ! >= -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 1199  ]
"2037
[; ;Source/FreeRTOS/tasks.c: 2037:                     {
{
"2041
[; ;Source/FreeRTOS/tasks.c: 2041:                         vPortYield();
[e ( _vPortYield ..  ]
"2042
[; ;Source/FreeRTOS/tasks.c: 2042:                     }
}
[e $U 1200  ]
"2043
[; ;Source/FreeRTOS/tasks.c: 2043:                     else
[e :U 1199 ]
"2044
[; ;Source/FreeRTOS/tasks.c: 2044:                     {
{
"2046
[; ;Source/FreeRTOS/tasks.c: 2046:                     }
}
[e :U 1200 ]
"2047
[; ;Source/FreeRTOS/tasks.c: 2047:                 }
}
[e $U 1201  ]
"2048
[; ;Source/FreeRTOS/tasks.c: 2048:                 else
[e :U 1197 ]
"2049
[; ;Source/FreeRTOS/tasks.c: 2049:                 {
{
"2051
[; ;Source/FreeRTOS/tasks.c: 2051:                 }
}
[e :U 1201 ]
"2052
[; ;Source/FreeRTOS/tasks.c: 2052:             }
}
"2053
[; ;Source/FreeRTOS/tasks.c: 2053:             __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1202  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1202 ]
"2054
[; ;Source/FreeRTOS/tasks.c: 2054:         }
}
[e $U 1203  ]
"2055
[; ;Source/FreeRTOS/tasks.c: 2055:         else
[e :U 1196 ]
"2056
[; ;Source/FreeRTOS/tasks.c: 2056:         {
{
"2058
[; ;Source/FreeRTOS/tasks.c: 2058:         }
}
[e :U 1203 ]
"2059
[; ;Source/FreeRTOS/tasks.c: 2059:     }
[e :UE 1194 ]
}
"2067
[; ;Source/FreeRTOS/tasks.c: 2067:     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
[v _xTaskResumeFromISR `(c ~T0 @X0 1 ef1`*S936 ]
"2068
[; ;Source/FreeRTOS/tasks.c: 2068:     {
{
[e :U _xTaskResumeFromISR ]
"2067
[; ;Source/FreeRTOS/tasks.c: 2067:     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
[v _xTaskToResume `*S936 ~T0 @X0 1 r1 ]
"2068
[; ;Source/FreeRTOS/tasks.c: 2068:     {
[f ]
"2069
[; ;Source/FreeRTOS/tasks.c: 2069:         BaseType_t xYieldRequired = ( ( BaseType_t ) 0 );
[v _xYieldRequired `c ~T0 @X0 1 a ]
[e = _xYieldRequired -> -> 0 `i `c ]
[v F7654 `*S936 ~T0 @X0 1 t ]
"2070
[; ;Source/FreeRTOS/tasks.c: 2070:         TCB_t * const pxTCB = xTaskToResume;
[v _pxTCB `C*S936 ~T0 @X0 1 a ]
[e = _pxTCB _xTaskToResume ]
"2071
[; ;Source/FreeRTOS/tasks.c: 2071:         UBaseType_t uxSavedInterruptStatus;
[v _uxSavedInterruptStatus `uc ~T0 @X0 1 a ]
"2073
[; ;Source/FreeRTOS/tasks.c: 2073:         if( ( xTaskToResume ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2073 );
[e $ ! == _xTaskToResume -> -> 0 `i `*S936 1205  ]
[e ( _Xprintf , (. :s 79C -> 2073 `i ]
[e :U 1205 ]
"2093
[; ;Source/FreeRTOS/tasks.c: 2093:         uxSavedInterruptStatus = 0;
[e = _uxSavedInterruptStatus -> -> 0 `i `uc ]
"2094
[; ;Source/FreeRTOS/tasks.c: 2094:         {
{
"2095
[; ;Source/FreeRTOS/tasks.c: 2095:             if( prvTaskIsTaskSuspended( pxTCB ) != ( ( BaseType_t ) 0 ) )
[e $ ! != -> ( _prvTaskIsTaskSuspended (1 _pxTCB `i -> -> -> 0 `i `c `i 1206  ]
"2096
[; ;Source/FreeRTOS/tasks.c: 2096:             {
{
"2100
[; ;Source/FreeRTOS/tasks.c: 2100:                 if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! == -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 1207  ]
"2101
[; ;Source/FreeRTOS/tasks.c: 2101:                 {
{
"2104
[; ;Source/FreeRTOS/tasks.c: 2104:                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
[e $ ! >= -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 1208  ]
"2105
[; ;Source/FreeRTOS/tasks.c: 2105:                     {
{
"2106
[; ;Source/FreeRTOS/tasks.c: 2106:                         xYieldRequired = ( ( BaseType_t ) 1 );
[e = _xYieldRequired -> -> 1 `i `c ]
"2111
[; ;Source/FreeRTOS/tasks.c: 2111:                         xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"2112
[; ;Source/FreeRTOS/tasks.c: 2112:                     }
}
[e $U 1209  ]
"2113
[; ;Source/FreeRTOS/tasks.c: 2113:                     else
[e :U 1208 ]
"2114
[; ;Source/FreeRTOS/tasks.c: 2114:                     {
{
"2116
[; ;Source/FreeRTOS/tasks.c: 2116:                     }
}
[e :U 1209 ]
"2118
[; ;Source/FreeRTOS/tasks.c: 2118:                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
[e ( _uxListRemove (1 &U . *U _pxTCB 1 ]
"2119
[; ;Source/FreeRTOS/tasks.c: 2119:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 1210  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 1210 ]
}
{
[v F7657 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"2120
[; ;Source/FreeRTOS/tasks.c: 2120:                 }
}
[e $U 1211  ]
"2121
[; ;Source/FreeRTOS/tasks.c: 2121:                 else
[e :U 1207 ]
"2122
[; ;Source/FreeRTOS/tasks.c: 2122:                 {
{
"2126
[; ;Source/FreeRTOS/tasks.c: 2126:                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
[e ( _vListInsertEnd (2 , &U _xPendingReadyList &U . *U _pxTCB 2 ]
"2127
[; ;Source/FreeRTOS/tasks.c: 2127:                 }
}
[e :U 1211 ]
"2128
[; ;Source/FreeRTOS/tasks.c: 2128:             }
}
[e $U 1212  ]
"2129
[; ;Source/FreeRTOS/tasks.c: 2129:             else
[e :U 1206 ]
"2130
[; ;Source/FreeRTOS/tasks.c: 2130:             {
{
"2132
[; ;Source/FreeRTOS/tasks.c: 2132:             }
}
[e :U 1212 ]
"2133
[; ;Source/FreeRTOS/tasks.c: 2133:         }
}
"2134
[; ;Source/FreeRTOS/tasks.c: 2134:         ( void ) ( uxSavedInterruptStatus );
[e _uxSavedInterruptStatus ]
"2136
[; ;Source/FreeRTOS/tasks.c: 2136:         return xYieldRequired;
[e ) _xYieldRequired ]
[e $UE 1204  ]
"2137
[; ;Source/FreeRTOS/tasks.c: 2137:     }
[e :UE 1204 ]
}
"2142
[; ;Source/FreeRTOS/tasks.c: 2142: void vTaskStartScheduler( void )
[v _vTaskStartScheduler `(v ~T0 @X0 1 ef ]
"2143
[; ;Source/FreeRTOS/tasks.c: 2143: {
{
[e :U _vTaskStartScheduler ]
[f ]
"2144
[; ;Source/FreeRTOS/tasks.c: 2144:     BaseType_t xReturn;
[v _xReturn `c ~T0 @X0 1 a ]
"2146
[; ;Source/FreeRTOS/tasks.c: 2146:     Xprintf("vTaskStartScheduler(001)\r\n");
[e ( _Xprintf :s 80C ]
"2175
[; ;Source/FreeRTOS/tasks.c: 2175:     {
{
"2177
[; ;Source/FreeRTOS/tasks.c: 2177:         Xprintf("vTaskStartScheduler(002)\r\n");
[e ( _Xprintf :s 81C ]
"2178
[; ;Source/FreeRTOS/tasks.c: 2178:         xReturn = xTaskCreate( prvIdleTask,
[e = _xReturn ( _xTaskCreate (4 , , , , , &U _prvIdleTask :s 82C -> -> 128 `i `us -> -> 0 `i `*v -> -> 0 `i `uc &U _xIdleTaskHandle ]
"2184
[; ;Source/FreeRTOS/tasks.c: 2184:         Xprintf("vTaskStartScheduler(002)xReturn=%d \r\n",xReturn);
[e ( _Xprintf , (. :s 83C -> _xReturn `i ]
"2185
[; ;Source/FreeRTOS/tasks.c: 2185:     }
}
"2201
[; ;Source/FreeRTOS/tasks.c: 2201:     if( xReturn == ( ( ( BaseType_t ) 1 ) ) )
[e $ ! == -> _xReturn `i -> -> -> 1 `i `c `i 1214  ]
"2202
[; ;Source/FreeRTOS/tasks.c: 2202:     {
{
"2203
[; ;Source/FreeRTOS/tasks.c: 2203:         Xprintf("vTaskStartScheduler(003) \r\n");
[e ( _Xprintf :s 84C ]
"2218
[; ;Source/FreeRTOS/tasks.c: 2218:         Xprintf("vTaskStartScheduler(005) \r\n");
[e ( _Xprintf :s 85C ]
"2219
[; ;Source/FreeRTOS/tasks.c: 2219:         INTCONbits.GIE_GIEH = 0;;
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"2230
[; ;Source/FreeRTOS/tasks.c: 2230:         xNextTaskUnblockTime = ( TickType_t ) 0xffff;
[e = _xNextTaskUnblockTime -> -> 65535 `ui `us ]
"2231
[; ;Source/FreeRTOS/tasks.c: 2231:         xSchedulerRunning = ( ( BaseType_t ) 1 );
[e = _xSchedulerRunning -> -> 1 `i `c ]
"2232
[; ;Source/FreeRTOS/tasks.c: 2232:         xTickCount = ( TickType_t ) 0;
[e = _xTickCount -> -> 0 `i `us ]
"2233
[; ;Source/FreeRTOS/tasks.c: 2233:         Xprintf("vTaskStartScheduler(007) \r\n");
[e ( _Xprintf :s 86C ]
"2248
[; ;Source/FreeRTOS/tasks.c: 2248:         Xprintf("vTaskStartScheduler(008) \r\n");
[e ( _Xprintf :s 87C ]
"2249
[; ;Source/FreeRTOS/tasks.c: 2249:         pxReadyTasksLists_info();
[e ( _pxReadyTasksLists_info ..  ]
"2251
[; ;Source/FreeRTOS/tasks.c: 2251:         xPortStartScheduler();
[e ( _xPortStartScheduler ..  ]
"2258
[; ;Source/FreeRTOS/tasks.c: 2258:     }
}
[e $U 1215  ]
"2259
[; ;Source/FreeRTOS/tasks.c: 2259:     else
[e :U 1214 ]
"2260
[; ;Source/FreeRTOS/tasks.c: 2260:     {
{
"2264
[; ;Source/FreeRTOS/tasks.c: 2264:         if( ( xReturn != ( -1 ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2264 );
[e $ ! == -> != -> _xReturn `i -U -> 1 `i `i -> 0 `i 1216  ]
[e ( _Xprintf , (. :s 88C -> 2264 `i ]
[e :U 1216 ]
"2265
[; ;Source/FreeRTOS/tasks.c: 2265:     }
}
[e :U 1215 ]
"2267
[; ;Source/FreeRTOS/tasks.c: 2267:         Xprintf("vTaskStartScheduler(009) \r\n");
[e ( _Xprintf :s 89C ]
"2270
[; ;Source/FreeRTOS/tasks.c: 2270:     ( void ) xIdleTaskHandle;
[e _xIdleTaskHandle ]
"2274
[; ;Source/FreeRTOS/tasks.c: 2274:     ( void ) uxTopUsedPriority;
[e _uxTopUsedPriority ]
"2275
[; ;Source/FreeRTOS/tasks.c: 2275: }
[e :UE 1213 ]
}
"2278
[; ;Source/FreeRTOS/tasks.c: 2278: void vTaskEndScheduler( void )
[v _vTaskEndScheduler `(v ~T0 @X0 1 ef ]
"2279
[; ;Source/FreeRTOS/tasks.c: 2279: {
{
[e :U _vTaskEndScheduler ]
[f ]
"2283
[; ;Source/FreeRTOS/tasks.c: 2283:     INTCONbits.GIE_GIEH = 0;;
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"2284
[; ;Source/FreeRTOS/tasks.c: 2284:     xSchedulerRunning = ( ( BaseType_t ) 0 );
[e = _xSchedulerRunning -> -> 0 `i `c ]
"2285
[; ;Source/FreeRTOS/tasks.c: 2285:     vPortEndScheduler();
[e ( _vPortEndScheduler ..  ]
"2286
[; ;Source/FreeRTOS/tasks.c: 2286: }
[e :UE 1217 ]
}
"2289
[; ;Source/FreeRTOS/tasks.c: 2289: void vTaskSuspendAll( void )
[v _vTaskSuspendAll `(v ~T0 @X0 1 ef ]
"2290
[; ;Source/FreeRTOS/tasks.c: 2290: {
{
[e :U _vTaskSuspendAll ]
[f ]
"2302
[; ;Source/FreeRTOS/tasks.c: 2302:     ++uxSchedulerSuspended;
[e =+ _uxSchedulerSuspended -> -> 1 `i `Vuc ]
"2307
[; ;Source/FreeRTOS/tasks.c: 2307: }
[e :UE 1218 ]
}
"2373
[; ;Source/FreeRTOS/tasks.c: 2373: BaseType_t xTaskResumeAll( void )
[v _xTaskResumeAll `(c ~T0 @X0 1 ef ]
"2374
[; ;Source/FreeRTOS/tasks.c: 2374: {
{
[e :U _xTaskResumeAll ]
[f ]
"2375
[; ;Source/FreeRTOS/tasks.c: 2375:     TCB_t * pxTCB = ((void*)0);
[v _pxTCB `*S936 ~T0 @X0 1 a ]
[e = _pxTCB -> -> -> 0 `i `*v `*S936 ]
"2376
[; ;Source/FreeRTOS/tasks.c: 2376:     BaseType_t xAlreadyYielded = ( ( BaseType_t ) 0 );
[v _xAlreadyYielded `c ~T0 @X0 1 a ]
[e = _xAlreadyYielded -> -> 0 `i `c ]
"2380
[; ;Source/FreeRTOS/tasks.c: 2380:     if( ( uxSchedulerSuspended ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2380 );
[e $ ! == -> _uxSchedulerSuspended `i -> 0 `i 1220  ]
[e ( _Xprintf , (. :s 90C -> 2380 `i ]
[e :U 1220 ]
"2387
[; ;Source/FreeRTOS/tasks.c: 2387:     POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"2388
[; ;Source/FreeRTOS/tasks.c: 2388:     {
{
"2389
[; ;Source/FreeRTOS/tasks.c: 2389:         --uxSchedulerSuspended;
[e =- _uxSchedulerSuspended -> -> 1 `i `Vuc ]
"2391
[; ;Source/FreeRTOS/tasks.c: 2391:         if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! == -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 1221  ]
"2392
[; ;Source/FreeRTOS/tasks.c: 2392:         {
{
"2393
[; ;Source/FreeRTOS/tasks.c: 2393:             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
[e $ ! > -> _uxCurrentNumberOfTasks `i -> -> -> 0 `ui `uc `i 1222  ]
"2394
[; ;Source/FreeRTOS/tasks.c: 2394:             {
{
"2397
[; ;Source/FreeRTOS/tasks.c: 2397:                 while( ( ( ( &xPendingReadyList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? ( ( BaseType_t ) 1 ) : ( ( BaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
[e $U 1223  ]
[e :U 1224 ]
"2398
[; ;Source/FreeRTOS/tasks.c: 2398:                 {
{
"2399
[; ;Source/FreeRTOS/tasks.c: 2399:                     pxTCB = ( ( &( ( ( &xPendingReadyList ) )->xListEnd ) )->pxNext->pvOwner );
[e = _pxTCB -> . *U . *U &U . *U &U _xPendingReadyList 2 1 3 `*S936 ]
"2400
[; ;Source/FreeRTOS/tasks.c: 2400:                     { List_t * const pxList = ( &( pxTCB->xEventListItem ) )->pvContainer; ( &( pxTCB->xEventListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xEventListItem ) )->pxPrevious; ( &( pxTCB->xEventListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xEventListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xEventListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xEventListItem ) )->pxPrevious; } ( &( pxTCB->xEventListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7668 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 2 4 ]
[e = . *U . *U &U . *U _pxTCB 2 1 2 . *U &U . *U _pxTCB 2 2 ]
[e = . *U . *U &U . *U _pxTCB 2 2 1 . *U &U . *U _pxTCB 2 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 2 1226  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 2 2 ]
}
[e :U 1226 ]
[e = . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"2402
[; ;Source/FreeRTOS/tasks.c: 2402:                     { List_t * const pxList = ( &( pxTCB->xStateListItem ) )->pvContainer; ( &( pxTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xStateListItem ) )->pxPrevious; ( &( pxTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xStateListItem ) )->pxPrevious; } ( &( pxTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7670 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 1 4 ]
[e = . *U . *U &U . *U _pxTCB 1 1 2 . *U &U . *U _pxTCB 1 2 ]
[e = . *U . *U &U . *U _pxTCB 1 2 1 . *U &U . *U _pxTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 1 1227  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 1 2 ]
}
[e :U 1227 ]
[e = . *U &U . *U _pxTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"2403
[; ;Source/FreeRTOS/tasks.c: 2403:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 1228  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 1228 ]
}
{
[v F7672 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"2407
[; ;Source/FreeRTOS/tasks.c: 2407:                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
[e $ ! >= -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 1229  ]
"2408
[; ;Source/FreeRTOS/tasks.c: 2408:                     {
{
"2409
[; ;Source/FreeRTOS/tasks.c: 2409:                         xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"2410
[; ;Source/FreeRTOS/tasks.c: 2410:                     }
}
[e $U 1230  ]
"2411
[; ;Source/FreeRTOS/tasks.c: 2411:                     else
[e :U 1229 ]
"2412
[; ;Source/FreeRTOS/tasks.c: 2412:                     {
{
"2414
[; ;Source/FreeRTOS/tasks.c: 2414:                     }
}
[e :U 1230 ]
"2415
[; ;Source/FreeRTOS/tasks.c: 2415:                 }
}
[e :U 1223 ]
"2397
[; ;Source/FreeRTOS/tasks.c: 2397:                 while( ( ( ( &xPendingReadyList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? ( ( BaseType_t ) 1 ) : ( ( BaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
[e $ == ? == -> . *U &U _xPendingReadyList 0 `i -> -> -> 0 `i `uc `i : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 1224  ]
[e :U 1225 ]
"2417
[; ;Source/FreeRTOS/tasks.c: 2417:                 if( pxTCB != ((void*)0) )
[e $ ! != _pxTCB -> -> -> 0 `i `*v `*S936 1231  ]
"2418
[; ;Source/FreeRTOS/tasks.c: 2418:                 {
{
"2425
[; ;Source/FreeRTOS/tasks.c: 2425:                     prvResetNextTaskUnblockTime();
[e ( _prvResetNextTaskUnblockTime ..  ]
"2426
[; ;Source/FreeRTOS/tasks.c: 2426:                 }
}
[e :U 1231 ]
"2432
[; ;Source/FreeRTOS/tasks.c: 2432:                 {
{
"2433
[; ;Source/FreeRTOS/tasks.c: 2433:                     TickType_t xPendedCounts = xPendedTicks;
[v _xPendedCounts `us ~T0 @X0 1 a ]
[e = _xPendedCounts _xPendedTicks ]
"2435
[; ;Source/FreeRTOS/tasks.c: 2435:                     if( xPendedCounts > ( TickType_t ) 0U )
[e $ ! > -> _xPendedCounts `ui -> -> -> 0 `ui `us `ui 1232  ]
"2436
[; ;Source/FreeRTOS/tasks.c: 2436:                     {
{
"2437
[; ;Source/FreeRTOS/tasks.c: 2437:                         do
[e :U 1235 ]
"2438
[; ;Source/FreeRTOS/tasks.c: 2438:                         {
{
"2439
[; ;Source/FreeRTOS/tasks.c: 2439:                             if( xTaskIncrementTick() != ( ( BaseType_t ) 0 ) )
[e $ ! != -> ( _xTaskIncrementTick ..  `i -> -> -> 0 `i `c `i 1236  ]
"2440
[; ;Source/FreeRTOS/tasks.c: 2440:                             {
{
"2441
[; ;Source/FreeRTOS/tasks.c: 2441:                                 xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"2442
[; ;Source/FreeRTOS/tasks.c: 2442:                             }
}
[e $U 1237  ]
"2443
[; ;Source/FreeRTOS/tasks.c: 2443:                             else
[e :U 1236 ]
"2444
[; ;Source/FreeRTOS/tasks.c: 2444:                             {
{
"2446
[; ;Source/FreeRTOS/tasks.c: 2446:                             }
}
[e :U 1237 ]
"2448
[; ;Source/FreeRTOS/tasks.c: 2448:                             --xPendedCounts;
[e =- _xPendedCounts -> -> 1 `i `us ]
"2449
[; ;Source/FreeRTOS/tasks.c: 2449:                         } while( xPendedCounts > ( TickType_t ) 0U );
}
[e $ > -> _xPendedCounts `ui -> -> -> 0 `ui `us `ui 1235  ]
[e :U 1234 ]
"2451
[; ;Source/FreeRTOS/tasks.c: 2451:                         xPendedTicks = 0;
[e = _xPendedTicks -> -> 0 `i `us ]
"2452
[; ;Source/FreeRTOS/tasks.c: 2452:                     }
}
[e $U 1238  ]
"2453
[; ;Source/FreeRTOS/tasks.c: 2453:                     else
[e :U 1232 ]
"2454
[; ;Source/FreeRTOS/tasks.c: 2454:                     {
{
"2456
[; ;Source/FreeRTOS/tasks.c: 2456:                     }
}
[e :U 1238 ]
"2457
[; ;Source/FreeRTOS/tasks.c: 2457:                 }
}
"2459
[; ;Source/FreeRTOS/tasks.c: 2459:                 if( xYieldPending != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xYieldPending `i -> -> -> 0 `i `c `i 1239  ]
"2460
[; ;Source/FreeRTOS/tasks.c: 2460:                 {
{
"2462
[; ;Source/FreeRTOS/tasks.c: 2462:                     {
{
"2463
[; ;Source/FreeRTOS/tasks.c: 2463:                         xAlreadyYielded = ( ( BaseType_t ) 1 );
[e = _xAlreadyYielded -> -> 1 `i `c ]
"2464
[; ;Source/FreeRTOS/tasks.c: 2464:                     }
}
"2466
[; ;Source/FreeRTOS/tasks.c: 2466:                     vPortYield();
[e ( _vPortYield ..  ]
"2467
[; ;Source/FreeRTOS/tasks.c: 2467:                 }
}
[e $U 1240  ]
"2468
[; ;Source/FreeRTOS/tasks.c: 2468:                 else
[e :U 1239 ]
"2469
[; ;Source/FreeRTOS/tasks.c: 2469:                 {
{
"2471
[; ;Source/FreeRTOS/tasks.c: 2471:                 }
}
[e :U 1240 ]
"2472
[; ;Source/FreeRTOS/tasks.c: 2472:             }
}
[e :U 1222 ]
"2473
[; ;Source/FreeRTOS/tasks.c: 2473:         }
}
[e $U 1241  ]
"2474
[; ;Source/FreeRTOS/tasks.c: 2474:         else
[e :U 1221 ]
"2475
[; ;Source/FreeRTOS/tasks.c: 2475:         {
{
"2477
[; ;Source/FreeRTOS/tasks.c: 2477:         }
}
[e :U 1241 ]
"2478
[; ;Source/FreeRTOS/tasks.c: 2478:     }
}
"2479
[; ;Source/FreeRTOS/tasks.c: 2479:     __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1242  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1242 ]
"2481
[; ;Source/FreeRTOS/tasks.c: 2481:     return xAlreadyYielded;
[e ) _xAlreadyYielded ]
[e $UE 1219  ]
"2482
[; ;Source/FreeRTOS/tasks.c: 2482: }
[e :UE 1219 ]
}
"2485
[; ;Source/FreeRTOS/tasks.c: 2485: TickType_t xTaskGetTickCount( void )
[v _xTaskGetTickCount `(us ~T0 @X0 1 ef ]
"2486
[; ;Source/FreeRTOS/tasks.c: 2486: {
{
[e :U _xTaskGetTickCount ]
[f ]
"2487
[; ;Source/FreeRTOS/tasks.c: 2487:     TickType_t xTicks;
[v _xTicks `us ~T0 @X0 1 a ]
"2490
[; ;Source/FreeRTOS/tasks.c: 2490:     POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"2491
[; ;Source/FreeRTOS/tasks.c: 2491:     {
{
"2492
[; ;Source/FreeRTOS/tasks.c: 2492:         xTicks = xTickCount;
[e = _xTicks _xTickCount ]
"2493
[; ;Source/FreeRTOS/tasks.c: 2493:     }
}
"2494
[; ;Source/FreeRTOS/tasks.c: 2494:     __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1244  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1244 ]
"2496
[; ;Source/FreeRTOS/tasks.c: 2496:     return xTicks;
[e ) _xTicks ]
[e $UE 1243  ]
"2497
[; ;Source/FreeRTOS/tasks.c: 2497: }
[e :UE 1243 ]
}
"2500
[; ;Source/FreeRTOS/tasks.c: 2500: TickType_t xTaskGetTickCountFromISR( void )
[v _xTaskGetTickCountFromISR `(us ~T0 @X0 1 ef ]
"2501
[; ;Source/FreeRTOS/tasks.c: 2501: {
{
[e :U _xTaskGetTickCountFromISR ]
[f ]
"2502
[; ;Source/FreeRTOS/tasks.c: 2502:     TickType_t xReturn;
[v _xReturn `us ~T0 @X0 1 a ]
"2503
[; ;Source/FreeRTOS/tasks.c: 2503:     UBaseType_t uxSavedInterruptStatus;
[v _uxSavedInterruptStatus `uc ~T0 @X0 1 a ]
"2521
[; ;Source/FreeRTOS/tasks.c: 2521:     uxSavedInterruptStatus = 0;
[e = _uxSavedInterruptStatus -> -> 0 `i `uc ]
"2522
[; ;Source/FreeRTOS/tasks.c: 2522:     {
{
"2523
[; ;Source/FreeRTOS/tasks.c: 2523:         xReturn = xTickCount;
[e = _xReturn _xTickCount ]
"2524
[; ;Source/FreeRTOS/tasks.c: 2524:     }
}
"2525
[; ;Source/FreeRTOS/tasks.c: 2525:     ( void ) ( ( uxSavedInterruptStatus ) );
[e _uxSavedInterruptStatus ]
"2527
[; ;Source/FreeRTOS/tasks.c: 2527:     return xReturn;
[e ) _xReturn ]
[e $UE 1245  ]
"2528
[; ;Source/FreeRTOS/tasks.c: 2528: }
[e :UE 1245 ]
}
"2531
[; ;Source/FreeRTOS/tasks.c: 2531: UBaseType_t uxTaskGetNumberOfTasks( void )
[v _uxTaskGetNumberOfTasks `(uc ~T0 @X0 1 ef ]
"2532
[; ;Source/FreeRTOS/tasks.c: 2532: {
{
[e :U _uxTaskGetNumberOfTasks ]
[f ]
"2535
[; ;Source/FreeRTOS/tasks.c: 2535:     return uxCurrentNumberOfTasks;
[e ) _uxCurrentNumberOfTasks ]
[e $UE 1246  ]
"2536
[; ;Source/FreeRTOS/tasks.c: 2536: }
[e :UE 1246 ]
}
"2539
[; ;Source/FreeRTOS/tasks.c: 2539: char * pcTaskGetName( TaskHandle_t xTaskToQuery )
[v _pcTaskGetName `(*uc ~T0 @X0 1 ef1`*S936 ]
"2540
[; ;Source/FreeRTOS/tasks.c: 2540: {
{
[e :U _pcTaskGetName ]
"2539
[; ;Source/FreeRTOS/tasks.c: 2539: char * pcTaskGetName( TaskHandle_t xTaskToQuery )
[v _xTaskToQuery `*S936 ~T0 @X0 1 r1 ]
"2540
[; ;Source/FreeRTOS/tasks.c: 2540: {
[f ]
"2541
[; ;Source/FreeRTOS/tasks.c: 2541:     TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"2545
[; ;Source/FreeRTOS/tasks.c: 2545:     pxTCB = ( ( ( xTaskToQuery ) == ((void*)0) ) ? pxCurrentTCB : ( xTaskToQuery ) );
[e = _pxTCB ? == _xTaskToQuery -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTaskToQuery ]
"2546
[; ;Source/FreeRTOS/tasks.c: 2546:     if( ( pxTCB ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2546 );
[e $ ! == _pxTCB -> -> 0 `i `*S936 1248  ]
[e ( _Xprintf , (. :s 91C -> 2546 `i ]
[e :U 1248 ]
"2547
[; ;Source/FreeRTOS/tasks.c: 2547:     return &( pxTCB->pcTaskName[ 0 ] );
[e ) &U *U + &U . *U _pxTCB 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _pxTCB 5 `ui `ux ]
[e $UE 1247  ]
"2548
[; ;Source/FreeRTOS/tasks.c: 2548: }
[e :UE 1247 ]
}
"2688
[; ;Source/FreeRTOS/tasks.c: 2688:     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
[v _uxTaskGetSystemState `(uc ~T0 @X0 1 ef3`C*S940`Cuc`C*ul ]
"2691
[; ;Source/FreeRTOS/tasks.c: 2691:     {
{
[e :U _uxTaskGetSystemState ]
[v F7687 `*S940 ~T0 @X0 1 t ]
"2688
[; ;Source/FreeRTOS/tasks.c: 2688:     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
[v _pxTaskStatusArray `C*S940 ~T0 @X0 1 r1 ]
"2689
[; ;Source/FreeRTOS/tasks.c: 2689:                                       const UBaseType_t uxArraySize,
[v _uxArraySize `Cuc ~T0 @X0 1 r2 ]
[v F7690 `*ul ~T0 @X0 1 t ]
"2690
[; ;Source/FreeRTOS/tasks.c: 2690:                                       uint32_t * const pulTotalRunTime )
[v _pulTotalRunTime `C*ul ~T0 @X0 1 r3 ]
"2691
[; ;Source/FreeRTOS/tasks.c: 2691:     {
[f ]
"2692
[; ;Source/FreeRTOS/tasks.c: 2692:         UBaseType_t uxTask = 0, uxQueue = ( 3 );
[v _uxTask `uc ~T0 @X0 1 a ]
[e = _uxTask -> -> 0 `i `uc ]
[v _uxQueue `uc ~T0 @X0 1 a ]
[e = _uxQueue -> -> 3 `i `uc ]
"2694
[; ;Source/FreeRTOS/tasks.c: 2694:         vTaskSuspendAll();
[e ( _vTaskSuspendAll ..  ]
"2695
[; ;Source/FreeRTOS/tasks.c: 2695:         {
{
"2697
[; ;Source/FreeRTOS/tasks.c: 2697:             if( uxArraySize >= uxCurrentNumberOfTasks )
[e $ ! >= -> _uxArraySize `i -> _uxCurrentNumberOfTasks `i 1250  ]
"2698
[; ;Source/FreeRTOS/tasks.c: 2698:             {
{
"2701
[; ;Source/FreeRTOS/tasks.c: 2701:                 do
[e :U 1253 ]
"2702
[; ;Source/FreeRTOS/tasks.c: 2702:                 {
{
"2703
[; ;Source/FreeRTOS/tasks.c: 2703:                     uxQueue--;
[e -- _uxQueue -> -> 1 `i `uc ]
"2704
[; ;Source/FreeRTOS/tasks.c: 2704:                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
[e =+ _uxTask -> ( _prvListTasksWithinSingleList (3 , , &U *U + _pxTaskStatusArray * -> _uxTask `ux -> -> # *U _pxTaskStatusArray `ui `ux &U *U + &U _pxReadyTasksLists * -> _uxQueue `ux -> -> # *U &U _pxReadyTasksLists `ui `ux . `E7103 1 `uc ]
"2705
[; ;Source/FreeRTOS/tasks.c: 2705:                 } while( uxQueue > ( UBaseType_t ) ( ( UBaseType_t ) 0U ) );
}
[e $ > -> _uxQueue `i -> -> -> 0 `ui `uc `i 1253  ]
[e :U 1252 ]
"2709
[; ;Source/FreeRTOS/tasks.c: 2709:                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
[e =+ _uxTask -> ( _prvListTasksWithinSingleList (3 , , &U *U + _pxTaskStatusArray * -> _uxTask `ux -> -> # *U _pxTaskStatusArray `ui `ux _pxDelayedTaskList . `E7103 2 `uc ]
"2710
[; ;Source/FreeRTOS/tasks.c: 2710:                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
[e =+ _uxTask -> ( _prvListTasksWithinSingleList (3 , , &U *U + _pxTaskStatusArray * -> _uxTask `ux -> -> # *U _pxTaskStatusArray `ui `ux _pxOverflowDelayedTaskList . `E7103 2 `uc ]
"2713
[; ;Source/FreeRTOS/tasks.c: 2713:                 {
{
"2716
[; ;Source/FreeRTOS/tasks.c: 2716:                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
[e =+ _uxTask -> ( _prvListTasksWithinSingleList (3 , , &U *U + _pxTaskStatusArray * -> _uxTask `ux -> -> # *U _pxTaskStatusArray `ui `ux &U _xTasksWaitingTermination . `E7103 4 `uc ]
"2717
[; ;Source/FreeRTOS/tasks.c: 2717:                 }
}
"2721
[; ;Source/FreeRTOS/tasks.c: 2721:                 {
{
"2724
[; ;Source/FreeRTOS/tasks.c: 2724:                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
[e =+ _uxTask -> ( _prvListTasksWithinSingleList (3 , , &U *U + _pxTaskStatusArray * -> _uxTask `ux -> -> # *U _pxTaskStatusArray `ui `ux &U _xSuspendedTaskList . `E7103 3 `uc ]
"2725
[; ;Source/FreeRTOS/tasks.c: 2725:                 }
}
"2740
[; ;Source/FreeRTOS/tasks.c: 2740:                 {
{
"2741
[; ;Source/FreeRTOS/tasks.c: 2741:                     if( pulTotalRunTime != ((void*)0) )
[e $ ! != _pulTotalRunTime -> -> -> 0 `i `*v `*ul 1254  ]
"2742
[; ;Source/FreeRTOS/tasks.c: 2742:                     {
{
"2743
[; ;Source/FreeRTOS/tasks.c: 2743:                         *pulTotalRunTime = 0;
[e = *U _pulTotalRunTime -> -> -> 0 `i `l `ul ]
"2744
[; ;Source/FreeRTOS/tasks.c: 2744:                     }
}
[e :U 1254 ]
"2745
[; ;Source/FreeRTOS/tasks.c: 2745:                 }
}
"2747
[; ;Source/FreeRTOS/tasks.c: 2747:             }
}
[e $U 1255  ]
"2748
[; ;Source/FreeRTOS/tasks.c: 2748:             else
[e :U 1250 ]
"2749
[; ;Source/FreeRTOS/tasks.c: 2749:             {
{
"2751
[; ;Source/FreeRTOS/tasks.c: 2751:             }
}
[e :U 1255 ]
"2752
[; ;Source/FreeRTOS/tasks.c: 2752:         }
}
"2753
[; ;Source/FreeRTOS/tasks.c: 2753:         ( void ) xTaskResumeAll();
[e ( _xTaskResumeAll ..  ]
"2755
[; ;Source/FreeRTOS/tasks.c: 2755:         return uxTask;
[e ) _uxTask ]
[e $UE 1249  ]
"2756
[; ;Source/FreeRTOS/tasks.c: 2756:     }
[e :UE 1249 ]
}
"2815
[; ;Source/FreeRTOS/tasks.c: 2815: BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
[v _xTaskCatchUpTicks `(c ~T0 @X0 1 ef1`us ]
"2816
[; ;Source/FreeRTOS/tasks.c: 2816: {
{
[e :U _xTaskCatchUpTicks ]
"2815
[; ;Source/FreeRTOS/tasks.c: 2815: BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
[v _xTicksToCatchUp `us ~T0 @X0 1 r1 ]
"2816
[; ;Source/FreeRTOS/tasks.c: 2816: {
[f ]
"2817
[; ;Source/FreeRTOS/tasks.c: 2817:     BaseType_t xYieldOccurred;
[v _xYieldOccurred `c ~T0 @X0 1 a ]
"2821
[; ;Source/FreeRTOS/tasks.c: 2821:     if( ( uxSchedulerSuspended == 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2821 );
[e $ ! == -> == -> _uxSchedulerSuspended `i -> 0 `i `i -> 0 `i 1257  ]
[e ( _Xprintf , (. :s 92C -> 2821 `i ]
[e :U 1257 ]
"2825
[; ;Source/FreeRTOS/tasks.c: 2825:     vTaskSuspendAll();
[e ( _vTaskSuspendAll ..  ]
"2828
[; ;Source/FreeRTOS/tasks.c: 2828:     POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"2829
[; ;Source/FreeRTOS/tasks.c: 2829:     {
{
"2830
[; ;Source/FreeRTOS/tasks.c: 2830:         xPendedTicks += xTicksToCatchUp;
[e =+ _xPendedTicks -> _xTicksToCatchUp `Vus ]
"2831
[; ;Source/FreeRTOS/tasks.c: 2831:     }
}
"2832
[; ;Source/FreeRTOS/tasks.c: 2832:     __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 1258  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 1258 ]
"2833
[; ;Source/FreeRTOS/tasks.c: 2833:     xYieldOccurred = xTaskResumeAll();
[e = _xYieldOccurred ( _xTaskResumeAll ..  ]
"2835
[; ;Source/FreeRTOS/tasks.c: 2835:     return xYieldOccurred;
[e ) _xYieldOccurred ]
[e $UE 1256  ]
"2836
[; ;Source/FreeRTOS/tasks.c: 2836: }
[e :UE 1256 ]
}
"2919
[; ;Source/FreeRTOS/tasks.c: 2919: BaseType_t xTaskIncrementTick( void )
[v _xTaskIncrementTick `(c ~T0 @X0 1 ef ]
"2920
[; ;Source/FreeRTOS/tasks.c: 2920: {
{
[e :U _xTaskIncrementTick ]
[f ]
"2921
[; ;Source/FreeRTOS/tasks.c: 2921:     TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"2922
[; ;Source/FreeRTOS/tasks.c: 2922:     TickType_t xItemValue;
[v _xItemValue `us ~T0 @X0 1 a ]
"2923
[; ;Source/FreeRTOS/tasks.c: 2923:     BaseType_t xSwitchRequired = ( ( BaseType_t ) 0 );
[v _xSwitchRequired `c ~T0 @X0 1 a ]
[e = _xSwitchRequired -> -> 0 `i `c ]
"2928
[; ;Source/FreeRTOS/tasks.c: 2928:     do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 1 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 1 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1262 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1263  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 93C ]
[e $U 1264  ]
[e :U 1265 ]
{
{
[e $U 1267  ]
[e :U 1268 ]
[e :U 1267 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1268  ]
[e :U 1269 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1264 ]
[e $ != -> *U __s `i -> 0 `i 1265  ]
[e :U 1266 ]
{
[e $U 1270  ]
[e :U 1271 ]
[e :U 1270 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1271  ]
[e :U 1272 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 1 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1273  ]
[e :U 1274 ]
[e :U 1273 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1274  ]
[e :U 1275 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 1 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1276  ]
[e :U 1277 ]
[e :U 1276 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1277  ]
[e :U 1278 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1279  ]
[e :U 1280 ]
[e :U 1279 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1280  ]
[e :U 1281 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1263 ]
}
[e :U 1261 ]
"2931
[; ;Source/FreeRTOS/tasks.c: 2931:     if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! == -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 1282  ]
"2932
[; ;Source/FreeRTOS/tasks.c: 2932:     {
{
"2933
[; ;Source/FreeRTOS/tasks.c: 2933:         do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 2 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 2 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1285 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1286  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 94C ]
[e $U 1287  ]
[e :U 1288 ]
{
{
[e $U 1290  ]
[e :U 1291 ]
[e :U 1290 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1291  ]
[e :U 1292 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1287 ]
[e $ != -> *U __s `i -> 0 `i 1288  ]
[e :U 1289 ]
{
[e $U 1293  ]
[e :U 1294 ]
[e :U 1293 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1294  ]
[e :U 1295 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 2 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1296  ]
[e :U 1297 ]
[e :U 1296 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1297  ]
[e :U 1298 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 2 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1299  ]
[e :U 1300 ]
[e :U 1299 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1300  ]
[e :U 1301 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1302  ]
[e :U 1303 ]
[e :U 1302 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1303  ]
[e :U 1304 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1286 ]
}
[e :U 1284 ]
"2935
[; ;Source/FreeRTOS/tasks.c: 2935:         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
[v _xConstTickCount `Cus ~T0 @X0 1 a ]
[e = _xConstTickCount -> + -> _xTickCount `ui -> -> -> 1 `i `us `ui `us ]
"2938
[; ;Source/FreeRTOS/tasks.c: 2938:         xTickCount = xConstTickCount;
[e = _xTickCount _xConstTickCount ]
"2940
[; ;Source/FreeRTOS/tasks.c: 2940:         do { if( isr_cnt < 10 ){ const char* _s = ("xTC="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xTickCount >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xTickCount >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xTickCount >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xTickCount & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1307 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1308  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 95C ]
[e $U 1309  ]
[e :U 1310 ]
{
{
[e $U 1312  ]
[e :U 1313 ]
[e :U 1312 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1313  ]
[e :U 1314 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1309 ]
[e $ != -> *U __s `i -> 0 `i 1310  ]
[e :U 1311 ]
{
[e $U 1315  ]
[e :U 1316 ]
[e :U 1315 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1316  ]
[e :U 1317 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _xTickCount `ui -> 12 `i -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1318  ]
[e :U 1319 ]
[e :U 1318 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1319  ]
[e :U 1320 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _xTickCount `ui -> 8 `i -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1321  ]
[e :U 1322 ]
[e :U 1321 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1322  ]
[e :U 1323 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _xTickCount `ui -> 4 `i -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1324  ]
[e :U 1325 ]
[e :U 1324 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1325  ]
[e :U 1326 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> _xTickCount `ui -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1327  ]
[e :U 1328 ]
[e :U 1327 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1328  ]
[e :U 1329 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1330  ]
[e :U 1331 ]
[e :U 1330 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1331  ]
[e :U 1332 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1308 ]
}
[e :U 1306 ]
"2943
[; ;Source/FreeRTOS/tasks.c: 2943:         if( xConstTickCount == ( TickType_t ) 0U )
[e $ ! == -> _xConstTickCount `ui -> -> -> 0 `ui `us `ui 1333  ]
"2944
[; ;Source/FreeRTOS/tasks.c: 2944:         {
{
"2945
[; ;Source/FreeRTOS/tasks.c: 2945:             do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 3 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 3 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1336 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1337  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 96C ]
[e $U 1338  ]
[e :U 1339 ]
{
{
[e $U 1341  ]
[e :U 1342 ]
[e :U 1341 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1342  ]
[e :U 1343 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1338 ]
[e $ != -> *U __s `i -> 0 `i 1339  ]
[e :U 1340 ]
{
[e $U 1344  ]
[e :U 1345 ]
[e :U 1344 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1345  ]
[e :U 1346 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 3 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1347  ]
[e :U 1348 ]
[e :U 1347 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1348  ]
[e :U 1349 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 3 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1350  ]
[e :U 1351 ]
[e :U 1350 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1351  ]
[e :U 1352 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1353  ]
[e :U 1354 ]
[e :U 1353 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1354  ]
[e :U 1355 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1337 ]
}
[e :U 1335 ]
"2946
[; ;Source/FreeRTOS/tasks.c: 2946:             { List_t * pxTemp; if( ( ( ( ( ( pxDelayedTaskList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? ( ( BaseType_t ) 1 ) : ( ( BaseType_t ) 0 ) ) ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 2946 ); pxTemp = pxDelayedTaskList; pxDelayedTaskList = pxOverflowDelayedTaskList; pxOverflowDelayedTaskList = pxTemp; xNumOfOverflows++; prvResetNextTaskUnblockTime(); };
{
[v _pxTemp `*S931 ~T0 @X0 1 a ]
[e $ ! == ? == -> . *U _pxDelayedTaskList 0 `i -> -> -> 0 `i `uc `i : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> 0 `i 1356  ]
[e ( _Xprintf , (. :s 97C -> 2946 `i ]
[e :U 1356 ]
[e = _pxTemp _pxDelayedTaskList ]
[e = _pxDelayedTaskList _pxOverflowDelayedTaskList ]
[e = _pxOverflowDelayedTaskList _pxTemp ]
[e ++ _xNumOfOverflows -> -> 1 `i `Vc ]
[e ( _prvResetNextTaskUnblockTime ..  ]
}
"2947
[; ;Source/FreeRTOS/tasks.c: 2947:         }
}
[e $U 1357  ]
"2948
[; ;Source/FreeRTOS/tasks.c: 2948:         else
[e :U 1333 ]
"2949
[; ;Source/FreeRTOS/tasks.c: 2949:         {
{
"2951
[; ;Source/FreeRTOS/tasks.c: 2951:         }
}
[e :U 1357 ]
"2957
[; ;Source/FreeRTOS/tasks.c: 2957:         do { if( isr_cnt < 10 ){ const char* _s = ("xCon="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xConstTickCount >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xConstTickCount & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1360 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1361  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 98C ]
[e $U 1362  ]
[e :U 1363 ]
{
{
[e $U 1365  ]
[e :U 1366 ]
[e :U 1365 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1366  ]
[e :U 1367 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1362 ]
[e $ != -> *U __s `i -> 0 `i 1363  ]
[e :U 1364 ]
{
[e $U 1368  ]
[e :U 1369 ]
[e :U 1368 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1369  ]
[e :U 1370 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _xConstTickCount `ui -> 4 `i -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1371  ]
[e :U 1372 ]
[e :U 1371 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1372  ]
[e :U 1373 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> _xConstTickCount `ui -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1374  ]
[e :U 1375 ]
[e :U 1374 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1375  ]
[e :U 1376 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1377  ]
[e :U 1378 ]
[e :U 1377 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1378  ]
[e :U 1379 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1361 ]
}
[e :U 1359 ]
"2958
[; ;Source/FreeRTOS/tasks.c: 2958:         do { if( isr_cnt < 10 ){ const char* _s = ("xNex="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xNextTaskUnblockTime >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( xNextTaskUnblockTime & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1382 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1383  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 99C ]
[e $U 1384  ]
[e :U 1385 ]
{
{
[e $U 1387  ]
[e :U 1388 ]
[e :U 1387 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1388  ]
[e :U 1389 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1384 ]
[e $ != -> *U __s `i -> 0 `i 1385  ]
[e :U 1386 ]
{
[e $U 1390  ]
[e :U 1391 ]
[e :U 1390 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1391  ]
[e :U 1392 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _xNextTaskUnblockTime `ui -> 4 `i -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1393  ]
[e :U 1394 ]
[e :U 1393 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1394  ]
[e :U 1395 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> _xNextTaskUnblockTime `ui -> -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1396  ]
[e :U 1397 ]
[e :U 1396 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1397  ]
[e :U 1398 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1399  ]
[e :U 1400 ]
[e :U 1399 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1400  ]
[e :U 1401 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1383 ]
}
[e :U 1381 ]
"2959
[; ;Source/FreeRTOS/tasks.c: 2959:         if( xConstTickCount >= xNextTaskUnblockTime )
[e $ ! >= -> _xConstTickCount `ui -> _xNextTaskUnblockTime `ui 1402  ]
"2960
[; ;Source/FreeRTOS/tasks.c: 2960:         {
{
"2961
[; ;Source/FreeRTOS/tasks.c: 2961:             do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 4 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 4 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1405 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1406  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 100C ]
[e $U 1407  ]
[e :U 1408 ]
{
{
[e $U 1410  ]
[e :U 1411 ]
[e :U 1410 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1411  ]
[e :U 1412 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1407 ]
[e $ != -> *U __s `i -> 0 `i 1408  ]
[e :U 1409 ]
{
[e $U 1413  ]
[e :U 1414 ]
[e :U 1413 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1414  ]
[e :U 1415 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 4 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1416  ]
[e :U 1417 ]
[e :U 1416 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1417  ]
[e :U 1418 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1419  ]
[e :U 1420 ]
[e :U 1419 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1420  ]
[e :U 1421 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1422  ]
[e :U 1423 ]
[e :U 1422 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1423  ]
[e :U 1424 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1406 ]
}
[e :U 1404 ]
"2962
[; ;Source/FreeRTOS/tasks.c: 2962:             for( ; ; )
{
[e :U 1425 ]
"2963
[; ;Source/FreeRTOS/tasks.c: 2963:             {
{
"2964
[; ;Source/FreeRTOS/tasks.c: 2964:                 if( ( ( ( pxDelayedTaskList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? ( ( BaseType_t ) 1 ) : ( ( BaseType_t ) 0 ) ) != ( ( BaseType_t ) 0 ) )
[e $ ! != ? == -> . *U _pxDelayedTaskList 0 `i -> -> -> 0 `i `uc `i : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 1428  ]
"2965
[; ;Source/FreeRTOS/tasks.c: 2965:                 {
{
"2966
[; ;Source/FreeRTOS/tasks.c: 2966:                     do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 5 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 5 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1431 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1432  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 101C ]
[e $U 1433  ]
[e :U 1434 ]
{
{
[e $U 1436  ]
[e :U 1437 ]
[e :U 1436 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1437  ]
[e :U 1438 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1433 ]
[e $ != -> *U __s `i -> 0 `i 1434  ]
[e :U 1435 ]
{
[e $U 1439  ]
[e :U 1440 ]
[e :U 1439 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1440  ]
[e :U 1441 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 5 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1442  ]
[e :U 1443 ]
[e :U 1442 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1443  ]
[e :U 1444 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 5 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1445  ]
[e :U 1446 ]
[e :U 1445 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1446  ]
[e :U 1447 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1448  ]
[e :U 1449 ]
[e :U 1448 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1449  ]
[e :U 1450 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1432 ]
}
[e :U 1430 ]
"2970
[; ;Source/FreeRTOS/tasks.c: 2970:                     xNextTaskUnblockTime = ( TickType_t ) 0xffff;
[e = _xNextTaskUnblockTime -> -> 65535 `ui `us ]
"2971
[; ;Source/FreeRTOS/tasks.c: 2971:                     break;
[e $U 1426  ]
"2972
[; ;Source/FreeRTOS/tasks.c: 2972:                 }
}
[e $U 1451  ]
"2973
[; ;Source/FreeRTOS/tasks.c: 2973:                 else
[e :U 1428 ]
"2974
[; ;Source/FreeRTOS/tasks.c: 2974:                 {
{
"2975
[; ;Source/FreeRTOS/tasks.c: 2975:                     do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 6 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 6 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1454 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1455  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 102C ]
[e $U 1456  ]
[e :U 1457 ]
{
{
[e $U 1459  ]
[e :U 1460 ]
[e :U 1459 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1460  ]
[e :U 1461 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1456 ]
[e $ != -> *U __s `i -> 0 `i 1457  ]
[e :U 1458 ]
{
[e $U 1462  ]
[e :U 1463 ]
[e :U 1462 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1463  ]
[e :U 1464 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 6 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1465  ]
[e :U 1466 ]
[e :U 1465 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1466  ]
[e :U 1467 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 6 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1468  ]
[e :U 1469 ]
[e :U 1468 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1469  ]
[e :U 1470 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1471  ]
[e :U 1472 ]
[e :U 1471 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1472  ]
[e :U 1473 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1455 ]
}
[e :U 1453 ]
"2979
[; ;Source/FreeRTOS/tasks.c: 2979:                     pxTCB = ( ( &( ( pxDelayedTaskList )->xListEnd ) )->pxNext->pvOwner );
[e = _pxTCB -> . *U . *U &U . *U _pxDelayedTaskList 2 1 3 `*S936 ]
"2980
[; ;Source/FreeRTOS/tasks.c: 2980:                     xItemValue = ( ( &( pxTCB->xStateListItem ) )->xItemValue );
[e = _xItemValue . *U &U . *U _pxTCB 1 0 ]
"2982
[; ;Source/FreeRTOS/tasks.c: 2982:                     if( xConstTickCount < xItemValue )
[e $ ! < -> _xConstTickCount `ui -> _xItemValue `ui 1474  ]
"2983
[; ;Source/FreeRTOS/tasks.c: 2983:                     {
{
"2984
[; ;Source/FreeRTOS/tasks.c: 2984:                        do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 7 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 7 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1477 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1478  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 103C ]
[e $U 1479  ]
[e :U 1480 ]
{
{
[e $U 1482  ]
[e :U 1483 ]
[e :U 1482 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1483  ]
[e :U 1484 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1479 ]
[e $ != -> *U __s `i -> 0 `i 1480  ]
[e :U 1481 ]
{
[e $U 1485  ]
[e :U 1486 ]
[e :U 1485 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1486  ]
[e :U 1487 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 7 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1488  ]
[e :U 1489 ]
[e :U 1488 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1489  ]
[e :U 1490 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 7 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1491  ]
[e :U 1492 ]
[e :U 1491 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1492  ]
[e :U 1493 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1494  ]
[e :U 1495 ]
[e :U 1494 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1495  ]
[e :U 1496 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1478 ]
}
[e :U 1476 ]
"2989
[; ;Source/FreeRTOS/tasks.c: 2989:                         xNextTaskUnblockTime = xItemValue;
[e = _xNextTaskUnblockTime _xItemValue ]
"2990
[; ;Source/FreeRTOS/tasks.c: 2990:                         break;
[e $U 1426  ]
"2991
[; ;Source/FreeRTOS/tasks.c: 2991:                     }
}
[e $U 1497  ]
"2992
[; ;Source/FreeRTOS/tasks.c: 2992:                     else
[e :U 1474 ]
"2993
[; ;Source/FreeRTOS/tasks.c: 2993:                     {
{
"2995
[; ;Source/FreeRTOS/tasks.c: 2995:                     }
}
[e :U 1497 ]
"2998
[; ;Source/FreeRTOS/tasks.c: 2998:                     { List_t * const pxList = ( &( pxTCB->xStateListItem ) )->pvContainer; ( &( pxTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xStateListItem ) )->pxPrevious; ( &( pxTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xStateListItem ) )->pxPrevious; } ( &( pxTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7713 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 1 4 ]
[e = . *U . *U &U . *U _pxTCB 1 1 2 . *U &U . *U _pxTCB 1 2 ]
[e = . *U . *U &U . *U _pxTCB 1 2 1 . *U &U . *U _pxTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 1 1498  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 1 2 ]
}
[e :U 1498 ]
[e = . *U &U . *U _pxTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"3001
[; ;Source/FreeRTOS/tasks.c: 3001:                     if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != ((void*)0) )
[e $ ! != . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 1499  ]
"3002
[; ;Source/FreeRTOS/tasks.c: 3002:                     {
{
"3003
[; ;Source/FreeRTOS/tasks.c: 3003:                        do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 8 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 8 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1502 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1503  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 104C ]
[e $U 1504  ]
[e :U 1505 ]
{
{
[e $U 1507  ]
[e :U 1508 ]
[e :U 1507 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1508  ]
[e :U 1509 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1504 ]
[e $ != -> *U __s `i -> 0 `i 1505  ]
[e :U 1506 ]
{
[e $U 1510  ]
[e :U 1511 ]
[e :U 1510 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1511  ]
[e :U 1512 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 8 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1513  ]
[e :U 1514 ]
[e :U 1513 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1514  ]
[e :U 1515 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 8 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1516  ]
[e :U 1517 ]
[e :U 1516 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1517  ]
[e :U 1518 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1519  ]
[e :U 1520 ]
[e :U 1519 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1520  ]
[e :U 1521 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1503 ]
}
[e :U 1501 ]
"3004
[; ;Source/FreeRTOS/tasks.c: 3004:                         { List_t * const pxList = ( &( pxTCB->xEventListItem ) )->pvContainer; ( &( pxTCB->xEventListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xEventListItem ) )->pxPrevious; ( &( pxTCB->xEventListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xEventListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xEventListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xEventListItem ) )->pxPrevious; } ( &( pxTCB->xEventListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7716 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 2 4 ]
[e = . *U . *U &U . *U _pxTCB 2 1 2 . *U &U . *U _pxTCB 2 2 ]
[e = . *U . *U &U . *U _pxTCB 2 2 1 . *U &U . *U _pxTCB 2 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 2 1522  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 2 2 ]
}
[e :U 1522 ]
[e = . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"3005
[; ;Source/FreeRTOS/tasks.c: 3005:                     }
}
[e $U 1523  ]
"3006
[; ;Source/FreeRTOS/tasks.c: 3006:                     else
[e :U 1499 ]
"3007
[; ;Source/FreeRTOS/tasks.c: 3007:                     {
{
"3009
[; ;Source/FreeRTOS/tasks.c: 3009:                     }
}
[e :U 1523 ]
"3012
[; ;Source/FreeRTOS/tasks.c: 3012:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 1524  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 1524 ]
}
{
[v F7718 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"3016
[; ;Source/FreeRTOS/tasks.c: 3016:                     {
{
"3024
[; ;Source/FreeRTOS/tasks.c: 3024:                         do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 9 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 9 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1527 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1528  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 105C ]
[e $U 1529  ]
[e :U 1530 ]
{
{
[e $U 1532  ]
[e :U 1533 ]
[e :U 1532 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1533  ]
[e :U 1534 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1529 ]
[e $ != -> *U __s `i -> 0 `i 1530  ]
[e :U 1531 ]
{
[e $U 1535  ]
[e :U 1536 ]
[e :U 1535 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1536  ]
[e :U 1537 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 9 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1538  ]
[e :U 1539 ]
[e :U 1538 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1539  ]
[e :U 1540 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 9 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1541  ]
[e :U 1542 ]
[e :U 1541 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1542  ]
[e :U 1543 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1544  ]
[e :U 1545 ]
[e :U 1544 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1545  ]
[e :U 1546 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1528 ]
}
[e :U 1526 ]
"3025
[; ;Source/FreeRTOS/tasks.c: 3025:                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
[e $ ! > -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 1547  ]
"3026
[; ;Source/FreeRTOS/tasks.c: 3026:                         {
{
"3027
[; ;Source/FreeRTOS/tasks.c: 3027:                             xSwitchRequired = ( ( BaseType_t ) 1 );
[e = _xSwitchRequired -> -> 1 `i `c ]
"3028
[; ;Source/FreeRTOS/tasks.c: 3028:                         }
}
[e $U 1548  ]
"3029
[; ;Source/FreeRTOS/tasks.c: 3029:                         else
[e :U 1547 ]
"3030
[; ;Source/FreeRTOS/tasks.c: 3030:                         {
{
"3032
[; ;Source/FreeRTOS/tasks.c: 3032:                         }
}
[e :U 1548 ]
"3033
[; ;Source/FreeRTOS/tasks.c: 3033:                     }
}
"3035
[; ;Source/FreeRTOS/tasks.c: 3035:                 }
}
[e :U 1451 ]
"3036
[; ;Source/FreeRTOS/tasks.c: 3036:             }
}
[e $U 1425  ]
[e :U 1426 ]
}
"3037
[; ;Source/FreeRTOS/tasks.c: 3037:         }
}
[e :U 1402 ]
"3043
[; ;Source/FreeRTOS/tasks.c: 3043:         {
{
"3044
[; ;Source/FreeRTOS/tasks.c: 3044:             do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 10 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 10 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1551 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1552  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 106C ]
[e $U 1553  ]
[e :U 1554 ]
{
{
[e $U 1556  ]
[e :U 1557 ]
[e :U 1556 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1557  ]
[e :U 1558 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1553 ]
[e $ != -> *U __s `i -> 0 `i 1554  ]
[e :U 1555 ]
{
[e $U 1559  ]
[e :U 1560 ]
[e :U 1559 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1560  ]
[e :U 1561 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 10 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1562  ]
[e :U 1563 ]
[e :U 1562 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1563  ]
[e :U 1564 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 10 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1565  ]
[e :U 1566 ]
[e :U 1565 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1566  ]
[e :U 1567 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1568  ]
[e :U 1569 ]
[e :U 1568 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1569  ]
[e :U 1570 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1552 ]
}
[e :U 1550 ]
"3045
[; ;Source/FreeRTOS/tasks.c: 3045:             if( ( ( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) )->uxNumberOfItems ) > ( UBaseType_t ) 1 )
[e $ ! > -> . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxCurrentTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 `i -> -> -> 1 `i `uc `i 1571  ]
"3046
[; ;Source/FreeRTOS/tasks.c: 3046:             {
{
"3047
[; ;Source/FreeRTOS/tasks.c: 3047:                 do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 11 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 11 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1574 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1575  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 107C ]
[e $U 1576  ]
[e :U 1577 ]
{
{
[e $U 1579  ]
[e :U 1580 ]
[e :U 1579 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1580  ]
[e :U 1581 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1576 ]
[e $ != -> *U __s `i -> 0 `i 1577  ]
[e :U 1578 ]
{
[e $U 1582  ]
[e :U 1583 ]
[e :U 1582 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1583  ]
[e :U 1584 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 11 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1585  ]
[e :U 1586 ]
[e :U 1585 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1586  ]
[e :U 1587 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 11 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1588  ]
[e :U 1589 ]
[e :U 1588 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1589  ]
[e :U 1590 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1591  ]
[e :U 1592 ]
[e :U 1591 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1592  ]
[e :U 1593 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1575 ]
}
[e :U 1573 ]
"3048
[; ;Source/FreeRTOS/tasks.c: 3048:                 xSwitchRequired = ( ( BaseType_t ) 1 );
[e = _xSwitchRequired -> -> 1 `i `c ]
"3049
[; ;Source/FreeRTOS/tasks.c: 3049:             }
}
[e $U 1594  ]
"3050
[; ;Source/FreeRTOS/tasks.c: 3050:             else
[e :U 1571 ]
"3051
[; ;Source/FreeRTOS/tasks.c: 3051:             {
{
"3053
[; ;Source/FreeRTOS/tasks.c: 3053:             }
}
[e :U 1594 ]
"3054
[; ;Source/FreeRTOS/tasks.c: 3054:         }
}
"3073
[; ;Source/FreeRTOS/tasks.c: 3073:         {
{
"3074
[; ;Source/FreeRTOS/tasks.c: 3074:             do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 12 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 12 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1597 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1598  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 108C ]
[e $U 1599  ]
[e :U 1600 ]
{
{
[e $U 1602  ]
[e :U 1603 ]
[e :U 1602 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1603  ]
[e :U 1604 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1599 ]
[e $ != -> *U __s `i -> 0 `i 1600  ]
[e :U 1601 ]
{
[e $U 1605  ]
[e :U 1606 ]
[e :U 1605 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1606  ]
[e :U 1607 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 12 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1608  ]
[e :U 1609 ]
[e :U 1608 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1609  ]
[e :U 1610 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 12 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1611  ]
[e :U 1612 ]
[e :U 1611 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1612  ]
[e :U 1613 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1614  ]
[e :U 1615 ]
[e :U 1614 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1615  ]
[e :U 1616 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1598 ]
}
[e :U 1596 ]
"3075
[; ;Source/FreeRTOS/tasks.c: 3075:             if( xYieldPending != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xYieldPending `i -> -> -> 0 `i `c `i 1617  ]
"3076
[; ;Source/FreeRTOS/tasks.c: 3076:             {
{
"3077
[; ;Source/FreeRTOS/tasks.c: 3077:                 do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 13 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 13 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1620 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1621  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 109C ]
[e $U 1622  ]
[e :U 1623 ]
{
{
[e $U 1625  ]
[e :U 1626 ]
[e :U 1625 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1626  ]
[e :U 1627 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1622 ]
[e $ != -> *U __s `i -> 0 `i 1623  ]
[e :U 1624 ]
{
[e $U 1628  ]
[e :U 1629 ]
[e :U 1628 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1629  ]
[e :U 1630 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 13 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1631  ]
[e :U 1632 ]
[e :U 1631 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1632  ]
[e :U 1633 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 13 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1634  ]
[e :U 1635 ]
[e :U 1634 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1635  ]
[e :U 1636 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1637  ]
[e :U 1638 ]
[e :U 1637 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1638  ]
[e :U 1639 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1621 ]
}
[e :U 1619 ]
"3078
[; ;Source/FreeRTOS/tasks.c: 3078:                 xSwitchRequired = ( ( BaseType_t ) 1 );
[e = _xSwitchRequired -> -> 1 `i `c ]
"3079
[; ;Source/FreeRTOS/tasks.c: 3079:             }
}
[e $U 1640  ]
"3080
[; ;Source/FreeRTOS/tasks.c: 3080:             else
[e :U 1617 ]
"3081
[; ;Source/FreeRTOS/tasks.c: 3081:             {
{
"3083
[; ;Source/FreeRTOS/tasks.c: 3083:             }
}
[e :U 1640 ]
"3084
[; ;Source/FreeRTOS/tasks.c: 3084:         }
}
"3086
[; ;Source/FreeRTOS/tasks.c: 3086:     }
}
[e $U 1641  ]
"3087
[; ;Source/FreeRTOS/tasks.c: 3087:     else
[e :U 1282 ]
"3088
[; ;Source/FreeRTOS/tasks.c: 3088:     {
{
"3089
[; ;Source/FreeRTOS/tasks.c: 3089:         ++xPendedTicks;
[e =+ _xPendedTicks -> -> 1 `i `Vus ]
"3097
[; ;Source/FreeRTOS/tasks.c: 3097:     }
}
[e :U 1641 ]
"3098
[; ;Source/FreeRTOS/tasks.c: 3098:     do { if( isr_cnt < 10 ){ const char* _s = ("TIT="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 0xff >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 0xff & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1644 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1645  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 110C ]
[e $U 1646  ]
[e :U 1647 ]
{
{
[e $U 1649  ]
[e :U 1650 ]
[e :U 1649 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1650  ]
[e :U 1651 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1646 ]
[e $ != -> *U __s `i -> 0 `i 1647  ]
[e :U 1648 ]
{
[e $U 1652  ]
[e :U 1653 ]
[e :U 1652 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1653  ]
[e :U 1654 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 255 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1655  ]
[e :U 1656 ]
[e :U 1655 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1656  ]
[e :U 1657 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 255 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1658  ]
[e :U 1659 ]
[e :U 1658 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1659  ]
[e :U 1660 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1661  ]
[e :U 1662 ]
[e :U 1661 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1662  ]
[e :U 1663 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1645 ]
}
[e :U 1643 ]
"3099
[; ;Source/FreeRTOS/tasks.c: 3099:     return xSwitchRequired;
[e ) _xSwitchRequired ]
[e $UE 1259  ]
"3100
[; ;Source/FreeRTOS/tasks.c: 3100: }
[e :UE 1259 ]
}
"3215
[; ;Source/FreeRTOS/tasks.c: 3215: void vTaskSwitchContext( void )
[v _vTaskSwitchContext `(v ~T0 @X0 1 ef ]
"3216
[; ;Source/FreeRTOS/tasks.c: 3216: {
{
[e :U _vTaskSwitchContext ]
[f ]
"3217
[; ;Source/FreeRTOS/tasks.c: 3217:     do { if( isr_cnt < 10 ){ const char* _s = ("vTaskSwitchContext="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 1 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 1 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1667 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1668  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 111C ]
[e $U 1669  ]
[e :U 1670 ]
{
{
[e $U 1672  ]
[e :U 1673 ]
[e :U 1672 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1673  ]
[e :U 1674 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1669 ]
[e $ != -> *U __s `i -> 0 `i 1670  ]
[e :U 1671 ]
{
[e $U 1675  ]
[e :U 1676 ]
[e :U 1675 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1676  ]
[e :U 1677 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 1 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1678  ]
[e :U 1679 ]
[e :U 1678 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1679  ]
[e :U 1680 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 1 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1681  ]
[e :U 1682 ]
[e :U 1681 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1682  ]
[e :U 1683 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1684  ]
[e :U 1685 ]
[e :U 1684 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1685  ]
[e :U 1686 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1668 ]
}
[e :U 1666 ]
"3218
[; ;Source/FreeRTOS/tasks.c: 3218:     do { if( isr_cnt < 10 ){ const char* _s = ("pxCurrentTCB0="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 28 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 24 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 20 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 16 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1689 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1690  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 112C ]
[e $U 1691  ]
[e :U 1692 ]
{
{
[e $U 1694  ]
[e :U 1695 ]
[e :U 1694 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1695  ]
[e :U 1696 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1691 ]
[e $ != -> *U __s `i -> 0 `i 1692  ]
[e :U 1693 ]
{
[e $U 1697  ]
[e :U 1698 ]
[e :U 1697 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1698  ]
[e :U 1699 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 28 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1700  ]
[e :U 1701 ]
[e :U 1700 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1701  ]
[e :U 1702 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 24 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1703  ]
[e :U 1704 ]
[e :U 1703 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1704  ]
[e :U 1705 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 20 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1706  ]
[e :U 1707 ]
[e :U 1706 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1707  ]
[e :U 1708 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 16 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1709  ]
[e :U 1710 ]
[e :U 1709 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1710  ]
[e :U 1711 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 12 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1712  ]
[e :U 1713 ]
[e :U 1712 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1713  ]
[e :U 1714 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 8 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1715  ]
[e :U 1716 ]
[e :U 1715 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1716  ]
[e :U 1717 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 4 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1718  ]
[e :U 1719 ]
[e :U 1718 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1719  ]
[e :U 1720 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1721  ]
[e :U 1722 ]
[e :U 1721 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1722  ]
[e :U 1723 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1724  ]
[e :U 1725 ]
[e :U 1724 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1725  ]
[e :U 1726 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1690 ]
}
[e :U 1688 ]
"3220
[; ;Source/FreeRTOS/tasks.c: 3220:     if( uxSchedulerSuspended != ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! != -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 1727  ]
"3221
[; ;Source/FreeRTOS/tasks.c: 3221:     {
{
"3222
[; ;Source/FreeRTOS/tasks.c: 3222:             do { if( isr_cnt < 10 ){ const char* _s = ("TSC="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 2 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 2 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1730 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1731  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 113C ]
[e $U 1732  ]
[e :U 1733 ]
{
{
[e $U 1735  ]
[e :U 1736 ]
[e :U 1735 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1736  ]
[e :U 1737 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1732 ]
[e $ != -> *U __s `i -> 0 `i 1733  ]
[e :U 1734 ]
{
[e $U 1738  ]
[e :U 1739 ]
[e :U 1738 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1739  ]
[e :U 1740 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 2 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1741  ]
[e :U 1742 ]
[e :U 1741 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1742  ]
[e :U 1743 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 2 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1744  ]
[e :U 1745 ]
[e :U 1744 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1745  ]
[e :U 1746 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1747  ]
[e :U 1748 ]
[e :U 1747 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1748  ]
[e :U 1749 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1731 ]
}
[e :U 1729 ]
"3224
[; ;Source/FreeRTOS/tasks.c: 3224:         xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"3225
[; ;Source/FreeRTOS/tasks.c: 3225:     }
}
[e $U 1750  ]
"3226
[; ;Source/FreeRTOS/tasks.c: 3226:     else
[e :U 1727 ]
"3227
[; ;Source/FreeRTOS/tasks.c: 3227:     {
{
"3228
[; ;Source/FreeRTOS/tasks.c: 3228:             do { if( isr_cnt < 10 ){ const char* _s = ("TSC="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 3 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 3 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1753 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1754  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 114C ]
[e $U 1755  ]
[e :U 1756 ]
{
{
[e $U 1758  ]
[e :U 1759 ]
[e :U 1758 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1759  ]
[e :U 1760 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1755 ]
[e $ != -> *U __s `i -> 0 `i 1756  ]
[e :U 1757 ]
{
[e $U 1761  ]
[e :U 1762 ]
[e :U 1761 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1762  ]
[e :U 1763 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 3 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1764  ]
[e :U 1765 ]
[e :U 1764 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1765  ]
[e :U 1766 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 3 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1767  ]
[e :U 1768 ]
[e :U 1767 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1768  ]
[e :U 1769 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1770  ]
[e :U 1771 ]
[e :U 1770 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1771  ]
[e :U 1772 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1754 ]
}
[e :U 1752 ]
"3229
[; ;Source/FreeRTOS/tasks.c: 3229:         xYieldPending = ( ( BaseType_t ) 0 );
[e = _xYieldPending -> -> 0 `i `c ]
"3264
[; ;Source/FreeRTOS/tasks.c: 3264:             do { if( isr_cnt < 10 ){ const char* _s = ("TSC="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 6 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 6 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1775 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1776  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 115C ]
[e $U 1777  ]
[e :U 1778 ]
{
{
[e $U 1780  ]
[e :U 1781 ]
[e :U 1780 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1781  ]
[e :U 1782 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1777 ]
[e $ != -> *U __s `i -> 0 `i 1778  ]
[e :U 1779 ]
{
[e $U 1783  ]
[e :U 1784 ]
[e :U 1783 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1784  ]
[e :U 1785 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 6 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1786  ]
[e :U 1787 ]
[e :U 1786 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1787  ]
[e :U 1788 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 6 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1789  ]
[e :U 1790 ]
[e :U 1789 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1790  ]
[e :U 1791 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1792  ]
[e :U 1793 ]
[e :U 1792 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1793  ]
[e :U 1794 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1776 ]
}
[e :U 1774 ]
"3265
[; ;Source/FreeRTOS/tasks.c: 3265:             do { if( isr_cnt < 10 ){ const char* _s = ("pxCurrentTCB0="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 28 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 24 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 20 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 16 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxReadyTasksLists[2].pxIndex->pvOwner & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1797 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1798  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 116C ]
[e $U 1799  ]
[e :U 1800 ]
{
{
[e $U 1802  ]
[e :U 1803 ]
[e :U 1802 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1803  ]
[e :U 1804 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1799 ]
[e $ != -> *U __s `i -> 0 `i 1800  ]
[e :U 1801 ]
{
[e $U 1805  ]
[e :U 1806 ]
[e :U 1805 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1806  ]
[e :U 1807 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 28 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1808  ]
[e :U 1809 ]
[e :U 1808 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1809  ]
[e :U 1810 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 24 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1811  ]
[e :U 1812 ]
[e :U 1811 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1812  ]
[e :U 1813 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 20 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1814  ]
[e :U 1815 ]
[e :U 1814 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1815  ]
[e :U 1816 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 16 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1817  ]
[e :U 1818 ]
[e :U 1817 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1818  ]
[e :U 1819 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 12 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1820  ]
[e :U 1821 ]
[e :U 1820 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1821  ]
[e :U 1822 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 8 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1823  ]
[e :U 1824 ]
[e :U 1823 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1824  ]
[e :U 1825 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> 4 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1826  ]
[e :U 1827 ]
[e :U 1826 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1827  ]
[e :U 1828 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> . *U . *U + &U _pxReadyTasksLists * -> -> -> 2 `i `ui `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 3 `ul -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1829  ]
[e :U 1830 ]
[e :U 1829 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1830  ]
[e :U 1831 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1832  ]
[e :U 1833 ]
[e :U 1832 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1833  ]
[e :U 1834 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1798 ]
}
[e :U 1796 ]
"3277
[; ;Source/FreeRTOS/tasks.c: 3277:         do { if( isr_cnt < 10 ){ const char* _s = ("TSC="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 7 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 7 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1837 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1838  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 117C ]
[e $U 1839  ]
[e :U 1840 ]
{
{
[e $U 1842  ]
[e :U 1843 ]
[e :U 1842 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1843  ]
[e :U 1844 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1839 ]
[e $ != -> *U __s `i -> 0 `i 1840  ]
[e :U 1841 ]
{
[e $U 1845  ]
[e :U 1846 ]
[e :U 1845 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1846  ]
[e :U 1847 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 7 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1848  ]
[e :U 1849 ]
[e :U 1848 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1849  ]
[e :U 1850 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 7 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1851  ]
[e :U 1852 ]
[e :U 1851 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1852  ]
[e :U 1853 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1854  ]
[e :U 1855 ]
[e :U 1854 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1855  ]
[e :U 1856 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1838 ]
}
[e :U 1836 ]
"3278
[; ;Source/FreeRTOS/tasks.c: 3278:         { UBaseType_t uxTopPriority = uxTopReadyPriority; while( ( ( ( &( pxReadyTasksLists[ uxTopPriority ] ) )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? ( ( BaseType_t ) 1 ) : ( ( BaseType_t ) 0 ) ) ) { if( ( uxTopPriority ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3278 ); --uxTopPriority; } do { if( isr_cnt < 10 ){ const char* _s = ("uTPrio="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( uxTopPriority >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( uxTopPriority & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0); do { if( isr_cnt < 10 ){ const char* _s = ("pxCurrentTCB4="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 28 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 24 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 20 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 16 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0); { List_t * const pxConstList = ( &( pxReadyTasksLists[ uxTopPriority ] ) ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxCurrentTCB ) = ( pxConstList )->pxIndex->pvOwner; }; uxTopReadyPriority = uxTopPriority; };
{
[v _uxTopPriority `uc ~T0 @X0 1 a ]
[e = _uxTopPriority _uxTopReadyPriority ]
[e $U 1857  ]
[e :U 1858 ]
{
[e $ ! == -> _uxTopPriority `i -> 0 `i 1860  ]
[e ( _Xprintf , (. :s 118C -> 3278 `i ]
[e :U 1860 ]
[e =- _uxTopPriority -> -> 1 `i `uc ]
}
[e :U 1857 ]
[e $ != ? == -> . *U &U *U + &U _pxReadyTasksLists * -> _uxTopPriority `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 `i -> -> -> 0 `i `uc `i : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> 0 `i 1858  ]
[e :U 1859 ]
[e :U 1863 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1864  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 119C ]
[e $U 1865  ]
[e :U 1866 ]
{
{
[e $U 1868  ]
[e :U 1869 ]
[e :U 1868 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1869  ]
[e :U 1870 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1865 ]
[e $ != -> *U __s `i -> 0 `i 1866  ]
[e :U 1867 ]
{
[e $U 1871  ]
[e :U 1872 ]
[e :U 1871 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1872  ]
[e :U 1873 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> _uxTopPriority `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1874  ]
[e :U 1875 ]
[e :U 1874 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1875  ]
[e :U 1876 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> _uxTopPriority `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1877  ]
[e :U 1878 ]
[e :U 1877 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1878  ]
[e :U 1879 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1880  ]
[e :U 1881 ]
[e :U 1880 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1881  ]
[e :U 1882 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1864 ]
}
[e :U 1862 ]
[e :U 1885 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1886  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 120C ]
[e $U 1887  ]
[e :U 1888 ]
{
{
[e $U 1890  ]
[e :U 1891 ]
[e :U 1890 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1891  ]
[e :U 1892 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1887 ]
[e $ != -> *U __s `i -> 0 `i 1888  ]
[e :U 1889 ]
{
[e $U 1893  ]
[e :U 1894 ]
[e :U 1893 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1894  ]
[e :U 1895 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 28 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1896  ]
[e :U 1897 ]
[e :U 1896 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1897  ]
[e :U 1898 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 24 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1899  ]
[e :U 1900 ]
[e :U 1899 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1900  ]
[e :U 1901 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 20 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1902  ]
[e :U 1903 ]
[e :U 1902 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1903  ]
[e :U 1904 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 16 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1905  ]
[e :U 1906 ]
[e :U 1905 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1906  ]
[e :U 1907 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 12 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1908  ]
[e :U 1909 ]
[e :U 1908 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1909  ]
[e :U 1910 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 8 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1911  ]
[e :U 1912 ]
[e :U 1911 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1912  ]
[e :U 1913 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 4 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1914  ]
[e :U 1915 ]
[e :U 1914 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1915  ]
[e :U 1916 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> _pxCurrentTCB `ul -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1917  ]
[e :U 1918 ]
[e :U 1917 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1918  ]
[e :U 1919 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1920  ]
[e :U 1921 ]
[e :U 1920 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1921  ]
[e :U 1922 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1886 ]
}
[e :U 1884 ]
{
[v F7737 `*S931 ~T0 @X0 1 t ]
[v _pxConstList `C*S931 ~T0 @X0 1 a ]
[e = _pxConstList &U *U + &U _pxReadyTasksLists * -> _uxTopPriority `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e = . *U _pxConstList 1 . *U . *U _pxConstList 1 1 ]
[e $ ! == -> . *U _pxConstList 1 `*v -> &U . *U _pxConstList 2 `*v 1923  ]
{
[e = . *U _pxConstList 1 . *U . *U _pxConstList 1 1 ]
}
[e :U 1923 ]
[e = _pxCurrentTCB -> . *U . *U _pxConstList 1 3 `*S936 ]
}
[e = _uxTopReadyPriority _uxTopPriority ]
}
"3279
[; ;Source/FreeRTOS/tasks.c: 3279:         do { if( isr_cnt < 10 ){ const char* _s = ("pxCurrentTCB1="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 28 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 24 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 20 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 16 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 12 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 8 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( (uint32_t)pxCurrentTCB & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1926 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1927  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 121C ]
[e $U 1928  ]
[e :U 1929 ]
{
{
[e $U 1931  ]
[e :U 1932 ]
[e :U 1931 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1932  ]
[e :U 1933 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1928 ]
[e $ != -> *U __s `i -> 0 `i 1929  ]
[e :U 1930 ]
{
[e $U 1934  ]
[e :U 1935 ]
[e :U 1934 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1935  ]
[e :U 1936 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 28 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1937  ]
[e :U 1938 ]
[e :U 1937 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1938  ]
[e :U 1939 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 24 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1940  ]
[e :U 1941 ]
[e :U 1940 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1941  ]
[e :U 1942 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 20 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1943  ]
[e :U 1944 ]
[e :U 1943 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1944  ]
[e :U 1945 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 16 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1946  ]
[e :U 1947 ]
[e :U 1946 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1947  ]
[e :U 1948 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 12 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1949  ]
[e :U 1950 ]
[e :U 1949 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1950  ]
[e :U 1951 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 8 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1952  ]
[e :U 1953 ]
[e :U 1952 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1953  ]
[e :U 1954 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & >> -> _pxCurrentTCB `ul -> 4 `i -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1955  ]
[e :U 1956 ]
[e :U 1955 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1956  ]
[e :U 1957 ]
[e = _TXREG2 -> *U + &U _ConvC * -> & -> _pxCurrentTCB `ul -> -> -> 15 `i `l `ul `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1958  ]
[e :U 1959 ]
[e :U 1958 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1959  ]
[e :U 1960 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1961  ]
[e :U 1962 ]
[e :U 1961 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1962  ]
[e :U 1963 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1927 ]
}
[e :U 1925 ]
"3296
[; ;Source/FreeRTOS/tasks.c: 3296:     }
}
[e :U 1750 ]
"3297
[; ;Source/FreeRTOS/tasks.c: 3297:     do { if( isr_cnt < 10 ){ const char* _s = ("TSC="); while (*_s) { { while (!TXSTA2bits.TRMT); TXREG2 = (*_s); }; _s++; } { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 10 >> 4 ) & 0x0f ]); }; { while (!TXSTA2bits.TRMT); TXREG2 = (ConvC[( 10 & 0x0f)]); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\r'); }; { while (!TXSTA2bits.TRMT); TXREG2 = ('\n'); }; } } while (0);
[e :U 1966 ]
{
[e $ ! < -> _isr_cnt `i -> 10 `i 1967  ]
{
[v __s `*Cuc ~T0 @X0 1 a ]
[e = __s :s 122C ]
[e $U 1968  ]
[e :U 1969 ]
{
{
[e $U 1971  ]
[e :U 1972 ]
[e :U 1971 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1972  ]
[e :U 1973 ]
[e = _TXREG2 -> *U __s `uc ]
}
[e ++ __s * -> -> 1 `i `x -> -> # *U __s `i `x ]
}
[e :U 1968 ]
[e $ != -> *U __s `i -> 0 `i 1969  ]
[e :U 1970 ]
{
[e $U 1974  ]
[e :U 1975 ]
[e :U 1974 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1975  ]
[e :U 1976 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & >> -> 10 `i -> 4 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1977  ]
[e :U 1978 ]
[e :U 1977 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1978  ]
[e :U 1979 ]
[e = _TXREG2 -> *U + &U _ConvC * -> -> & -> 10 `i -> 15 `i `ui `ux -> -> # *U &U _ConvC `ui `ux `uc ]
}
{
[e $U 1980  ]
[e :U 1981 ]
[e :U 1980 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1981  ]
[e :U 1982 ]
[e = _TXREG2 -> -> 13 `ui `uc ]
}
{
[e $U 1983  ]
[e :U 1984 ]
[e :U 1983 ]
[e $ ! != -> . . _TXSTA2bits 0 1 `i -> 0 `i 1984  ]
[e :U 1985 ]
[e = _TXREG2 -> -> 10 `ui `uc ]
}
}
[e :U 1967 ]
}
[e :U 1965 ]
"3298
[; ;Source/FreeRTOS/tasks.c: 3298: }
[e :UE 1664 ]
}
"3301
[; ;Source/FreeRTOS/tasks.c: 3301: void vTaskPlaceOnEventList( List_t * const pxEventList,
[v _vTaskPlaceOnEventList `(v ~T0 @X0 1 ef2`C*S931`Cus ]
"3303
[; ;Source/FreeRTOS/tasks.c: 3303: {
{
[e :U _vTaskPlaceOnEventList ]
[v F7743 `*S931 ~T0 @X0 1 t ]
"3301
[; ;Source/FreeRTOS/tasks.c: 3301: void vTaskPlaceOnEventList( List_t * const pxEventList,
[v _pxEventList `C*S931 ~T0 @X0 1 r1 ]
"3302
[; ;Source/FreeRTOS/tasks.c: 3302:                             const TickType_t xTicksToWait )
[v _xTicksToWait `Cus ~T0 @X0 1 r2 ]
"3303
[; ;Source/FreeRTOS/tasks.c: 3303: {
[f ]
"3304
[; ;Source/FreeRTOS/tasks.c: 3304:     if( ( pxEventList ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3304 );
[e $ ! == _pxEventList -> -> 0 `i `*S931 1987  ]
[e ( _Xprintf , (. :s 123C -> 3304 `i ]
[e :U 1987 ]
"3320
[; ;Source/FreeRTOS/tasks.c: 3320:     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
[e ( _vListInsert (2 , _pxEventList &U . *U _pxCurrentTCB 2 ]
"3322
[; ;Source/FreeRTOS/tasks.c: 3322:     prvAddCurrentTaskToDelayedList( xTicksToWait, ( ( BaseType_t ) 1 ) );
[e ( _prvAddCurrentTaskToDelayedList (2 , _xTicksToWait -> -> 1 `i `c ]
"3323
[; ;Source/FreeRTOS/tasks.c: 3323: }
[e :UE 1986 ]
}
"3326
[; ;Source/FreeRTOS/tasks.c: 3326: void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
[v _vTaskPlaceOnUnorderedEventList `(v ~T0 @X0 1 ef3`*S931`Cus`Cus ]
"3329
[; ;Source/FreeRTOS/tasks.c: 3329: {
{
[e :U _vTaskPlaceOnUnorderedEventList ]
"3326
[; ;Source/FreeRTOS/tasks.c: 3326: void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
[v _pxEventList `*S931 ~T0 @X0 1 r1 ]
"3327
[; ;Source/FreeRTOS/tasks.c: 3327:                                      const TickType_t xItemValue,
[v _xItemValue `Cus ~T0 @X0 1 r2 ]
"3328
[; ;Source/FreeRTOS/tasks.c: 3328:                                      const TickType_t xTicksToWait )
[v _xTicksToWait `Cus ~T0 @X0 1 r3 ]
"3329
[; ;Source/FreeRTOS/tasks.c: 3329: {
[f ]
"3330
[; ;Source/FreeRTOS/tasks.c: 3330:     if( ( pxEventList ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3330 );
[e $ ! == _pxEventList -> -> 0 `i `*S931 1989  ]
[e ( _Xprintf , (. :s 124C -> 3330 `i ]
[e :U 1989 ]
"3334
[; ;Source/FreeRTOS/tasks.c: 3334:     if( ( uxSchedulerSuspended != 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3334 );
[e $ ! == -> != -> _uxSchedulerSuspended `i -> 0 `i `i -> 0 `i 1990  ]
[e ( _Xprintf , (. :s 125C -> 3334 `i ]
[e :U 1990 ]
"3339
[; ;Source/FreeRTOS/tasks.c: 3339:     ( ( &( pxCurrentTCB->xEventListItem ) )->xItemValue = ( xItemValue | 0x8000U ) );
[e = . *U &U . *U _pxCurrentTCB 2 0 -> | -> _xItemValue `ui -> 32768 `ui `us ]
"3346
[; ;Source/FreeRTOS/tasks.c: 3346:     { ListItem_t * const pxIndex = ( pxEventList )->pxIndex; ; ; ( &( pxCurrentTCB->xEventListItem ) )->pxNext = pxIndex; ( &( pxCurrentTCB->xEventListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( pxCurrentTCB->xEventListItem ) ); pxIndex->pxPrevious = ( &( pxCurrentTCB->xEventListItem ) ); ( &( pxCurrentTCB->xEventListItem ) )->pvContainer = ( pxEventList ); ( ( pxEventList )->uxNumberOfItems )++; };
{
[v F7750 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U _pxEventList 1 ]
[e = . *U &U . *U _pxCurrentTCB 2 1 _pxIndex ]
[e = . *U &U . *U _pxCurrentTCB 2 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxCurrentTCB 2 ]
[e = . *U _pxIndex 2 &U . *U _pxCurrentTCB 2 ]
[e = . *U &U . *U _pxCurrentTCB 2 4 _pxEventList ]
[e ++ . *U _pxEventList 0 -> -> 1 `i `Vuc ]
}
"3348
[; ;Source/FreeRTOS/tasks.c: 3348:     prvAddCurrentTaskToDelayedList( xTicksToWait, ( ( BaseType_t ) 1 ) );
[e ( _prvAddCurrentTaskToDelayedList (2 , _xTicksToWait -> -> 1 `i `c ]
"3349
[; ;Source/FreeRTOS/tasks.c: 3349: }
[e :UE 1988 ]
}
"3387
[; ;Source/FreeRTOS/tasks.c: 3387: BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
[v _xTaskRemoveFromEventList `(c ~T0 @X0 1 ef1`C*CS931 ]
"3388
[; ;Source/FreeRTOS/tasks.c: 3388: {
{
[e :U _xTaskRemoveFromEventList ]
[v F7754 `*CS931 ~T0 @X0 1 t ]
"3387
[; ;Source/FreeRTOS/tasks.c: 3387: BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
[v _pxEventList `C*CS931 ~T0 @X0 1 r1 ]
"3388
[; ;Source/FreeRTOS/tasks.c: 3388: {
[f ]
"3389
[; ;Source/FreeRTOS/tasks.c: 3389:     TCB_t * pxUnblockedTCB;
[v _pxUnblockedTCB `*S936 ~T0 @X0 1 a ]
"3390
[; ;Source/FreeRTOS/tasks.c: 3390:     BaseType_t xReturn;
[v _xReturn `c ~T0 @X0 1 a ]
"3405
[; ;Source/FreeRTOS/tasks.c: 3405:     pxUnblockedTCB = ( ( &( ( pxEventList )->xListEnd ) )->pxNext->pvOwner );
[e = _pxUnblockedTCB -> . *U . *U &U . *U _pxEventList 2 1 3 `*S936 ]
"3406
[; ;Source/FreeRTOS/tasks.c: 3406:     if( ( pxUnblockedTCB ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3406 );
[e $ ! == _pxUnblockedTCB -> -> 0 `i `*S936 1992  ]
[e ( _Xprintf , (. :s 126C -> 3406 `i ]
[e :U 1992 ]
"3407
[; ;Source/FreeRTOS/tasks.c: 3407:     { List_t * const pxList = ( &( pxUnblockedTCB->xEventListItem ) )->pvContainer; ( &( pxUnblockedTCB->xEventListItem ) )->pxNext->pxPrevious = ( &( pxUnblockedTCB->xEventListItem ) )->pxPrevious; ( &( pxUnblockedTCB->xEventListItem ) )->pxPrevious->pxNext = ( &( pxUnblockedTCB->xEventListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxUnblockedTCB->xEventListItem ) ) ) { pxList->pxIndex = ( &( pxUnblockedTCB->xEventListItem ) )->pxPrevious; } ( &( pxUnblockedTCB->xEventListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7759 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxUnblockedTCB 2 4 ]
[e = . *U . *U &U . *U _pxUnblockedTCB 2 1 2 . *U &U . *U _pxUnblockedTCB 2 2 ]
[e = . *U . *U &U . *U _pxUnblockedTCB 2 2 1 . *U &U . *U _pxUnblockedTCB 2 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxUnblockedTCB 2 1993  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxUnblockedTCB 2 2 ]
}
[e :U 1993 ]
[e = . *U &U . *U _pxUnblockedTCB 2 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"3409
[; ;Source/FreeRTOS/tasks.c: 3409:     if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! == -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 1994  ]
"3410
[; ;Source/FreeRTOS/tasks.c: 3410:     {
{
"3411
[; ;Source/FreeRTOS/tasks.c: 3411:         { List_t * const pxList = ( &( pxUnblockedTCB->xStateListItem ) )->pvContainer; ( &( pxUnblockedTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxUnblockedTCB->xStateListItem ) )->pxPrevious; ( &( pxUnblockedTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxUnblockedTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxUnblockedTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxUnblockedTCB->xStateListItem ) )->pxPrevious; } ( &( pxUnblockedTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7761 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxUnblockedTCB 1 4 ]
[e = . *U . *U &U . *U _pxUnblockedTCB 1 1 2 . *U &U . *U _pxUnblockedTCB 1 2 ]
[e = . *U . *U &U . *U _pxUnblockedTCB 1 2 1 . *U &U . *U _pxUnblockedTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxUnblockedTCB 1 1995  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxUnblockedTCB 1 2 ]
}
[e :U 1995 ]
[e = . *U &U . *U _pxUnblockedTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"3412
[; ;Source/FreeRTOS/tasks.c: 3412:         ; { if( ( ( pxUnblockedTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxUnblockedTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxUnblockedTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxUnblockedTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxUnblockedTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxUnblockedTCB )->xStateListItem ) ); ( &( ( pxUnblockedTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxUnblockedTCB 3 `i -> _uxTopReadyPriority `i 1996  ]
{
[e = _uxTopReadyPriority . *U _pxUnblockedTCB 3 ]
}
[e :U 1996 ]
}
{
[v F7763 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxUnblockedTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxUnblockedTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxUnblockedTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxUnblockedTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxUnblockedTCB 1 ]
[e = . *U &U . *U _pxUnblockedTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxUnblockedTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxUnblockedTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"3427
[; ;Source/FreeRTOS/tasks.c: 3427:     }
}
[e $U 1997  ]
"3428
[; ;Source/FreeRTOS/tasks.c: 3428:     else
[e :U 1994 ]
"3429
[; ;Source/FreeRTOS/tasks.c: 3429:     {
{
"3432
[; ;Source/FreeRTOS/tasks.c: 3432:         { ListItem_t * const pxIndex = ( &( xPendingReadyList ) )->pxIndex; ; ; ( &( pxUnblockedTCB->xEventListItem ) )->pxNext = pxIndex; ( &( pxUnblockedTCB->xEventListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( pxUnblockedTCB->xEventListItem ) ); pxIndex->pxPrevious = ( &( pxUnblockedTCB->xEventListItem ) ); ( &( pxUnblockedTCB->xEventListItem ) )->pvContainer = ( &( xPendingReadyList ) ); ( ( &( xPendingReadyList ) )->uxNumberOfItems )++; };
{
[v F7765 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U _xPendingReadyList 1 ]
[e = . *U &U . *U _pxUnblockedTCB 2 1 _pxIndex ]
[e = . *U &U . *U _pxUnblockedTCB 2 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxUnblockedTCB 2 ]
[e = . *U _pxIndex 2 &U . *U _pxUnblockedTCB 2 ]
[e = . *U &U . *U _pxUnblockedTCB 2 4 &U _xPendingReadyList ]
[e ++ . *U &U _xPendingReadyList 0 -> -> 1 `i `Vuc ]
}
"3433
[; ;Source/FreeRTOS/tasks.c: 3433:     }
}
[e :U 1997 ]
"3435
[; ;Source/FreeRTOS/tasks.c: 3435:     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
[e $ ! > -> . *U _pxUnblockedTCB 3 `i -> . *U _pxCurrentTCB 3 `i 1998  ]
"3436
[; ;Source/FreeRTOS/tasks.c: 3436:     {
{
"3440
[; ;Source/FreeRTOS/tasks.c: 3440:         xReturn = ( ( BaseType_t ) 1 );
[e = _xReturn -> -> 1 `i `c ]
"3444
[; ;Source/FreeRTOS/tasks.c: 3444:         xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"3445
[; ;Source/FreeRTOS/tasks.c: 3445:     }
}
[e $U 1999  ]
"3446
[; ;Source/FreeRTOS/tasks.c: 3446:     else
[e :U 1998 ]
"3447
[; ;Source/FreeRTOS/tasks.c: 3447:     {
{
"3448
[; ;Source/FreeRTOS/tasks.c: 3448:         xReturn = ( ( BaseType_t ) 0 );
[e = _xReturn -> -> 0 `i `c ]
"3449
[; ;Source/FreeRTOS/tasks.c: 3449:     }
}
[e :U 1999 ]
"3451
[; ;Source/FreeRTOS/tasks.c: 3451:     return xReturn;
[e ) _xReturn ]
[e $UE 1991  ]
"3452
[; ;Source/FreeRTOS/tasks.c: 3452: }
[e :UE 1991 ]
}
"3455
[; ;Source/FreeRTOS/tasks.c: 3455: void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
[v _vTaskRemoveFromUnorderedEventList `(v ~T0 @X0 1 ef2`*S930`Cus ]
"3457
[; ;Source/FreeRTOS/tasks.c: 3457: {
{
[e :U _vTaskRemoveFromUnorderedEventList ]
"3455
[; ;Source/FreeRTOS/tasks.c: 3455: void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
[v _pxEventListItem `*S930 ~T0 @X0 1 r1 ]
"3456
[; ;Source/FreeRTOS/tasks.c: 3456:                                         const TickType_t xItemValue )
[v _xItemValue `Cus ~T0 @X0 1 r2 ]
"3457
[; ;Source/FreeRTOS/tasks.c: 3457: {
[f ]
"3458
[; ;Source/FreeRTOS/tasks.c: 3458:     TCB_t * pxUnblockedTCB;
[v _pxUnblockedTCB `*S936 ~T0 @X0 1 a ]
"3462
[; ;Source/FreeRTOS/tasks.c: 3462:     if( ( uxSchedulerSuspended != ( ( BaseType_t ) 0 ) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3462 );
[e $ ! == -> != -> _uxSchedulerSuspended `i -> -> -> 0 `i `c `i `i -> 0 `i 2001  ]
[e ( _Xprintf , (. :s 127C -> 3462 `i ]
[e :U 2001 ]
"3465
[; ;Source/FreeRTOS/tasks.c: 3465:     ( ( pxEventListItem )->xItemValue = ( xItemValue | 0x8000U ) );
[e = . *U _pxEventListItem 0 -> | -> _xItemValue `ui -> 32768 `ui `us ]
"3469
[; ;Source/FreeRTOS/tasks.c: 3469:     pxUnblockedTCB = ( ( pxEventListItem )->pvOwner );
[e = _pxUnblockedTCB -> . *U _pxEventListItem 3 `*S936 ]
"3470
[; ;Source/FreeRTOS/tasks.c: 3470:     if( ( pxUnblockedTCB ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3470 );
[e $ ! == _pxUnblockedTCB -> -> 0 `i `*S936 2002  ]
[e ( _Xprintf , (. :s 128C -> 3470 `i ]
[e :U 2002 ]
"3471
[; ;Source/FreeRTOS/tasks.c: 3471:     { List_t * const pxList = ( pxEventListItem )->pvContainer; ( pxEventListItem )->pxNext->pxPrevious = ( pxEventListItem )->pxPrevious; ( pxEventListItem )->pxPrevious->pxNext = ( pxEventListItem )->pxNext; if( pxList->pxIndex == ( pxEventListItem ) ) { pxList->pxIndex = ( pxEventListItem )->pxPrevious; } ( pxEventListItem )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7771 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U _pxEventListItem 4 ]
[e = . *U . *U _pxEventListItem 1 2 . *U _pxEventListItem 2 ]
[e = . *U . *U _pxEventListItem 2 1 . *U _pxEventListItem 1 ]
[e $ ! == . *U _pxList 1 _pxEventListItem 2003  ]
{
[e = . *U _pxList 1 . *U _pxEventListItem 2 ]
}
[e :U 2003 ]
[e = . *U _pxEventListItem 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"3490
[; ;Source/FreeRTOS/tasks.c: 3490:     { List_t * const pxList = ( &( pxUnblockedTCB->xStateListItem ) )->pvContainer; ( &( pxUnblockedTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxUnblockedTCB->xStateListItem ) )->pxPrevious; ( &( pxUnblockedTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxUnblockedTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxUnblockedTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxUnblockedTCB->xStateListItem ) )->pxPrevious; } ( &( pxUnblockedTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7773 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxUnblockedTCB 1 4 ]
[e = . *U . *U &U . *U _pxUnblockedTCB 1 1 2 . *U &U . *U _pxUnblockedTCB 1 2 ]
[e = . *U . *U &U . *U _pxUnblockedTCB 1 2 1 . *U &U . *U _pxUnblockedTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxUnblockedTCB 1 2004  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxUnblockedTCB 1 2 ]
}
[e :U 2004 ]
[e = . *U &U . *U _pxUnblockedTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"3491
[; ;Source/FreeRTOS/tasks.c: 3491:     ; { if( ( ( pxUnblockedTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxUnblockedTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxUnblockedTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxUnblockedTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxUnblockedTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxUnblockedTCB )->xStateListItem ) ); ( &( ( pxUnblockedTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxUnblockedTCB 3 `i -> _uxTopReadyPriority `i 2005  ]
{
[e = _uxTopReadyPriority . *U _pxUnblockedTCB 3 ]
}
[e :U 2005 ]
}
{
[v F7775 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxUnblockedTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxUnblockedTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxUnblockedTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxUnblockedTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxUnblockedTCB 1 ]
[e = . *U &U . *U _pxUnblockedTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxUnblockedTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxUnblockedTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"3493
[; ;Source/FreeRTOS/tasks.c: 3493:     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
[e $ ! > -> . *U _pxUnblockedTCB 3 `i -> . *U _pxCurrentTCB 3 `i 2006  ]
"3494
[; ;Source/FreeRTOS/tasks.c: 3494:     {
{
"3499
[; ;Source/FreeRTOS/tasks.c: 3499:         xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"3500
[; ;Source/FreeRTOS/tasks.c: 3500:     }
}
[e :U 2006 ]
"3501
[; ;Source/FreeRTOS/tasks.c: 3501: }
[e :UE 2000 ]
}
"3504
[; ;Source/FreeRTOS/tasks.c: 3504: void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
[v _vTaskSetTimeOutState `(v ~T0 @X0 1 ef1`C*S937 ]
"3505
[; ;Source/FreeRTOS/tasks.c: 3505: {
{
[e :U _vTaskSetTimeOutState ]
[v F7779 `*S937 ~T0 @X0 1 t ]
"3504
[; ;Source/FreeRTOS/tasks.c: 3504: void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
[v _pxTimeOut `C*S937 ~T0 @X0 1 r1 ]
"3505
[; ;Source/FreeRTOS/tasks.c: 3505: {
[f ]
"3506
[; ;Source/FreeRTOS/tasks.c: 3506:     if( ( pxTimeOut ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3506 );
[e $ ! == _pxTimeOut -> -> 0 `i `*S937 2008  ]
[e ( _Xprintf , (. :s 129C -> 3506 `i ]
[e :U 2008 ]
"3507
[; ;Source/FreeRTOS/tasks.c: 3507:     POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"3508
[; ;Source/FreeRTOS/tasks.c: 3508:     {
{
"3509
[; ;Source/FreeRTOS/tasks.c: 3509:         pxTimeOut->xOverflowCount = xNumOfOverflows;
[e = . *U _pxTimeOut 0 _xNumOfOverflows ]
"3510
[; ;Source/FreeRTOS/tasks.c: 3510:         pxTimeOut->xTimeOnEntering = xTickCount;
[e = . *U _pxTimeOut 1 _xTickCount ]
"3511
[; ;Source/FreeRTOS/tasks.c: 3511:     }
}
"3512
[; ;Source/FreeRTOS/tasks.c: 3512:     __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2009  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2009 ]
"3513
[; ;Source/FreeRTOS/tasks.c: 3513: }
[e :UE 2007 ]
}
"3516
[; ;Source/FreeRTOS/tasks.c: 3516: void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
[v _vTaskInternalSetTimeOutState `(v ~T0 @X0 1 ef1`C*S937 ]
"3517
[; ;Source/FreeRTOS/tasks.c: 3517: {
{
[e :U _vTaskInternalSetTimeOutState ]
[v F7783 `*S937 ~T0 @X0 1 t ]
"3516
[; ;Source/FreeRTOS/tasks.c: 3516: void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
[v _pxTimeOut `C*S937 ~T0 @X0 1 r1 ]
"3517
[; ;Source/FreeRTOS/tasks.c: 3517: {
[f ]
"3519
[; ;Source/FreeRTOS/tasks.c: 3519:     pxTimeOut->xOverflowCount = xNumOfOverflows;
[e = . *U _pxTimeOut 0 _xNumOfOverflows ]
"3520
[; ;Source/FreeRTOS/tasks.c: 3520:     pxTimeOut->xTimeOnEntering = xTickCount;
[e = . *U _pxTimeOut 1 _xTickCount ]
"3521
[; ;Source/FreeRTOS/tasks.c: 3521: }
[e :UE 2010 ]
}
"3524
[; ;Source/FreeRTOS/tasks.c: 3524: BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
[v _xTaskCheckForTimeOut `(c ~T0 @X0 1 ef2`C*S937`C*us ]
"3526
[; ;Source/FreeRTOS/tasks.c: 3526: {
{
[e :U _xTaskCheckForTimeOut ]
[v F7788 `*S937 ~T0 @X0 1 t ]
"3524
[; ;Source/FreeRTOS/tasks.c: 3524: BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
[v _pxTimeOut `C*S937 ~T0 @X0 1 r1 ]
[v F7790 `*us ~T0 @X0 1 t ]
"3525
[; ;Source/FreeRTOS/tasks.c: 3525:                                  TickType_t * const pxTicksToWait )
[v _pxTicksToWait `C*us ~T0 @X0 1 r2 ]
"3526
[; ;Source/FreeRTOS/tasks.c: 3526: {
[f ]
"3527
[; ;Source/FreeRTOS/tasks.c: 3527:     BaseType_t xReturn;
[v _xReturn `c ~T0 @X0 1 a ]
"3529
[; ;Source/FreeRTOS/tasks.c: 3529:     if( ( pxTimeOut ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3529 );
[e $ ! == _pxTimeOut -> -> 0 `i `*S937 2012  ]
[e ( _Xprintf , (. :s 130C -> 3529 `i ]
[e :U 2012 ]
"3530
[; ;Source/FreeRTOS/tasks.c: 3530:     if( ( pxTicksToWait ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 3530 );
[e $ ! == _pxTicksToWait -> -> 0 `i `*us 2013  ]
[e ( _Xprintf , (. :s 131C -> 3530 `i ]
[e :U 2013 ]
"3532
[; ;Source/FreeRTOS/tasks.c: 3532:     POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"3533
[; ;Source/FreeRTOS/tasks.c: 3533:     {
{
"3535
[; ;Source/FreeRTOS/tasks.c: 3535:         const TickType_t xConstTickCount = xTickCount;
[v _xConstTickCount `Cus ~T0 @X0 1 a ]
[e = _xConstTickCount _xTickCount ]
"3536
[; ;Source/FreeRTOS/tasks.c: 3536:         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
[v _xElapsedTime `Cus ~T0 @X0 1 a ]
[e = _xElapsedTime -> - -> _xConstTickCount `ui -> . *U _pxTimeOut 1 `ui `us ]
"3550
[; ;Source/FreeRTOS/tasks.c: 3550:             if( *pxTicksToWait == ( TickType_t ) 0xffff )
[e $ ! == -> *U _pxTicksToWait `ui -> -> -> 65535 `ui `us `ui 2014  ]
"3551
[; ;Source/FreeRTOS/tasks.c: 3551:             {
{
"3555
[; ;Source/FreeRTOS/tasks.c: 3555:                 xReturn = ( ( BaseType_t ) 0 );
[e = _xReturn -> -> 0 `i `c ]
"3556
[; ;Source/FreeRTOS/tasks.c: 3556:             }
}
[e $U 2015  ]
"3557
[; ;Source/FreeRTOS/tasks.c: 3557:             else
[e :U 2014 ]
"3560
[; ;Source/FreeRTOS/tasks.c: 3560:         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
[e $ ! && != -> _xNumOfOverflows `i -> . *U _pxTimeOut 0 `i >= -> _xConstTickCount `ui -> . *U _pxTimeOut 1 `ui 2016  ]
"3561
[; ;Source/FreeRTOS/tasks.c: 3561:         {
{
"3567
[; ;Source/FreeRTOS/tasks.c: 3567:             xReturn = ( ( BaseType_t ) 1 );
[e = _xReturn -> -> 1 `i `c ]
"3568
[; ;Source/FreeRTOS/tasks.c: 3568:             *pxTicksToWait = ( TickType_t ) 0;
[e = *U _pxTicksToWait -> -> 0 `i `us ]
"3569
[; ;Source/FreeRTOS/tasks.c: 3569:         }
}
[e $U 2017  ]
"3570
[; ;Source/FreeRTOS/tasks.c: 3570:         else if( xElapsedTime < *pxTicksToWait )
[e :U 2016 ]
[e $ ! < -> _xElapsedTime `ui -> *U _pxTicksToWait `ui 2018  ]
"3571
[; ;Source/FreeRTOS/tasks.c: 3571:         {
{
"3573
[; ;Source/FreeRTOS/tasks.c: 3573:             *pxTicksToWait -= xElapsedTime;
[e =- *U _pxTicksToWait -> _xElapsedTime `us ]
"3574
[; ;Source/FreeRTOS/tasks.c: 3574:             vTaskInternalSetTimeOutState( pxTimeOut );
[e ( _vTaskInternalSetTimeOutState (1 _pxTimeOut ]
"3575
[; ;Source/FreeRTOS/tasks.c: 3575:             xReturn = ( ( BaseType_t ) 0 );
[e = _xReturn -> -> 0 `i `c ]
"3576
[; ;Source/FreeRTOS/tasks.c: 3576:         }
}
[e $U 2019  ]
"3577
[; ;Source/FreeRTOS/tasks.c: 3577:         else
[e :U 2018 ]
"3578
[; ;Source/FreeRTOS/tasks.c: 3578:         {
{
"3579
[; ;Source/FreeRTOS/tasks.c: 3579:             *pxTicksToWait = ( TickType_t ) 0;
[e = *U _pxTicksToWait -> -> 0 `i `us ]
"3580
[; ;Source/FreeRTOS/tasks.c: 3580:             xReturn = ( ( BaseType_t ) 1 );
[e = _xReturn -> -> 1 `i `c ]
"3581
[; ;Source/FreeRTOS/tasks.c: 3581:         }
}
[e :U 2019 ]
[e :U 2017 ]
[e :U 2015 ]
"3582
[; ;Source/FreeRTOS/tasks.c: 3582:     }
}
"3583
[; ;Source/FreeRTOS/tasks.c: 3583:     __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2020  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2020 ]
"3585
[; ;Source/FreeRTOS/tasks.c: 3585:     return xReturn;
[e ) _xReturn ]
[e $UE 2011  ]
"3586
[; ;Source/FreeRTOS/tasks.c: 3586: }
[e :UE 2011 ]
}
"3589
[; ;Source/FreeRTOS/tasks.c: 3589: void vTaskMissedYield( void )
[v _vTaskMissedYield `(v ~T0 @X0 1 ef ]
"3590
[; ;Source/FreeRTOS/tasks.c: 3590: {
{
[e :U _vTaskMissedYield ]
[f ]
"3591
[; ;Source/FreeRTOS/tasks.c: 3591:     xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"3592
[; ;Source/FreeRTOS/tasks.c: 3592: }
[e :UE 2021 ]
}
"3597
[; ;Source/FreeRTOS/tasks.c: 3597:     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
[v _uxTaskGetTaskNumber `(uc ~T0 @X0 1 ef1`*S936 ]
"3598
[; ;Source/FreeRTOS/tasks.c: 3598:     {
{
[e :U _uxTaskGetTaskNumber ]
"3597
[; ;Source/FreeRTOS/tasks.c: 3597:     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"3598
[; ;Source/FreeRTOS/tasks.c: 3598:     {
[f ]
"3599
[; ;Source/FreeRTOS/tasks.c: 3599:         UBaseType_t uxReturn;
[v _uxReturn `uc ~T0 @X0 1 a ]
"3600
[; ;Source/FreeRTOS/tasks.c: 3600:         TCB_t const * pxTCB;
[v _pxTCB `*CS936 ~T0 @X0 1 a ]
"3602
[; ;Source/FreeRTOS/tasks.c: 3602:         if( xTask != ((void*)0) )
[e $ ! != _xTask -> -> -> 0 `i `*v `*S936 2023  ]
"3603
[; ;Source/FreeRTOS/tasks.c: 3603:         {
{
"3604
[; ;Source/FreeRTOS/tasks.c: 3604:             pxTCB = xTask;
[e = _pxTCB -> _xTask `*CS936 ]
"3605
[; ;Source/FreeRTOS/tasks.c: 3605:             uxReturn = pxTCB->uxTaskNumber;
[e = _uxReturn . *U _pxTCB 8 ]
"3606
[; ;Source/FreeRTOS/tasks.c: 3606:         }
}
[e $U 2024  ]
"3607
[; ;Source/FreeRTOS/tasks.c: 3607:         else
[e :U 2023 ]
"3608
[; ;Source/FreeRTOS/tasks.c: 3608:         {
{
"3609
[; ;Source/FreeRTOS/tasks.c: 3609:             uxReturn = 0U;
[e = _uxReturn -> -> 0 `ui `uc ]
"3610
[; ;Source/FreeRTOS/tasks.c: 3610:         }
}
[e :U 2024 ]
"3612
[; ;Source/FreeRTOS/tasks.c: 3612:         return uxReturn;
[e ) _uxReturn ]
[e $UE 2022  ]
"3613
[; ;Source/FreeRTOS/tasks.c: 3613:     }
[e :UE 2022 ]
}
"3620
[; ;Source/FreeRTOS/tasks.c: 3620:     void vTaskSetTaskNumber( TaskHandle_t xTask,
[v _vTaskSetTaskNumber `(v ~T0 @X0 1 ef2`*S936`Cuc ]
"3622
[; ;Source/FreeRTOS/tasks.c: 3622:     {
{
[e :U _vTaskSetTaskNumber ]
"3620
[; ;Source/FreeRTOS/tasks.c: 3620:     void vTaskSetTaskNumber( TaskHandle_t xTask,
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"3621
[; ;Source/FreeRTOS/tasks.c: 3621:                              const UBaseType_t uxHandle )
[v _uxHandle `Cuc ~T0 @X0 1 r2 ]
"3622
[; ;Source/FreeRTOS/tasks.c: 3622:     {
[f ]
"3623
[; ;Source/FreeRTOS/tasks.c: 3623:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"3625
[; ;Source/FreeRTOS/tasks.c: 3625:         if( xTask != ((void*)0) )
[e $ ! != _xTask -> -> -> 0 `i `*v `*S936 2026  ]
"3626
[; ;Source/FreeRTOS/tasks.c: 3626:         {
{
"3627
[; ;Source/FreeRTOS/tasks.c: 3627:             pxTCB = xTask;
[e = _pxTCB _xTask ]
"3628
[; ;Source/FreeRTOS/tasks.c: 3628:             pxTCB->uxTaskNumber = uxHandle;
[e = . *U _pxTCB 8 _uxHandle ]
"3629
[; ;Source/FreeRTOS/tasks.c: 3629:         }
}
[e :U 2026 ]
"3630
[; ;Source/FreeRTOS/tasks.c: 3630:     }
[e :UE 2025 ]
}
"3645
[; ;Source/FreeRTOS/tasks.c: 3645: void prvIdleTask_entry(void)
[v _prvIdleTask_entry `(v ~T0 @X0 1 ef ]
"3646
[; ;Source/FreeRTOS/tasks.c: 3646: {
{
[e :U _prvIdleTask_entry ]
[f ]
"3647
[; ;Source/FreeRTOS/tasks.c: 3647:     prvIdleTask(0);
[e ( _prvIdleTask (1 -> -> 0 `i `*v ]
"3648
[; ;Source/FreeRTOS/tasks.c: 3648: }
[e :UE 2027 ]
}
"3650
[; ;Source/FreeRTOS/tasks.c: 3650: static void prvIdleTask( void *pvParameters )
[v _prvIdleTask `(v ~T0 @X0 1 sf1`*v ]
"3651
[; ;Source/FreeRTOS/tasks.c: 3651: {
{
[e :U _prvIdleTask ]
"3650
[; ;Source/FreeRTOS/tasks.c: 3650: static void prvIdleTask( void *pvParameters )
[v _pvParameters `*v ~T0 @X0 1 r1 ]
"3651
[; ;Source/FreeRTOS/tasks.c: 3651: {
[f ]
"3653
[; ;Source/FreeRTOS/tasks.c: 3653:     ( void ) pvParameters;
[e _pvParameters ]
"3663
[; ;Source/FreeRTOS/tasks.c: 3663:     for( ; ; )
{
[e :U 2029 ]
"3664
[; ;Source/FreeRTOS/tasks.c: 3664:     {
{
"3667
[; ;Source/FreeRTOS/tasks.c: 3667:         prvCheckTasksWaitingTermination();
[e ( _prvCheckTasksWaitingTermination ..  ]
"3680
[; ;Source/FreeRTOS/tasks.c: 3680:         {
{
"3690
[; ;Source/FreeRTOS/tasks.c: 3690:             if( ( ( &( pxReadyTasksLists[ ( ( UBaseType_t ) 0U ) ] ) )->uxNumberOfItems ) > ( UBaseType_t ) 1 )
[e $ ! > -> . *U &U *U + &U _pxReadyTasksLists * -> -> -> 0 `ui `uc `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 `i -> -> -> 1 `i `uc `i 2032  ]
"3691
[; ;Source/FreeRTOS/tasks.c: 3691:             {
{
"3692
[; ;Source/FreeRTOS/tasks.c: 3692:                 vPortYield();
[e ( _vPortYield ..  ]
"3693
[; ;Source/FreeRTOS/tasks.c: 3693:             }
}
[e $U 2033  ]
"3694
[; ;Source/FreeRTOS/tasks.c: 3694:             else
[e :U 2032 ]
"3695
[; ;Source/FreeRTOS/tasks.c: 3695:             {
{
"3697
[; ;Source/FreeRTOS/tasks.c: 3697:             }
}
[e :U 2033 ]
"3698
[; ;Source/FreeRTOS/tasks.c: 3698:         }
}
"3763
[; ;Source/FreeRTOS/tasks.c: 3763:     }
}
[e $U 2029  ]
[e :U 2030 ]
}
"3764
[; ;Source/FreeRTOS/tasks.c: 3764: }
[e :UE 2028 ]
}
"3880
[; ;Source/FreeRTOS/tasks.c: 3880: static void prvInitialiseTaskLists( void )
[v _prvInitialiseTaskLists `(v ~T0 @X0 1 sf ]
"3881
[; ;Source/FreeRTOS/tasks.c: 3881: {
{
[e :U _prvInitialiseTaskLists ]
[f ]
"3882
[; ;Source/FreeRTOS/tasks.c: 3882:     UBaseType_t uxPriority;
[v _uxPriority `uc ~T0 @X0 1 a ]
"3884
[; ;Source/FreeRTOS/tasks.c: 3884:     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) ( 3 ); uxPriority++ )
{
[e = _uxPriority -> -> 0 `ui `uc ]
[e $ < -> _uxPriority `i -> -> -> 3 `i `uc `i 2035  ]
[e $U 2036  ]
[e :U 2035 ]
"3885
[; ;Source/FreeRTOS/tasks.c: 3885:     {
{
"3886
[; ;Source/FreeRTOS/tasks.c: 3886:         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
[e ( _vListInitialise (1 &U *U + &U _pxReadyTasksLists * -> _uxPriority `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
"3887
[; ;Source/FreeRTOS/tasks.c: 3887:     }
}
[e ++ _uxPriority -> -> 1 `i `uc ]
[e $ < -> _uxPriority `i -> -> -> 3 `i `uc `i 2035  ]
[e :U 2036 ]
}
"3889
[; ;Source/FreeRTOS/tasks.c: 3889:     vListInitialise( &xDelayedTaskList1 );
[e ( _vListInitialise (1 &U _xDelayedTaskList1 ]
"3890
[; ;Source/FreeRTOS/tasks.c: 3890:     vListInitialise( &xDelayedTaskList2 );
[e ( _vListInitialise (1 &U _xDelayedTaskList2 ]
"3891
[; ;Source/FreeRTOS/tasks.c: 3891:     vListInitialise( &xPendingReadyList );
[e ( _vListInitialise (1 &U _xPendingReadyList ]
"3894
[; ;Source/FreeRTOS/tasks.c: 3894:     {
{
"3895
[; ;Source/FreeRTOS/tasks.c: 3895:         vListInitialise( &xTasksWaitingTermination );
[e ( _vListInitialise (1 &U _xTasksWaitingTermination ]
"3896
[; ;Source/FreeRTOS/tasks.c: 3896:     }
}
"3900
[; ;Source/FreeRTOS/tasks.c: 3900:     {
{
"3901
[; ;Source/FreeRTOS/tasks.c: 3901:         vListInitialise( &xSuspendedTaskList );
[e ( _vListInitialise (1 &U _xSuspendedTaskList ]
"3902
[; ;Source/FreeRTOS/tasks.c: 3902:     }
}
"3907
[; ;Source/FreeRTOS/tasks.c: 3907:     pxDelayedTaskList = &xDelayedTaskList1;
[e = _pxDelayedTaskList &U _xDelayedTaskList1 ]
"3908
[; ;Source/FreeRTOS/tasks.c: 3908:     pxOverflowDelayedTaskList = &xDelayedTaskList2;
[e = _pxOverflowDelayedTaskList &U _xDelayedTaskList2 ]
"3909
[; ;Source/FreeRTOS/tasks.c: 3909: }
[e :UE 2034 ]
}
"3912
[; ;Source/FreeRTOS/tasks.c: 3912: static void prvCheckTasksWaitingTermination( void )
[v _prvCheckTasksWaitingTermination `(v ~T0 @X0 1 sf ]
"3913
[; ;Source/FreeRTOS/tasks.c: 3913: {
{
[e :U _prvCheckTasksWaitingTermination ]
[f ]
"3917
[; ;Source/FreeRTOS/tasks.c: 3917:     {
{
"3918
[; ;Source/FreeRTOS/tasks.c: 3918:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"3922
[; ;Source/FreeRTOS/tasks.c: 3922:         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
[e $U 2039  ]
[e :U 2040 ]
"3923
[; ;Source/FreeRTOS/tasks.c: 3923:         {
{
"3924
[; ;Source/FreeRTOS/tasks.c: 3924:             POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"3925
[; ;Source/FreeRTOS/tasks.c: 3925:             {
{
"3926
[; ;Source/FreeRTOS/tasks.c: 3926:                 pxTCB = ( ( &( ( ( &xTasksWaitingTermination ) )->xListEnd ) )->pxNext->pvOwner );
[e = _pxTCB -> . *U . *U &U . *U &U _xTasksWaitingTermination 2 1 3 `*S936 ]
"3927
[; ;Source/FreeRTOS/tasks.c: 3927:                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
[e ( _uxListRemove (1 &U . *U _pxTCB 1 ]
"3928
[; ;Source/FreeRTOS/tasks.c: 3928:                 --uxCurrentNumberOfTasks;
[e =- _uxCurrentNumberOfTasks -> -> 1 `i `Vuc ]
"3929
[; ;Source/FreeRTOS/tasks.c: 3929:                 --uxDeletedTasksWaitingCleanUp;
[e =- _uxDeletedTasksWaitingCleanUp -> -> 1 `i `Vuc ]
"3930
[; ;Source/FreeRTOS/tasks.c: 3930:             }
}
"3931
[; ;Source/FreeRTOS/tasks.c: 3931:             __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2042  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2042 ]
"3933
[; ;Source/FreeRTOS/tasks.c: 3933:             prvDeleteTCB( pxTCB );
[e ( _prvDeleteTCB (1 _pxTCB ]
"3934
[; ;Source/FreeRTOS/tasks.c: 3934:         }
}
[e :U 2039 ]
"3922
[; ;Source/FreeRTOS/tasks.c: 3922:         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
[e $ > -> _uxDeletedTasksWaitingCleanUp `i -> -> -> 0 `ui `uc `i 2040  ]
[e :U 2041 ]
"3935
[; ;Source/FreeRTOS/tasks.c: 3935:     }
}
"3937
[; ;Source/FreeRTOS/tasks.c: 3937: }
[e :UE 2038 ]
}
"3942
[; ;Source/FreeRTOS/tasks.c: 3942:     void vTaskGetInfo( TaskHandle_t xTask,
[v _vTaskGetInfo `(v ~T0 @X0 1 ef4`*S936`*S940`c`E7103 ]
"3946
[; ;Source/FreeRTOS/tasks.c: 3946:     {
{
[e :U _vTaskGetInfo ]
"3942
[; ;Source/FreeRTOS/tasks.c: 3942:     void vTaskGetInfo( TaskHandle_t xTask,
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"3943
[; ;Source/FreeRTOS/tasks.c: 3943:                        TaskStatus_t * pxTaskStatus,
[v _pxTaskStatus `*S940 ~T0 @X0 1 r2 ]
"3944
[; ;Source/FreeRTOS/tasks.c: 3944:                        BaseType_t xGetFreeStackSpace,
[v _xGetFreeStackSpace `c ~T0 @X0 1 r3 ]
"3945
[; ;Source/FreeRTOS/tasks.c: 3945:                        eTaskState eState )
[v _eState `E7103 ~T0 @X0 1 r4 ]
"3946
[; ;Source/FreeRTOS/tasks.c: 3946:     {
[f ]
"3947
[; ;Source/FreeRTOS/tasks.c: 3947:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"3950
[; ;Source/FreeRTOS/tasks.c: 3950:         pxTCB = ( ( ( xTask ) == ((void*)0) ) ? pxCurrentTCB : ( xTask ) );
[e = _pxTCB ? == _xTask -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTask ]
"3952
[; ;Source/FreeRTOS/tasks.c: 3952:         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
[e = . *U _pxTaskStatus 0 _pxTCB ]
"3953
[; ;Source/FreeRTOS/tasks.c: 3953:         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
[e = . *U _pxTaskStatus 1 -> &U *U + &U . *U _pxTCB 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _pxTCB 5 `ui `ux `*Cuc ]
"3954
[; ;Source/FreeRTOS/tasks.c: 3954:         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
[e = . *U _pxTaskStatus 4 . *U _pxTCB 3 ]
"3955
[; ;Source/FreeRTOS/tasks.c: 3955:         pxTaskStatus->pxStackBase = pxTCB->pxStack;
[e = . *U _pxTaskStatus 7 . *U _pxTCB 4 ]
"3960
[; ;Source/FreeRTOS/tasks.c: 3960:         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
[e = . *U _pxTaskStatus 2 . *U _pxTCB 7 ]
"3967
[; ;Source/FreeRTOS/tasks.c: 3967:         {
{
"3968
[; ;Source/FreeRTOS/tasks.c: 3968:             pxTaskStatus->uxBasePriority = 0;
[e = . *U _pxTaskStatus 5 -> -> 0 `i `uc ]
"3969
[; ;Source/FreeRTOS/tasks.c: 3969:         }
}
"3977
[; ;Source/FreeRTOS/tasks.c: 3977:         {
{
"3978
[; ;Source/FreeRTOS/tasks.c: 3978:             pxTaskStatus->ulRunTimeCounter = ( uint32_t ) 0;
[e = . *U _pxTaskStatus 6 -> -> 0 `i `ul ]
"3979
[; ;Source/FreeRTOS/tasks.c: 3979:         }
}
"3985
[; ;Source/FreeRTOS/tasks.c: 3985:         if( eState != eInvalid )
[e $ ! != -> _eState `ui -> . `E7103 5 `ui 2044  ]
"3986
[; ;Source/FreeRTOS/tasks.c: 3986:         {
{
"3987
[; ;Source/FreeRTOS/tasks.c: 3987:             if( pxTCB == pxCurrentTCB )
[e $ ! == _pxTCB _pxCurrentTCB 2045  ]
"3988
[; ;Source/FreeRTOS/tasks.c: 3988:             {
{
"3989
[; ;Source/FreeRTOS/tasks.c: 3989:                 pxTaskStatus->eCurrentState = eRunning;
[e = . *U _pxTaskStatus 3 . `E7103 0 ]
"3990
[; ;Source/FreeRTOS/tasks.c: 3990:             }
}
[e $U 2046  ]
"3991
[; ;Source/FreeRTOS/tasks.c: 3991:             else
[e :U 2045 ]
"3992
[; ;Source/FreeRTOS/tasks.c: 3992:             {
{
"3993
[; ;Source/FreeRTOS/tasks.c: 3993:                 pxTaskStatus->eCurrentState = eState;
[e = . *U _pxTaskStatus 3 _eState ]
"3996
[; ;Source/FreeRTOS/tasks.c: 3996:                 {
{
"4000
[; ;Source/FreeRTOS/tasks.c: 4000:                     if( eState == eSuspended )
[e $ ! == -> _eState `ui -> . `E7103 3 `ui 2047  ]
"4001
[; ;Source/FreeRTOS/tasks.c: 4001:                     {
{
"4002
[; ;Source/FreeRTOS/tasks.c: 4002:                         vTaskSuspendAll();
[e ( _vTaskSuspendAll ..  ]
"4003
[; ;Source/FreeRTOS/tasks.c: 4003:                         {
{
"4004
[; ;Source/FreeRTOS/tasks.c: 4004:                             if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != ((void*)0) )
[e $ ! != . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 2048  ]
"4005
[; ;Source/FreeRTOS/tasks.c: 4005:                             {
{
"4006
[; ;Source/FreeRTOS/tasks.c: 4006:                                 pxTaskStatus->eCurrentState = eBlocked;
[e = . *U _pxTaskStatus 3 . `E7103 2 ]
"4007
[; ;Source/FreeRTOS/tasks.c: 4007:                             }
}
[e :U 2048 ]
"4008
[; ;Source/FreeRTOS/tasks.c: 4008:                         }
}
"4009
[; ;Source/FreeRTOS/tasks.c: 4009:                         ( void ) xTaskResumeAll();
[e ( _xTaskResumeAll ..  ]
"4010
[; ;Source/FreeRTOS/tasks.c: 4010:                     }
}
[e :U 2047 ]
"4011
[; ;Source/FreeRTOS/tasks.c: 4011:                 }
}
"4013
[; ;Source/FreeRTOS/tasks.c: 4013:             }
}
[e :U 2046 ]
"4014
[; ;Source/FreeRTOS/tasks.c: 4014:         }
}
[e $U 2049  ]
"4015
[; ;Source/FreeRTOS/tasks.c: 4015:         else
[e :U 2044 ]
"4016
[; ;Source/FreeRTOS/tasks.c: 4016:         {
{
"4017
[; ;Source/FreeRTOS/tasks.c: 4017:             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
[e = . *U _pxTaskStatus 3 ( _eTaskGetState (1 _pxTCB ]
"4018
[; ;Source/FreeRTOS/tasks.c: 4018:         }
}
[e :U 2049 ]
"4022
[; ;Source/FreeRTOS/tasks.c: 4022:         if( xGetFreeStackSpace != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xGetFreeStackSpace `i -> -> -> 0 `i `c `i 2050  ]
"4023
[; ;Source/FreeRTOS/tasks.c: 4023:         {
{
"4025
[; ;Source/FreeRTOS/tasks.c: 4025:             {
{
"4026
[; ;Source/FreeRTOS/tasks.c: 4026:                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
[e = . *U _pxTaskStatus 8 ( _prvTaskCheckFreeStackSpace (1 -> . *U _pxTCB 6 `*Cuc ]
"4027
[; ;Source/FreeRTOS/tasks.c: 4027:             }
}
"4033
[; ;Source/FreeRTOS/tasks.c: 4033:         }
}
[e $U 2051  ]
"4034
[; ;Source/FreeRTOS/tasks.c: 4034:         else
[e :U 2050 ]
"4035
[; ;Source/FreeRTOS/tasks.c: 4035:         {
{
"4036
[; ;Source/FreeRTOS/tasks.c: 4036:             pxTaskStatus->usStackHighWaterMark = 0;
[e = . *U _pxTaskStatus 8 -> -> 0 `i `us ]
"4037
[; ;Source/FreeRTOS/tasks.c: 4037:         }
}
[e :U 2051 ]
"4038
[; ;Source/FreeRTOS/tasks.c: 4038:     }
[e :UE 2043 ]
}
"4045
[; ;Source/FreeRTOS/tasks.c: 4045:     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
[v _prvListTasksWithinSingleList `(uc ~T0 @X0 1 sf3`*S940`*S931`E7103 ]
"4048
[; ;Source/FreeRTOS/tasks.c: 4048:     {
{
[e :U _prvListTasksWithinSingleList ]
"4045
[; ;Source/FreeRTOS/tasks.c: 4045:     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
[v _pxTaskStatusArray `*S940 ~T0 @X0 1 r1 ]
"4046
[; ;Source/FreeRTOS/tasks.c: 4046:                                                      List_t * pxList,
[v _pxList `*S931 ~T0 @X0 1 r2 ]
"4047
[; ;Source/FreeRTOS/tasks.c: 4047:                                                      eTaskState eState )
[v _eState `E7103 ~T0 @X0 1 r3 ]
"4048
[; ;Source/FreeRTOS/tasks.c: 4048:     {
[f ]
"4049
[; ;Source/FreeRTOS/tasks.c: 4049:                             TCB_t * pxNextTCB;
[v _pxNextTCB `*S936 ~T0 @X0 1 a ]
"4050
[; ;Source/FreeRTOS/tasks.c: 4050:                             TCB_t * pxFirstTCB;
[v _pxFirstTCB `*S936 ~T0 @X0 1 a ]
"4051
[; ;Source/FreeRTOS/tasks.c: 4051:         UBaseType_t uxTask = 0;
[v _uxTask `uc ~T0 @X0 1 a ]
[e = _uxTask -> -> 0 `i `uc ]
"4053
[; ;Source/FreeRTOS/tasks.c: 4053:         if( ( ( pxList )->uxNumberOfItems ) > ( UBaseType_t ) 0 )
[e $ ! > -> . *U _pxList 0 `i -> -> -> 0 `i `uc `i 2053  ]
"4054
[; ;Source/FreeRTOS/tasks.c: 4054:         {
{
"4055
[; ;Source/FreeRTOS/tasks.c: 4055:             { List_t * const pxConstList = ( pxList ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxFirstTCB ) = ( pxConstList )->pxIndex->pvOwner; };
{
[v F7824 `*S931 ~T0 @X0 1 t ]
[v _pxConstList `C*S931 ~T0 @X0 1 a ]
[e = _pxConstList _pxList ]
[e = . *U _pxConstList 1 . *U . *U _pxConstList 1 1 ]
[e $ ! == -> . *U _pxConstList 1 `*v -> &U . *U _pxConstList 2 `*v 2054  ]
{
[e = . *U _pxConstList 1 . *U . *U _pxConstList 1 1 ]
}
[e :U 2054 ]
[e = _pxFirstTCB -> . *U . *U _pxConstList 1 3 `*S936 ]
}
"4061
[; ;Source/FreeRTOS/tasks.c: 4061:             do
[e :U 2057 ]
"4062
[; ;Source/FreeRTOS/tasks.c: 4062:             {
{
"4063
[; ;Source/FreeRTOS/tasks.c: 4063:                 { List_t * const pxConstList = ( pxList ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxNextTCB ) = ( pxConstList )->pxIndex->pvOwner; };
{
[v F7826 `*S931 ~T0 @X0 1 t ]
[v _pxConstList `C*S931 ~T0 @X0 1 a ]
[e = _pxConstList _pxList ]
[e = . *U _pxConstList 1 . *U . *U _pxConstList 1 1 ]
[e $ ! == -> . *U _pxConstList 1 `*v -> &U . *U _pxConstList 2 `*v 2058  ]
{
[e = . *U _pxConstList 1 . *U . *U _pxConstList 1 1 ]
}
[e :U 2058 ]
[e = _pxNextTCB -> . *U . *U _pxConstList 1 3 `*S936 ]
}
"4064
[; ;Source/FreeRTOS/tasks.c: 4064:                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), ( ( BaseType_t ) 1 ), eState );
[e ( _vTaskGetInfo (4 , , , _pxNextTCB &U *U + _pxTaskStatusArray * -> _uxTask `ux -> -> # *U _pxTaskStatusArray `ui `ux -> -> 1 `i `c _eState ]
"4065
[; ;Source/FreeRTOS/tasks.c: 4065:                 uxTask++;
[e ++ _uxTask -> -> 1 `i `uc ]
"4066
[; ;Source/FreeRTOS/tasks.c: 4066:             } while( pxNextTCB != pxFirstTCB );
}
[e $ != _pxNextTCB _pxFirstTCB 2057  ]
[e :U 2056 ]
"4067
[; ;Source/FreeRTOS/tasks.c: 4067:         }
}
[e $U 2059  ]
"4068
[; ;Source/FreeRTOS/tasks.c: 4068:         else
[e :U 2053 ]
"4069
[; ;Source/FreeRTOS/tasks.c: 4069:         {
{
"4071
[; ;Source/FreeRTOS/tasks.c: 4071:         }
}
[e :U 2059 ]
"4073
[; ;Source/FreeRTOS/tasks.c: 4073:         return uxTask;
[e ) _uxTask ]
[e $UE 2052  ]
"4074
[; ;Source/FreeRTOS/tasks.c: 4074:     }
[e :UE 2052 ]
}
"4081
[; ;Source/FreeRTOS/tasks.c: 4081:     static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
[v _prvTaskCheckFreeStackSpace `(us ~T0 @X0 1 sf1`*Cuc ]
"4082
[; ;Source/FreeRTOS/tasks.c: 4082:     {
{
[e :U _prvTaskCheckFreeStackSpace ]
"4081
[; ;Source/FreeRTOS/tasks.c: 4081:     static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
[v _pucStackByte `*Cuc ~T0 @X0 1 r1 ]
"4082
[; ;Source/FreeRTOS/tasks.c: 4082:     {
[f ]
"4083
[; ;Source/FreeRTOS/tasks.c: 4083:         uint32_t ulCount = 0U;
[v _ulCount `ul ~T0 @X0 1 a ]
[e = _ulCount -> -> 0 `ui `ul ]
"4085
[; ;Source/FreeRTOS/tasks.c: 4085:         while( *pucStackByte == ( uint8_t ) ( 0xa5U ) )
[e $U 2061  ]
[e :U 2062 ]
"4086
[; ;Source/FreeRTOS/tasks.c: 4086:         {
{
"4087
[; ;Source/FreeRTOS/tasks.c: 4087:             pucStackByte -= 1;
[e =- _pucStackByte * -> -> 1 `i `x -> -> # *U _pucStackByte `i `x ]
"4088
[; ;Source/FreeRTOS/tasks.c: 4088:             ulCount++;
[e ++ _ulCount -> -> -> 1 `i `l `ul ]
"4089
[; ;Source/FreeRTOS/tasks.c: 4089:         }
}
[e :U 2061 ]
"4085
[; ;Source/FreeRTOS/tasks.c: 4085:         while( *pucStackByte == ( uint8_t ) ( 0xa5U ) )
[e $ == -> *U _pucStackByte `i -> -> -> 165 `ui `uc `i 2062  ]
[e :U 2063 ]
"4091
[; ;Source/FreeRTOS/tasks.c: 4091:         ulCount /= ( uint32_t ) sizeof( StackType_t );
[e =/ _ulCount -> -> # `uc `ui `ul ]
"4093
[; ;Source/FreeRTOS/tasks.c: 4093:         return ( uint16_t ) ulCount;
[e ) -> _ulCount `us ]
[e $UE 2060  ]
"4094
[; ;Source/FreeRTOS/tasks.c: 4094:     }
[e :UE 2060 ]
}
"4169
[; ;Source/FreeRTOS/tasks.c: 4169:     static void prvDeleteTCB( TCB_t * pxTCB )
[v _prvDeleteTCB `(v ~T0 @X0 1 sf1`*S936 ]
"4170
[; ;Source/FreeRTOS/tasks.c: 4170:     {
{
[e :U _prvDeleteTCB ]
"4169
[; ;Source/FreeRTOS/tasks.c: 4169:     static void prvDeleteTCB( TCB_t * pxTCB )
[v _pxTCB `*S936 ~T0 @X0 1 r1 ]
"4170
[; ;Source/FreeRTOS/tasks.c: 4170:     {
[f ]
"4174
[; ;Source/FreeRTOS/tasks.c: 4174:         ( void ) ( pxTCB );
[e _pxTCB ]
"4184
[; ;Source/FreeRTOS/tasks.c: 4184:         {
{
"4187
[; ;Source/FreeRTOS/tasks.c: 4187:             vPortFree( pxTCB->pxStack );
[e ( _vPortFree (1 -> . *U _pxTCB 4 `*v ]
"4188
[; ;Source/FreeRTOS/tasks.c: 4188:             vPortFree( pxTCB );
[e ( _vPortFree (1 -> _pxTCB `*v ]
"4189
[; ;Source/FreeRTOS/tasks.c: 4189:         }
}
"4217
[; ;Source/FreeRTOS/tasks.c: 4217:     }
[e :UE 2064 ]
}
"4222
[; ;Source/FreeRTOS/tasks.c: 4222: static void prvResetNextTaskUnblockTime( void )
[v _prvResetNextTaskUnblockTime `(v ~T0 @X0 1 sf ]
"4223
[; ;Source/FreeRTOS/tasks.c: 4223: {
{
[e :U _prvResetNextTaskUnblockTime ]
[f ]
"4224
[; ;Source/FreeRTOS/tasks.c: 4224:     if( ( ( ( pxDelayedTaskList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? ( ( BaseType_t ) 1 ) : ( ( BaseType_t ) 0 ) ) != ( ( BaseType_t ) 0 ) )
[e $ ! != ? == -> . *U _pxDelayedTaskList 0 `i -> -> -> 0 `i `uc `i : -> -> -> 1 `i `c `i -> -> -> 0 `i `c `i -> -> -> 0 `i `c `i 2066  ]
"4225
[; ;Source/FreeRTOS/tasks.c: 4225:     {
{
"4230
[; ;Source/FreeRTOS/tasks.c: 4230:         xNextTaskUnblockTime = ( TickType_t ) 0xffff;
[e = _xNextTaskUnblockTime -> -> 65535 `ui `us ]
"4231
[; ;Source/FreeRTOS/tasks.c: 4231:     }
}
[e $U 2067  ]
"4232
[; ;Source/FreeRTOS/tasks.c: 4232:     else
[e :U 2066 ]
"4233
[; ;Source/FreeRTOS/tasks.c: 4233:     {
{
"4238
[; ;Source/FreeRTOS/tasks.c: 4238:         xNextTaskUnblockTime = ( ( ( pxDelayedTaskList )->xListEnd ).pxNext->xItemValue );
[e = _xNextTaskUnblockTime . *U . . *U _pxDelayedTaskList 2 1 0 ]
"4239
[; ;Source/FreeRTOS/tasks.c: 4239:     }
}
[e :U 2067 ]
"4240
[; ;Source/FreeRTOS/tasks.c: 4240: }
[e :UE 2065 ]
}
"4245
[; ;Source/FreeRTOS/tasks.c: 4245:     TaskHandle_t xTaskGetCurrentTaskHandle( void )
[v _xTaskGetCurrentTaskHandle `(*S936 ~T0 @X0 1 ef ]
"4246
[; ;Source/FreeRTOS/tasks.c: 4246:     {
{
[e :U _xTaskGetCurrentTaskHandle ]
[f ]
"4247
[; ;Source/FreeRTOS/tasks.c: 4247:         TaskHandle_t xReturn;
[v _xReturn `*S936 ~T0 @X0 1 a ]
"4252
[; ;Source/FreeRTOS/tasks.c: 4252:         xReturn = pxCurrentTCB;
[e = _xReturn _pxCurrentTCB ]
"4254
[; ;Source/FreeRTOS/tasks.c: 4254:         return xReturn;
[e ) _xReturn ]
[e $UE 2068  ]
"4255
[; ;Source/FreeRTOS/tasks.c: 4255:     }
[e :UE 2068 ]
}
"4629
[; ;Source/FreeRTOS/tasks.c: 4629:     static char * prvWriteNameToBuffer( char * pcBuffer,
[v _prvWriteNameToBuffer `(*uc ~T0 @X0 1 sf2`*uc`*Cuc ]
"4631
[; ;Source/FreeRTOS/tasks.c: 4631:     {
{
[e :U _prvWriteNameToBuffer ]
"4629
[; ;Source/FreeRTOS/tasks.c: 4629:     static char * prvWriteNameToBuffer( char * pcBuffer,
[v _pcBuffer `*uc ~T0 @X0 1 r1 ]
"4630
[; ;Source/FreeRTOS/tasks.c: 4630:                                         const char * pcTaskName )
[v _pcTaskName `*Cuc ~T0 @X0 1 r2 ]
"4631
[; ;Source/FreeRTOS/tasks.c: 4631:     {
[f ]
"4632
[; ;Source/FreeRTOS/tasks.c: 4632:         size_t x;
[v _x `ui ~T0 @X0 1 a ]
"4635
[; ;Source/FreeRTOS/tasks.c: 4635:         strcpy( pcBuffer, pcTaskName );
[e ( _strcpy (2 , _pcBuffer _pcTaskName ]
"4639
[; ;Source/FreeRTOS/tasks.c: 4639:         for( x = strlen( pcBuffer ); x < ( size_t ) ( ( 4 ) - 1 ); x++ )
{
[e = _x ( _strlen (1 -> _pcBuffer `*Cuc ]
[e $ < _x -> - -> 4 `i -> 1 `i `ui 2070  ]
[e $U 2071  ]
[e :U 2070 ]
"4640
[; ;Source/FreeRTOS/tasks.c: 4640:         {
{
"4641
[; ;Source/FreeRTOS/tasks.c: 4641:             pcBuffer[ x ] = ' ';
[e = *U + _pcBuffer * -> _x `ux -> -> # *U _pcBuffer `ui `ux -> -> 32 `ui `uc ]
"4642
[; ;Source/FreeRTOS/tasks.c: 4642:         }
}
[e ++ _x -> -> 1 `i `ui ]
[e $ < _x -> - -> 4 `i -> 1 `i `ui 2070  ]
[e :U 2071 ]
}
"4645
[; ;Source/FreeRTOS/tasks.c: 4645:         pcBuffer[ x ] = ( char ) 0x00;
[e = *U + _pcBuffer * -> _x `ux -> -> # *U _pcBuffer `ui `ux -> -> 0 `i `uc ]
"4648
[; ;Source/FreeRTOS/tasks.c: 4648:         return &( pcBuffer[ x ] );
[e ) &U *U + _pcBuffer * -> _x `ux -> -> # *U _pcBuffer `ui `ux ]
[e $UE 2069  ]
"4649
[; ;Source/FreeRTOS/tasks.c: 4649:     }
[e :UE 2069 ]
}
"4656
[; ;Source/FreeRTOS/tasks.c: 4656:     void vTaskList( char * pcWriteBuffer )
[v _vTaskList `(v ~T0 @X0 1 ef1`*uc ]
"4657
[; ;Source/FreeRTOS/tasks.c: 4657:     {
{
[e :U _vTaskList ]
"4656
[; ;Source/FreeRTOS/tasks.c: 4656:     void vTaskList( char * pcWriteBuffer )
[v _pcWriteBuffer `*uc ~T0 @X0 1 r1 ]
"4657
[; ;Source/FreeRTOS/tasks.c: 4657:     {
[f ]
"4658
[; ;Source/FreeRTOS/tasks.c: 4658:         TaskStatus_t * pxTaskStatusArray;
[v _pxTaskStatusArray `*S940 ~T0 @X0 1 a ]
"4659
[; ;Source/FreeRTOS/tasks.c: 4659:         UBaseType_t uxArraySize, x;
[v _uxArraySize `uc ~T0 @X0 1 a ]
[v _x `uc ~T0 @X0 1 a ]
"4660
[; ;Source/FreeRTOS/tasks.c: 4660:         char cStatus;
[v _cStatus `uc ~T0 @X0 1 a ]
"4694
[; ;Source/FreeRTOS/tasks.c: 4694:         uxArraySize = uxCurrentNumberOfTasks;
[e = _uxArraySize _uxCurrentNumberOfTasks ]
"4699
[; ;Source/FreeRTOS/tasks.c: 4699:         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
[e = _pxTaskStatusArray -> ( _pvPortMalloc (1 * -> _uxCurrentNumberOfTasks `ui -> # `S940 `ui `*S940 ]
"4701
[; ;Source/FreeRTOS/tasks.c: 4701:         Xprintf("\r\n-------------------------------------\r\n");
[e ( _Xprintf :s 132C ]
"4702
[; ;Source/FreeRTOS/tasks.c: 4702:         Xprintf("Name\tState\tPrio\tStack\tNum\r\n");
[e ( _Xprintf :s 133C ]
"4703
[; ;Source/FreeRTOS/tasks.c: 4703:         Xprintf("-------------------------------------\r\n");
[e ( _Xprintf :s 134C ]
"4704
[; ;Source/FreeRTOS/tasks.c: 4704:         if( pxTaskStatusArray != ((void*)0) )
[e $ ! != _pxTaskStatusArray -> -> -> 0 `i `*v `*S940 2074  ]
"4705
[; ;Source/FreeRTOS/tasks.c: 4705:         {
{
"4707
[; ;Source/FreeRTOS/tasks.c: 4707:             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, ((void*)0) );
[e = _uxArraySize ( _uxTaskGetSystemState (3 , , _pxTaskStatusArray _uxArraySize -> -> -> 0 `i `*v `*ul ]
"4710
[; ;Source/FreeRTOS/tasks.c: 4710:             for( x = 0; x < uxArraySize; x++ )
{
[e = _x -> -> 0 `i `uc ]
[e $U 2078  ]
[e :U 2075 ]
"4711
[; ;Source/FreeRTOS/tasks.c: 4711:             {
{
"4712
[; ;Source/FreeRTOS/tasks.c: 4712:                 switch( pxTaskStatusArray[ x ].eCurrentState )
[e $U 2080  ]
"4713
[; ;Source/FreeRTOS/tasks.c: 4713:                 {
{
"4714
[; ;Source/FreeRTOS/tasks.c: 4714:                     case eRunning:
[e :U 2081 ]
"4715
[; ;Source/FreeRTOS/tasks.c: 4715:                         cStatus = ( 'X' );
[e = _cStatus -> -> 88 `ui `uc ]
"4716
[; ;Source/FreeRTOS/tasks.c: 4716:                         break;
[e $U 2079  ]
"4718
[; ;Source/FreeRTOS/tasks.c: 4718:                     case eReady:
[e :U 2082 ]
"4719
[; ;Source/FreeRTOS/tasks.c: 4719:                         cStatus = ( 'R' );
[e = _cStatus -> -> 82 `ui `uc ]
"4720
[; ;Source/FreeRTOS/tasks.c: 4720:                         break;
[e $U 2079  ]
"4722
[; ;Source/FreeRTOS/tasks.c: 4722:                     case eBlocked:
[e :U 2083 ]
"4723
[; ;Source/FreeRTOS/tasks.c: 4723:                         cStatus = ( 'B' );
[e = _cStatus -> -> 66 `ui `uc ]
"4724
[; ;Source/FreeRTOS/tasks.c: 4724:                         break;
[e $U 2079  ]
"4726
[; ;Source/FreeRTOS/tasks.c: 4726:                     case eSuspended:
[e :U 2084 ]
"4727
[; ;Source/FreeRTOS/tasks.c: 4727:                         cStatus = ( 'S' );
[e = _cStatus -> -> 83 `ui `uc ]
"4728
[; ;Source/FreeRTOS/tasks.c: 4728:                         break;
[e $U 2079  ]
"4730
[; ;Source/FreeRTOS/tasks.c: 4730:                     case eDeleted:
[e :U 2085 ]
"4731
[; ;Source/FreeRTOS/tasks.c: 4731:                         cStatus = ( 'D' );
[e = _cStatus -> -> 68 `ui `uc ]
"4732
[; ;Source/FreeRTOS/tasks.c: 4732:                         break;
[e $U 2079  ]
"4734
[; ;Source/FreeRTOS/tasks.c: 4734:                     case eInvalid:
[e :U 2086 ]
"4735
[; ;Source/FreeRTOS/tasks.c: 4735:                     default:
[e :U 2087 ]
"4737
[; ;Source/FreeRTOS/tasks.c: 4737:                         cStatus = ( char ) 0x00;
[e = _cStatus -> -> 0 `i `uc ]
"4738
[; ;Source/FreeRTOS/tasks.c: 4738:                         break;
[e $U 2079  ]
"4739
[; ;Source/FreeRTOS/tasks.c: 4739:                 }
}
[e $U 2079  ]
[e :U 2080 ]
[e [\ -> . *U + _pxTaskStatusArray * -> _x `ux -> -> # *U _pxTaskStatusArray `ui `ux 3 `ui , $ -> . `E7103 0 `ui 2081
 , $ -> . `E7103 1 `ui 2082
 , $ -> . `E7103 2 `ui 2083
 , $ -> . `E7103 3 `ui 2084
 , $ -> . `E7103 4 `ui 2085
 , $ -> . `E7103 5 `ui 2086
 2087 ]
[e :U 2079 ]
"4745
[; ;Source/FreeRTOS/tasks.c: 4745:                 Xprintf("%s",pxTaskStatusArray[ x ].pcTaskName);
[e ( _Xprintf , (. :s 135C . *U + _pxTaskStatusArray * -> _x `ux -> -> # *U _pxTaskStatusArray `ui `ux 1 ]
"4750
[; ;Source/FreeRTOS/tasks.c: 4750:                 Xprintf("\t%c\t%d\t%d\t%d\r\n", cStatus,
[e ( _Xprintf , , , , (. :s 136C -> _cStatus `i -> . *U + _pxTaskStatusArray * -> _x `ux -> -> # *U _pxTaskStatusArray `ui `ux 4 `ui -> . *U + _pxTaskStatusArray * -> _x `ux -> -> # *U _pxTaskStatusArray `ui `ux 8 `ui -> . *U + _pxTaskStatusArray * -> _x `ux -> -> # *U _pxTaskStatusArray `ui `ux 2 `ui ]
"4756
[; ;Source/FreeRTOS/tasks.c: 4756:             }
}
[e ++ _x -> -> 1 `i `uc ]
[e :U 2078 ]
[e $ < -> _x `i -> _uxArraySize `i 2075  ]
[e :U 2076 ]
}
"4757
[; ;Source/FreeRTOS/tasks.c: 4757:             Xprintf("-------------------------------------\r\n");
[e ( _Xprintf :s 137C ]
"4761
[; ;Source/FreeRTOS/tasks.c: 4761:             vPortFree( pxTaskStatusArray );
[e ( _vPortFree (1 -> _pxTaskStatusArray `*v ]
"4762
[; ;Source/FreeRTOS/tasks.c: 4762:         }
}
[e $U 2088  ]
"4763
[; ;Source/FreeRTOS/tasks.c: 4763:         else
[e :U 2074 ]
"4764
[; ;Source/FreeRTOS/tasks.c: 4764:         {
{
"4766
[; ;Source/FreeRTOS/tasks.c: 4766:         }
}
[e :U 2088 ]
"4767
[; ;Source/FreeRTOS/tasks.c: 4767:     }
[e :UE 2073 ]
}
"4893
[; ;Source/FreeRTOS/tasks.c: 4893: TickType_t uxTaskResetEventItemValue( void )
[v _uxTaskResetEventItemValue `(us ~T0 @X0 1 ef ]
"4894
[; ;Source/FreeRTOS/tasks.c: 4894: {
{
[e :U _uxTaskResetEventItemValue ]
[f ]
"4895
[; ;Source/FreeRTOS/tasks.c: 4895:     TickType_t uxReturn;
[v _uxReturn `us ~T0 @X0 1 a ]
"4897
[; ;Source/FreeRTOS/tasks.c: 4897:     uxReturn = ( ( &( pxCurrentTCB->xEventListItem ) )->xItemValue );
[e = _uxReturn . *U &U . *U _pxCurrentTCB 2 0 ]
"4901
[; ;Source/FreeRTOS/tasks.c: 4901:     ( ( &( pxCurrentTCB->xEventListItem ) )->xItemValue = ( ( ( TickType_t ) ( 3 ) - ( TickType_t ) pxCurrentTCB->uxPriority ) ) );
[e = . *U &U . *U _pxCurrentTCB 2 0 -> - -> -> -> 3 `i `us `ui -> -> . *U _pxCurrentTCB 3 `us `ui `us ]
"4903
[; ;Source/FreeRTOS/tasks.c: 4903:     return uxReturn;
[e ) _uxReturn ]
[e $UE 2089  ]
"4904
[; ;Source/FreeRTOS/tasks.c: 4904: }
[e :UE 2089 ]
}
"4926
[; ;Source/FreeRTOS/tasks.c: 4926:     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
[v _ulTaskGenericNotifyTake `(ul ~T0 @X0 1 ef3`uc`c`us ]
"4929
[; ;Source/FreeRTOS/tasks.c: 4929:     {
{
[e :U _ulTaskGenericNotifyTake ]
"4926
[; ;Source/FreeRTOS/tasks.c: 4926:     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
[v _uxIndexToWait `uc ~T0 @X0 1 r1 ]
"4927
[; ;Source/FreeRTOS/tasks.c: 4927:                                       BaseType_t xClearCountOnExit,
[v _xClearCountOnExit `c ~T0 @X0 1 r2 ]
"4928
[; ;Source/FreeRTOS/tasks.c: 4928:                                       TickType_t xTicksToWait )
[v _xTicksToWait `us ~T0 @X0 1 r3 ]
"4929
[; ;Source/FreeRTOS/tasks.c: 4929:     {
[f ]
"4930
[; ;Source/FreeRTOS/tasks.c: 4930:         uint32_t ulReturn;
[v _ulReturn `ul ~T0 @X0 1 a ]
"4932
[; ;Source/FreeRTOS/tasks.c: 4932:         if( ( uxIndexToWait < 1 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 4932 );
[e $ ! == -> < -> _uxIndexToWait `i -> 1 `i `i -> 0 `i 2091  ]
[e ( _Xprintf , (. :s 138C -> 4932 `i ]
[e :U 2091 ]
"4934
[; ;Source/FreeRTOS/tasks.c: 4934:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"4935
[; ;Source/FreeRTOS/tasks.c: 4935:         {
{
"4937
[; ;Source/FreeRTOS/tasks.c: 4937:             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
[e $ ! == *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux -> 0 `ul 2092  ]
"4938
[; ;Source/FreeRTOS/tasks.c: 4938:             {
{
"4940
[; ;Source/FreeRTOS/tasks.c: 4940:                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = ( ( uint8_t ) 1 );
[e = *U + &U . *U _pxCurrentTCB 10 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 10 `ui `ux -> -> 1 `i `uc ]
"4942
[; ;Source/FreeRTOS/tasks.c: 4942:                 if( xTicksToWait > ( TickType_t ) 0 )
[e $ ! > -> _xTicksToWait `ui -> -> -> 0 `i `us `ui 2093  ]
"4943
[; ;Source/FreeRTOS/tasks.c: 4943:                 {
{
"4944
[; ;Source/FreeRTOS/tasks.c: 4944:                     prvAddCurrentTaskToDelayedList( xTicksToWait, ( ( BaseType_t ) 1 ) );
[e ( _prvAddCurrentTaskToDelayedList (2 , _xTicksToWait -> -> 1 `i `c ]
"4951
[; ;Source/FreeRTOS/tasks.c: 4951:                     vPortYield();
[e ( _vPortYield ..  ]
"4952
[; ;Source/FreeRTOS/tasks.c: 4952:                 }
}
[e $U 2094  ]
"4953
[; ;Source/FreeRTOS/tasks.c: 4953:                 else
[e :U 2093 ]
"4954
[; ;Source/FreeRTOS/tasks.c: 4954:                 {
{
"4956
[; ;Source/FreeRTOS/tasks.c: 4956:                 }
}
[e :U 2094 ]
"4957
[; ;Source/FreeRTOS/tasks.c: 4957:             }
}
[e $U 2095  ]
"4958
[; ;Source/FreeRTOS/tasks.c: 4958:             else
[e :U 2092 ]
"4959
[; ;Source/FreeRTOS/tasks.c: 4959:             {
{
"4961
[; ;Source/FreeRTOS/tasks.c: 4961:             }
}
[e :U 2095 ]
"4962
[; ;Source/FreeRTOS/tasks.c: 4962:         }
}
"4963
[; ;Source/FreeRTOS/tasks.c: 4963:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2096  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2096 ]
"4965
[; ;Source/FreeRTOS/tasks.c: 4965:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"4966
[; ;Source/FreeRTOS/tasks.c: 4966:         {
{
"4968
[; ;Source/FreeRTOS/tasks.c: 4968:             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
[e = _ulReturn *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux ]
"4970
[; ;Source/FreeRTOS/tasks.c: 4970:             if( ulReturn != 0UL )
[e $ ! != _ulReturn -> 0 `ul 2097  ]
"4971
[; ;Source/FreeRTOS/tasks.c: 4971:             {
{
"4972
[; ;Source/FreeRTOS/tasks.c: 4972:                 if( xClearCountOnExit != ( ( BaseType_t ) 0 ) )
[e $ ! != -> _xClearCountOnExit `i -> -> -> 0 `i `c `i 2098  ]
"4973
[; ;Source/FreeRTOS/tasks.c: 4973:                 {
{
"4974
[; ;Source/FreeRTOS/tasks.c: 4974:                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
[e = *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux -> 0 `ul ]
"4975
[; ;Source/FreeRTOS/tasks.c: 4975:                 }
}
[e $U 2099  ]
"4976
[; ;Source/FreeRTOS/tasks.c: 4976:                 else
[e :U 2098 ]
"4977
[; ;Source/FreeRTOS/tasks.c: 4977:                 {
{
"4978
[; ;Source/FreeRTOS/tasks.c: 4978:                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
[e = *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux - _ulReturn -> -> 1 `i `ul ]
"4979
[; ;Source/FreeRTOS/tasks.c: 4979:                 }
}
[e :U 2099 ]
"4980
[; ;Source/FreeRTOS/tasks.c: 4980:             }
}
[e $U 2100  ]
"4981
[; ;Source/FreeRTOS/tasks.c: 4981:             else
[e :U 2097 ]
"4982
[; ;Source/FreeRTOS/tasks.c: 4982:             {
{
"4984
[; ;Source/FreeRTOS/tasks.c: 4984:             }
}
[e :U 2100 ]
"4986
[; ;Source/FreeRTOS/tasks.c: 4986:             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = ( ( uint8_t ) 0 );
[e = *U + &U . *U _pxCurrentTCB 10 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 10 `ui `ux -> -> 0 `i `uc ]
"4987
[; ;Source/FreeRTOS/tasks.c: 4987:         }
}
"4988
[; ;Source/FreeRTOS/tasks.c: 4988:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2101  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2101 ]
"4990
[; ;Source/FreeRTOS/tasks.c: 4990:         return ulReturn;
[e ) _ulReturn ]
[e $UE 2090  ]
"4991
[; ;Source/FreeRTOS/tasks.c: 4991:     }
[e :UE 2090 ]
}
"4998
[; ;Source/FreeRTOS/tasks.c: 4998:     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
[v _xTaskGenericNotifyWait `(c ~T0 @X0 1 ef5`uc`ul`ul`*ul`us ]
"5003
[; ;Source/FreeRTOS/tasks.c: 5003:     {
{
[e :U _xTaskGenericNotifyWait ]
"4998
[; ;Source/FreeRTOS/tasks.c: 4998:     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
[v _uxIndexToWait `uc ~T0 @X0 1 r1 ]
"4999
[; ;Source/FreeRTOS/tasks.c: 4999:                                        uint32_t ulBitsToClearOnEntry,
[v _ulBitsToClearOnEntry `ul ~T0 @X0 1 r2 ]
"5000
[; ;Source/FreeRTOS/tasks.c: 5000:                                        uint32_t ulBitsToClearOnExit,
[v _ulBitsToClearOnExit `ul ~T0 @X0 1 r3 ]
"5001
[; ;Source/FreeRTOS/tasks.c: 5001:                                        uint32_t * pulNotificationValue,
[v _pulNotificationValue `*ul ~T0 @X0 1 r4 ]
"5002
[; ;Source/FreeRTOS/tasks.c: 5002:                                        TickType_t xTicksToWait )
[v _xTicksToWait `us ~T0 @X0 1 r5 ]
"5003
[; ;Source/FreeRTOS/tasks.c: 5003:     {
[f ]
"5004
[; ;Source/FreeRTOS/tasks.c: 5004:         BaseType_t xReturn;
[v _xReturn `c ~T0 @X0 1 a ]
"5006
[; ;Source/FreeRTOS/tasks.c: 5006:         if( ( uxIndexToWait < 1 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5006 );
[e $ ! == -> < -> _uxIndexToWait `i -> 1 `i `i -> 0 `i 2103  ]
[e ( _Xprintf , (. :s 139C -> 5006 `i ]
[e :U 2103 ]
"5008
[; ;Source/FreeRTOS/tasks.c: 5008:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"5009
[; ;Source/FreeRTOS/tasks.c: 5009:         {
{
"5011
[; ;Source/FreeRTOS/tasks.c: 5011:             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != ( ( uint8_t ) 2 ) )
[e $ ! != -> *U + &U . *U _pxCurrentTCB 10 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 10 `ui `ux `i -> -> -> 2 `i `uc `i 2104  ]
"5012
[; ;Source/FreeRTOS/tasks.c: 5012:             {
{
"5016
[; ;Source/FreeRTOS/tasks.c: 5016:                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
[e =& *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux -> ~ _ulBitsToClearOnEntry `ul ]
"5019
[; ;Source/FreeRTOS/tasks.c: 5019:                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = ( ( uint8_t ) 1 );
[e = *U + &U . *U _pxCurrentTCB 10 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 10 `ui `ux -> -> 1 `i `uc ]
"5021
[; ;Source/FreeRTOS/tasks.c: 5021:                 if( xTicksToWait > ( TickType_t ) 0 )
[e $ ! > -> _xTicksToWait `ui -> -> -> 0 `i `us `ui 2105  ]
"5022
[; ;Source/FreeRTOS/tasks.c: 5022:                 {
{
"5023
[; ;Source/FreeRTOS/tasks.c: 5023:                     prvAddCurrentTaskToDelayedList( xTicksToWait, ( ( BaseType_t ) 1 ) );
[e ( _prvAddCurrentTaskToDelayedList (2 , _xTicksToWait -> -> 1 `i `c ]
"5030
[; ;Source/FreeRTOS/tasks.c: 5030:                     vPortYield();
[e ( _vPortYield ..  ]
"5031
[; ;Source/FreeRTOS/tasks.c: 5031:                 }
}
[e $U 2106  ]
"5032
[; ;Source/FreeRTOS/tasks.c: 5032:                 else
[e :U 2105 ]
"5033
[; ;Source/FreeRTOS/tasks.c: 5033:                 {
{
"5035
[; ;Source/FreeRTOS/tasks.c: 5035:                 }
}
[e :U 2106 ]
"5036
[; ;Source/FreeRTOS/tasks.c: 5036:             }
}
[e $U 2107  ]
"5037
[; ;Source/FreeRTOS/tasks.c: 5037:             else
[e :U 2104 ]
"5038
[; ;Source/FreeRTOS/tasks.c: 5038:             {
{
"5040
[; ;Source/FreeRTOS/tasks.c: 5040:             }
}
[e :U 2107 ]
"5041
[; ;Source/FreeRTOS/tasks.c: 5041:         }
}
"5042
[; ;Source/FreeRTOS/tasks.c: 5042:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2108  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2108 ]
"5044
[; ;Source/FreeRTOS/tasks.c: 5044:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"5045
[; ;Source/FreeRTOS/tasks.c: 5045:         {
{
"5048
[; ;Source/FreeRTOS/tasks.c: 5048:             if( pulNotificationValue != ((void*)0) )
[e $ ! != _pulNotificationValue -> -> -> 0 `i `*v `*ul 2109  ]
"5049
[; ;Source/FreeRTOS/tasks.c: 5049:             {
{
"5052
[; ;Source/FreeRTOS/tasks.c: 5052:                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
[e = *U _pulNotificationValue *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux ]
"5053
[; ;Source/FreeRTOS/tasks.c: 5053:             }
}
[e :U 2109 ]
"5059
[; ;Source/FreeRTOS/tasks.c: 5059:             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != ( ( uint8_t ) 2 ) )
[e $ ! != -> *U + &U . *U _pxCurrentTCB 10 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 10 `ui `ux `i -> -> -> 2 `i `uc `i 2110  ]
"5060
[; ;Source/FreeRTOS/tasks.c: 5060:             {
{
"5062
[; ;Source/FreeRTOS/tasks.c: 5062:                 xReturn = ( ( BaseType_t ) 0 );
[e = _xReturn -> -> 0 `i `c ]
"5063
[; ;Source/FreeRTOS/tasks.c: 5063:             }
}
[e $U 2111  ]
"5064
[; ;Source/FreeRTOS/tasks.c: 5064:             else
[e :U 2110 ]
"5065
[; ;Source/FreeRTOS/tasks.c: 5065:             {
{
"5068
[; ;Source/FreeRTOS/tasks.c: 5068:                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
[e =& *U + &U . *U _pxCurrentTCB 9 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 9 `ui `ux -> ~ _ulBitsToClearOnExit `ul ]
"5069
[; ;Source/FreeRTOS/tasks.c: 5069:                 xReturn = ( ( BaseType_t ) 1 );
[e = _xReturn -> -> 1 `i `c ]
"5070
[; ;Source/FreeRTOS/tasks.c: 5070:             }
}
[e :U 2111 ]
"5072
[; ;Source/FreeRTOS/tasks.c: 5072:             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = ( ( uint8_t ) 0 );
[e = *U + &U . *U _pxCurrentTCB 10 * -> _uxIndexToWait `ux -> -> # *U &U . *U _pxCurrentTCB 10 `ui `ux -> -> 0 `i `uc ]
"5073
[; ;Source/FreeRTOS/tasks.c: 5073:         }
}
"5074
[; ;Source/FreeRTOS/tasks.c: 5074:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2112  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2112 ]
"5076
[; ;Source/FreeRTOS/tasks.c: 5076:         return xReturn;
[e ) _xReturn ]
[e $UE 2102  ]
"5077
[; ;Source/FreeRTOS/tasks.c: 5077:     }
[e :UE 2102 ]
}
"5084
[; ;Source/FreeRTOS/tasks.c: 5084:     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
[v _xTaskGenericNotify `(c ~T0 @X0 1 ef5`*S936`uc`ul`E7111`*ul ]
"5089
[; ;Source/FreeRTOS/tasks.c: 5089:     {
{
[e :U _xTaskGenericNotify ]
"5084
[; ;Source/FreeRTOS/tasks.c: 5084:     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
[v _xTaskToNotify `*S936 ~T0 @X0 1 r1 ]
"5085
[; ;Source/FreeRTOS/tasks.c: 5085:                                    UBaseType_t uxIndexToNotify,
[v _uxIndexToNotify `uc ~T0 @X0 1 r2 ]
"5086
[; ;Source/FreeRTOS/tasks.c: 5086:                                    uint32_t ulValue,
[v _ulValue `ul ~T0 @X0 1 r3 ]
"5087
[; ;Source/FreeRTOS/tasks.c: 5087:                                    eNotifyAction eAction,
[v _eAction `E7111 ~T0 @X0 1 r4 ]
"5088
[; ;Source/FreeRTOS/tasks.c: 5088:                                    uint32_t * pulPreviousNotificationValue )
[v _pulPreviousNotificationValue `*ul ~T0 @X0 1 r5 ]
"5089
[; ;Source/FreeRTOS/tasks.c: 5089:     {
[f ]
"5090
[; ;Source/FreeRTOS/tasks.c: 5090:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"5091
[; ;Source/FreeRTOS/tasks.c: 5091:         BaseType_t xReturn = ( ( ( BaseType_t ) 1 ) );
[v _xReturn `c ~T0 @X0 1 a ]
[e = _xReturn -> -> 1 `i `c ]
"5092
[; ;Source/FreeRTOS/tasks.c: 5092:         uint8_t ucOriginalNotifyState;
[v _ucOriginalNotifyState `uc ~T0 @X0 1 a ]
"5094
[; ;Source/FreeRTOS/tasks.c: 5094:         if( ( uxIndexToNotify < 1 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5094 );
[e $ ! == -> < -> _uxIndexToNotify `i -> 1 `i `i -> 0 `i 2114  ]
[e ( _Xprintf , (. :s 140C -> 5094 `i ]
[e :U 2114 ]
"5095
[; ;Source/FreeRTOS/tasks.c: 5095:         if( ( xTaskToNotify ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5095 );
[e $ ! == _xTaskToNotify -> -> 0 `i `*S936 2115  ]
[e ( _Xprintf , (. :s 141C -> 5095 `i ]
[e :U 2115 ]
"5096
[; ;Source/FreeRTOS/tasks.c: 5096:         pxTCB = xTaskToNotify;
[e = _pxTCB _xTaskToNotify ]
"5098
[; ;Source/FreeRTOS/tasks.c: 5098:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"5099
[; ;Source/FreeRTOS/tasks.c: 5099:         {
{
"5100
[; ;Source/FreeRTOS/tasks.c: 5100:             if( pulPreviousNotificationValue != ((void*)0) )
[e $ ! != _pulPreviousNotificationValue -> -> -> 0 `i `*v `*ul 2116  ]
"5101
[; ;Source/FreeRTOS/tasks.c: 5101:             {
{
"5102
[; ;Source/FreeRTOS/tasks.c: 5102:                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
[e = *U _pulPreviousNotificationValue *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux ]
"5103
[; ;Source/FreeRTOS/tasks.c: 5103:             }
}
[e :U 2116 ]
"5105
[; ;Source/FreeRTOS/tasks.c: 5105:             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
[e = _ucOriginalNotifyState *U + &U . *U _pxTCB 10 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux ]
"5107
[; ;Source/FreeRTOS/tasks.c: 5107:             pxTCB->ucNotifyState[ uxIndexToNotify ] = ( ( uint8_t ) 2 );
[e = *U + &U . *U _pxTCB 10 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux -> -> 2 `i `uc ]
"5109
[; ;Source/FreeRTOS/tasks.c: 5109:             switch( eAction )
[e $U 2118  ]
"5110
[; ;Source/FreeRTOS/tasks.c: 5110:             {
{
"5111
[; ;Source/FreeRTOS/tasks.c: 5111:                 case eSetBits:
[e :U 2119 ]
"5112
[; ;Source/FreeRTOS/tasks.c: 5112:                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
[e =| *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux -> _ulValue `ul ]
"5113
[; ;Source/FreeRTOS/tasks.c: 5113:                     break;
[e $U 2117  ]
"5115
[; ;Source/FreeRTOS/tasks.c: 5115:                 case eIncrement:
[e :U 2120 ]
"5116
[; ;Source/FreeRTOS/tasks.c: 5116:                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
[e ++ *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux -> -> 1 `i `ul ]
"5117
[; ;Source/FreeRTOS/tasks.c: 5117:                     break;
[e $U 2117  ]
"5119
[; ;Source/FreeRTOS/tasks.c: 5119:                 case eSetValueWithOverwrite:
[e :U 2121 ]
"5120
[; ;Source/FreeRTOS/tasks.c: 5120:                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
[e = *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux _ulValue ]
"5121
[; ;Source/FreeRTOS/tasks.c: 5121:                     break;
[e $U 2117  ]
"5123
[; ;Source/FreeRTOS/tasks.c: 5123:                 case eSetValueWithoutOverwrite:
[e :U 2122 ]
"5125
[; ;Source/FreeRTOS/tasks.c: 5125:                     if( ucOriginalNotifyState != ( ( uint8_t ) 2 ) )
[e $ ! != -> _ucOriginalNotifyState `i -> -> -> 2 `i `uc `i 2123  ]
"5126
[; ;Source/FreeRTOS/tasks.c: 5126:                     {
{
"5127
[; ;Source/FreeRTOS/tasks.c: 5127:                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
[e = *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux _ulValue ]
"5128
[; ;Source/FreeRTOS/tasks.c: 5128:                     }
}
[e $U 2124  ]
"5129
[; ;Source/FreeRTOS/tasks.c: 5129:                     else
[e :U 2123 ]
"5130
[; ;Source/FreeRTOS/tasks.c: 5130:                     {
{
"5132
[; ;Source/FreeRTOS/tasks.c: 5132:                         xReturn = ( ( ( BaseType_t ) 0 ) );
[e = _xReturn -> -> 0 `i `c ]
"5133
[; ;Source/FreeRTOS/tasks.c: 5133:                     }
}
[e :U 2124 ]
"5135
[; ;Source/FreeRTOS/tasks.c: 5135:                     break;
[e $U 2117  ]
"5137
[; ;Source/FreeRTOS/tasks.c: 5137:                 case eNoAction:
[e :U 2125 ]
"5141
[; ;Source/FreeRTOS/tasks.c: 5141:                     break;
[e $U 2117  ]
"5143
[; ;Source/FreeRTOS/tasks.c: 5143:                 default:
[e :U 2126 ]
"5148
[; ;Source/FreeRTOS/tasks.c: 5148:                     if( ( xTickCount == ( TickType_t ) 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5148 );
[e $ ! == -> == -> _xTickCount `ui -> -> -> 0 `i `us `ui `i -> 0 `i 2127  ]
[e ( _Xprintf , (. :s 142C -> 5148 `i ]
[e :U 2127 ]
"5150
[; ;Source/FreeRTOS/tasks.c: 5150:                     break;
[e $U 2117  ]
"5151
[; ;Source/FreeRTOS/tasks.c: 5151:             }
}
[e $U 2117  ]
[e :U 2118 ]
[e [\ -> _eAction `ui , $ -> . `E7111 1 `ui 2119
 , $ -> . `E7111 2 `ui 2120
 , $ -> . `E7111 3 `ui 2121
 , $ -> . `E7111 4 `ui 2122
 , $ -> . `E7111 0 `ui 2125
 2126 ]
[e :U 2117 ]
"5157
[; ;Source/FreeRTOS/tasks.c: 5157:             if( ucOriginalNotifyState == ( ( uint8_t ) 1 ) )
[e $ ! == -> _ucOriginalNotifyState `i -> -> -> 1 `i `uc `i 2128  ]
"5158
[; ;Source/FreeRTOS/tasks.c: 5158:             {
{
"5159
[; ;Source/FreeRTOS/tasks.c: 5159:                 { List_t * const pxList = ( &( pxTCB->xStateListItem ) )->pvContainer; ( &( pxTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xStateListItem ) )->pxPrevious; ( &( pxTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xStateListItem ) )->pxPrevious; } ( &( pxTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7869 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 1 4 ]
[e = . *U . *U &U . *U _pxTCB 1 1 2 . *U &U . *U _pxTCB 1 2 ]
[e = . *U . *U &U . *U _pxTCB 1 2 1 . *U &U . *U _pxTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 1 2129  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 1 2 ]
}
[e :U 2129 ]
[e = . *U &U . *U _pxTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"5160
[; ;Source/FreeRTOS/tasks.c: 5160:                 ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 2130  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 2130 ]
}
{
[v F7871 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"5163
[; ;Source/FreeRTOS/tasks.c: 5163:                 if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == ((void*)0) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5163 );
[e $ ! == -> == . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 `i -> 0 `i 2131  ]
[e ( _Xprintf , (. :s 143C -> 5163 `i ]
[e :U 2131 ]
"5181
[; ;Source/FreeRTOS/tasks.c: 5181:                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
[e $ ! > -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 2132  ]
"5182
[; ;Source/FreeRTOS/tasks.c: 5182:                 {
{
"5185
[; ;Source/FreeRTOS/tasks.c: 5185:                     vPortYield();
[e ( _vPortYield ..  ]
"5186
[; ;Source/FreeRTOS/tasks.c: 5186:                 }
}
[e $U 2133  ]
"5187
[; ;Source/FreeRTOS/tasks.c: 5187:                 else
[e :U 2132 ]
"5188
[; ;Source/FreeRTOS/tasks.c: 5188:                 {
{
"5190
[; ;Source/FreeRTOS/tasks.c: 5190:                 }
}
[e :U 2133 ]
"5191
[; ;Source/FreeRTOS/tasks.c: 5191:             }
}
[e $U 2134  ]
"5192
[; ;Source/FreeRTOS/tasks.c: 5192:             else
[e :U 2128 ]
"5193
[; ;Source/FreeRTOS/tasks.c: 5193:             {
{
"5195
[; ;Source/FreeRTOS/tasks.c: 5195:             }
}
[e :U 2134 ]
"5196
[; ;Source/FreeRTOS/tasks.c: 5196:         }
}
"5197
[; ;Source/FreeRTOS/tasks.c: 5197:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2135  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2135 ]
"5199
[; ;Source/FreeRTOS/tasks.c: 5199:         return xReturn;
[e ) _xReturn ]
[e $UE 2113  ]
"5200
[; ;Source/FreeRTOS/tasks.c: 5200:     }
[e :UE 2113 ]
}
"5207
[; ;Source/FreeRTOS/tasks.c: 5207:     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
[v _xTaskGenericNotifyFromISR `(c ~T0 @X0 1 ef6`*S936`uc`ul`E7111`*ul`*c ]
"5213
[; ;Source/FreeRTOS/tasks.c: 5213:     {
{
[e :U _xTaskGenericNotifyFromISR ]
"5207
[; ;Source/FreeRTOS/tasks.c: 5207:     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
[v _xTaskToNotify `*S936 ~T0 @X0 1 r1 ]
"5208
[; ;Source/FreeRTOS/tasks.c: 5208:                                           UBaseType_t uxIndexToNotify,
[v _uxIndexToNotify `uc ~T0 @X0 1 r2 ]
"5209
[; ;Source/FreeRTOS/tasks.c: 5209:                                           uint32_t ulValue,
[v _ulValue `ul ~T0 @X0 1 r3 ]
"5210
[; ;Source/FreeRTOS/tasks.c: 5210:                                           eNotifyAction eAction,
[v _eAction `E7111 ~T0 @X0 1 r4 ]
"5211
[; ;Source/FreeRTOS/tasks.c: 5211:                                           uint32_t * pulPreviousNotificationValue,
[v _pulPreviousNotificationValue `*ul ~T0 @X0 1 r5 ]
"5212
[; ;Source/FreeRTOS/tasks.c: 5212:                                           BaseType_t * pxHigherPriorityTaskWoken )
[v _pxHigherPriorityTaskWoken `*c ~T0 @X0 1 r6 ]
"5213
[; ;Source/FreeRTOS/tasks.c: 5213:     {
[f ]
"5214
[; ;Source/FreeRTOS/tasks.c: 5214:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"5215
[; ;Source/FreeRTOS/tasks.c: 5215:         uint8_t ucOriginalNotifyState;
[v _ucOriginalNotifyState `uc ~T0 @X0 1 a ]
"5216
[; ;Source/FreeRTOS/tasks.c: 5216:         BaseType_t xReturn = ( ( ( BaseType_t ) 1 ) );
[v _xReturn `c ~T0 @X0 1 a ]
[e = _xReturn -> -> 1 `i `c ]
"5217
[; ;Source/FreeRTOS/tasks.c: 5217:         UBaseType_t uxSavedInterruptStatus;
[v _uxSavedInterruptStatus `uc ~T0 @X0 1 a ]
"5219
[; ;Source/FreeRTOS/tasks.c: 5219:         if( ( xTaskToNotify ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5219 );
[e $ ! == _xTaskToNotify -> -> 0 `i `*S936 2137  ]
[e ( _Xprintf , (. :s 144C -> 5219 `i ]
[e :U 2137 ]
"5220
[; ;Source/FreeRTOS/tasks.c: 5220:         if( ( uxIndexToNotify < 1 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5220 );
[e $ ! == -> < -> _uxIndexToNotify `i -> 1 `i `i -> 0 `i 2138  ]
[e ( _Xprintf , (. :s 145C -> 5220 `i ]
[e :U 2138 ]
"5240
[; ;Source/FreeRTOS/tasks.c: 5240:         pxTCB = xTaskToNotify;
[e = _pxTCB _xTaskToNotify ]
"5242
[; ;Source/FreeRTOS/tasks.c: 5242:         uxSavedInterruptStatus = 0;
[e = _uxSavedInterruptStatus -> -> 0 `i `uc ]
"5243
[; ;Source/FreeRTOS/tasks.c: 5243:         {
{
"5244
[; ;Source/FreeRTOS/tasks.c: 5244:             if( pulPreviousNotificationValue != ((void*)0) )
[e $ ! != _pulPreviousNotificationValue -> -> -> 0 `i `*v `*ul 2139  ]
"5245
[; ;Source/FreeRTOS/tasks.c: 5245:             {
{
"5246
[; ;Source/FreeRTOS/tasks.c: 5246:                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
[e = *U _pulPreviousNotificationValue *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux ]
"5247
[; ;Source/FreeRTOS/tasks.c: 5247:             }
}
[e :U 2139 ]
"5249
[; ;Source/FreeRTOS/tasks.c: 5249:             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
[e = _ucOriginalNotifyState *U + &U . *U _pxTCB 10 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux ]
"5250
[; ;Source/FreeRTOS/tasks.c: 5250:             pxTCB->ucNotifyState[ uxIndexToNotify ] = ( ( uint8_t ) 2 );
[e = *U + &U . *U _pxTCB 10 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux -> -> 2 `i `uc ]
"5252
[; ;Source/FreeRTOS/tasks.c: 5252:             switch( eAction )
[e $U 2141  ]
"5253
[; ;Source/FreeRTOS/tasks.c: 5253:             {
{
"5254
[; ;Source/FreeRTOS/tasks.c: 5254:                 case eSetBits:
[e :U 2142 ]
"5255
[; ;Source/FreeRTOS/tasks.c: 5255:                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
[e =| *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux -> _ulValue `ul ]
"5256
[; ;Source/FreeRTOS/tasks.c: 5256:                     break;
[e $U 2140  ]
"5258
[; ;Source/FreeRTOS/tasks.c: 5258:                 case eIncrement:
[e :U 2143 ]
"5259
[; ;Source/FreeRTOS/tasks.c: 5259:                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
[e ++ *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux -> -> 1 `i `ul ]
"5260
[; ;Source/FreeRTOS/tasks.c: 5260:                     break;
[e $U 2140  ]
"5262
[; ;Source/FreeRTOS/tasks.c: 5262:                 case eSetValueWithOverwrite:
[e :U 2144 ]
"5263
[; ;Source/FreeRTOS/tasks.c: 5263:                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
[e = *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux _ulValue ]
"5264
[; ;Source/FreeRTOS/tasks.c: 5264:                     break;
[e $U 2140  ]
"5266
[; ;Source/FreeRTOS/tasks.c: 5266:                 case eSetValueWithoutOverwrite:
[e :U 2145 ]
"5268
[; ;Source/FreeRTOS/tasks.c: 5268:                     if( ucOriginalNotifyState != ( ( uint8_t ) 2 ) )
[e $ ! != -> _ucOriginalNotifyState `i -> -> -> 2 `i `uc `i 2146  ]
"5269
[; ;Source/FreeRTOS/tasks.c: 5269:                     {
{
"5270
[; ;Source/FreeRTOS/tasks.c: 5270:                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
[e = *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux _ulValue ]
"5271
[; ;Source/FreeRTOS/tasks.c: 5271:                     }
}
[e $U 2147  ]
"5272
[; ;Source/FreeRTOS/tasks.c: 5272:                     else
[e :U 2146 ]
"5273
[; ;Source/FreeRTOS/tasks.c: 5273:                     {
{
"5275
[; ;Source/FreeRTOS/tasks.c: 5275:                         xReturn = ( ( ( BaseType_t ) 0 ) );
[e = _xReturn -> -> 0 `i `c ]
"5276
[; ;Source/FreeRTOS/tasks.c: 5276:                     }
}
[e :U 2147 ]
"5278
[; ;Source/FreeRTOS/tasks.c: 5278:                     break;
[e $U 2140  ]
"5280
[; ;Source/FreeRTOS/tasks.c: 5280:                 case eNoAction:
[e :U 2148 ]
"5284
[; ;Source/FreeRTOS/tasks.c: 5284:                     break;
[e $U 2140  ]
"5286
[; ;Source/FreeRTOS/tasks.c: 5286:                 default:
[e :U 2149 ]
"5291
[; ;Source/FreeRTOS/tasks.c: 5291:                     if( ( xTickCount == ( TickType_t ) 0 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5291 );
[e $ ! == -> == -> _xTickCount `ui -> -> -> 0 `i `us `ui `i -> 0 `i 2150  ]
[e ( _Xprintf , (. :s 146C -> 5291 `i ]
[e :U 2150 ]
"5292
[; ;Source/FreeRTOS/tasks.c: 5292:                     break;
[e $U 2140  ]
"5293
[; ;Source/FreeRTOS/tasks.c: 5293:             }
}
[e $U 2140  ]
[e :U 2141 ]
[e [\ -> _eAction `ui , $ -> . `E7111 1 `ui 2142
 , $ -> . `E7111 2 `ui 2143
 , $ -> . `E7111 3 `ui 2144
 , $ -> . `E7111 4 `ui 2145
 , $ -> . `E7111 0 `ui 2148
 2149 ]
[e :U 2140 ]
"5299
[; ;Source/FreeRTOS/tasks.c: 5299:             if( ucOriginalNotifyState == ( ( uint8_t ) 1 ) )
[e $ ! == -> _ucOriginalNotifyState `i -> -> -> 1 `i `uc `i 2151  ]
"5300
[; ;Source/FreeRTOS/tasks.c: 5300:             {
{
"5302
[; ;Source/FreeRTOS/tasks.c: 5302:                 if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == ((void*)0) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5302 );
[e $ ! == -> == . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 `i -> 0 `i 2152  ]
[e ( _Xprintf , (. :s 147C -> 5302 `i ]
[e :U 2152 ]
"5304
[; ;Source/FreeRTOS/tasks.c: 5304:                 if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! == -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 2153  ]
"5305
[; ;Source/FreeRTOS/tasks.c: 5305:                 {
{
"5306
[; ;Source/FreeRTOS/tasks.c: 5306:                     { List_t * const pxList = ( &( pxTCB->xStateListItem ) )->pvContainer; ( &( pxTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xStateListItem ) )->pxPrevious; ( &( pxTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xStateListItem ) )->pxPrevious; } ( &( pxTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7884 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 1 4 ]
[e = . *U . *U &U . *U _pxTCB 1 1 2 . *U &U . *U _pxTCB 1 2 ]
[e = . *U . *U &U . *U _pxTCB 1 2 1 . *U &U . *U _pxTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 1 2154  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 1 2 ]
}
[e :U 2154 ]
[e = . *U &U . *U _pxTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"5307
[; ;Source/FreeRTOS/tasks.c: 5307:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 2155  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 2155 ]
}
{
[v F7886 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"5308
[; ;Source/FreeRTOS/tasks.c: 5308:                 }
}
[e $U 2156  ]
"5309
[; ;Source/FreeRTOS/tasks.c: 5309:                 else
[e :U 2153 ]
"5310
[; ;Source/FreeRTOS/tasks.c: 5310:                 {
{
"5313
[; ;Source/FreeRTOS/tasks.c: 5313:                     { ListItem_t * const pxIndex = ( &( xPendingReadyList ) )->pxIndex; ; ; ( &( pxTCB->xEventListItem ) )->pxNext = pxIndex; ( &( pxTCB->xEventListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( pxTCB->xEventListItem ) ); pxIndex->pxPrevious = ( &( pxTCB->xEventListItem ) ); ( &( pxTCB->xEventListItem ) )->pvContainer = ( &( xPendingReadyList ) ); ( ( &( xPendingReadyList ) )->uxNumberOfItems )++; };
{
[v F7888 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U _xPendingReadyList 1 ]
[e = . *U &U . *U _pxTCB 2 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 2 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 2 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 2 ]
[e = . *U &U . *U _pxTCB 2 4 &U _xPendingReadyList ]
[e ++ . *U &U _xPendingReadyList 0 -> -> 1 `i `Vuc ]
}
"5314
[; ;Source/FreeRTOS/tasks.c: 5314:                 }
}
[e :U 2156 ]
"5316
[; ;Source/FreeRTOS/tasks.c: 5316:                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
[e $ ! > -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 2157  ]
"5317
[; ;Source/FreeRTOS/tasks.c: 5317:                 {
{
"5320
[; ;Source/FreeRTOS/tasks.c: 5320:                     if( pxHigherPriorityTaskWoken != ((void*)0) )
[e $ ! != _pxHigherPriorityTaskWoken -> -> -> 0 `i `*v `*c 2158  ]
"5321
[; ;Source/FreeRTOS/tasks.c: 5321:                     {
{
"5322
[; ;Source/FreeRTOS/tasks.c: 5322:                         *pxHigherPriorityTaskWoken = ( ( BaseType_t ) 1 );
[e = *U _pxHigherPriorityTaskWoken -> -> 1 `i `c ]
"5323
[; ;Source/FreeRTOS/tasks.c: 5323:                     }
}
[e :U 2158 ]
"5328
[; ;Source/FreeRTOS/tasks.c: 5328:                     xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"5329
[; ;Source/FreeRTOS/tasks.c: 5329:                 }
}
[e $U 2159  ]
"5330
[; ;Source/FreeRTOS/tasks.c: 5330:                 else
[e :U 2157 ]
"5331
[; ;Source/FreeRTOS/tasks.c: 5331:                 {
{
"5333
[; ;Source/FreeRTOS/tasks.c: 5333:                 }
}
[e :U 2159 ]
"5334
[; ;Source/FreeRTOS/tasks.c: 5334:             }
}
[e :U 2151 ]
"5335
[; ;Source/FreeRTOS/tasks.c: 5335:         }
}
"5336
[; ;Source/FreeRTOS/tasks.c: 5336:         ( void ) ( uxSavedInterruptStatus );
[e _uxSavedInterruptStatus ]
"5338
[; ;Source/FreeRTOS/tasks.c: 5338:         return xReturn;
[e ) _xReturn ]
[e $UE 2136  ]
"5339
[; ;Source/FreeRTOS/tasks.c: 5339:     }
[e :UE 2136 ]
}
"5346
[; ;Source/FreeRTOS/tasks.c: 5346:     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
[v _vTaskGenericNotifyGiveFromISR `(v ~T0 @X0 1 ef3`*S936`uc`*c ]
"5349
[; ;Source/FreeRTOS/tasks.c: 5349:     {
{
[e :U _vTaskGenericNotifyGiveFromISR ]
"5346
[; ;Source/FreeRTOS/tasks.c: 5346:     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
[v _xTaskToNotify `*S936 ~T0 @X0 1 r1 ]
"5347
[; ;Source/FreeRTOS/tasks.c: 5347:                                         UBaseType_t uxIndexToNotify,
[v _uxIndexToNotify `uc ~T0 @X0 1 r2 ]
"5348
[; ;Source/FreeRTOS/tasks.c: 5348:                                         BaseType_t * pxHigherPriorityTaskWoken )
[v _pxHigherPriorityTaskWoken `*c ~T0 @X0 1 r3 ]
"5349
[; ;Source/FreeRTOS/tasks.c: 5349:     {
[f ]
"5350
[; ;Source/FreeRTOS/tasks.c: 5350:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"5351
[; ;Source/FreeRTOS/tasks.c: 5351:         uint8_t ucOriginalNotifyState;
[v _ucOriginalNotifyState `uc ~T0 @X0 1 a ]
"5352
[; ;Source/FreeRTOS/tasks.c: 5352:         UBaseType_t uxSavedInterruptStatus;
[v _uxSavedInterruptStatus `uc ~T0 @X0 1 a ]
"5354
[; ;Source/FreeRTOS/tasks.c: 5354:         if( ( xTaskToNotify ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5354 );
[e $ ! == _xTaskToNotify -> -> 0 `i `*S936 2161  ]
[e ( _Xprintf , (. :s 148C -> 5354 `i ]
[e :U 2161 ]
"5355
[; ;Source/FreeRTOS/tasks.c: 5355:         if( ( uxIndexToNotify < 1 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5355 );
[e $ ! == -> < -> _uxIndexToNotify `i -> 1 `i `i -> 0 `i 2162  ]
[e ( _Xprintf , (. :s 149C -> 5355 `i ]
[e :U 2162 ]
"5375
[; ;Source/FreeRTOS/tasks.c: 5375:         pxTCB = xTaskToNotify;
[e = _pxTCB _xTaskToNotify ]
"5377
[; ;Source/FreeRTOS/tasks.c: 5377:         uxSavedInterruptStatus = 0;
[e = _uxSavedInterruptStatus -> -> 0 `i `uc ]
"5378
[; ;Source/FreeRTOS/tasks.c: 5378:         {
{
"5379
[; ;Source/FreeRTOS/tasks.c: 5379:             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
[e = _ucOriginalNotifyState *U + &U . *U _pxTCB 10 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux ]
"5380
[; ;Source/FreeRTOS/tasks.c: 5380:             pxTCB->ucNotifyState[ uxIndexToNotify ] = ( ( uint8_t ) 2 );
[e = *U + &U . *U _pxTCB 10 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux -> -> 2 `i `uc ]
"5384
[; ;Source/FreeRTOS/tasks.c: 5384:             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
[e ++ *U + &U . *U _pxTCB 9 * -> _uxIndexToNotify `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux -> -> 1 `i `ul ]
"5390
[; ;Source/FreeRTOS/tasks.c: 5390:             if( ucOriginalNotifyState == ( ( uint8_t ) 1 ) )
[e $ ! == -> _ucOriginalNotifyState `i -> -> -> 1 `i `uc `i 2163  ]
"5391
[; ;Source/FreeRTOS/tasks.c: 5391:             {
{
"5393
[; ;Source/FreeRTOS/tasks.c: 5393:                 if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == ((void*)0) ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5393 );
[e $ ! == -> == . *U &U . *U _pxTCB 2 4 -> -> -> 0 `i `*v `*S931 `i -> 0 `i 2164  ]
[e ( _Xprintf , (. :s 150C -> 5393 `i ]
[e :U 2164 ]
"5395
[; ;Source/FreeRTOS/tasks.c: 5395:                 if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
[e $ ! == -> _uxSchedulerSuspended `i -> -> -> -> 0 `i `c `uc `i 2165  ]
"5396
[; ;Source/FreeRTOS/tasks.c: 5396:                 {
{
"5397
[; ;Source/FreeRTOS/tasks.c: 5397:                     { List_t * const pxList = ( &( pxTCB->xStateListItem ) )->pvContainer; ( &( pxTCB->xStateListItem ) )->pxNext->pxPrevious = ( &( pxTCB->xStateListItem ) )->pxPrevious; ( &( pxTCB->xStateListItem ) )->pxPrevious->pxNext = ( &( pxTCB->xStateListItem ) )->pxNext; if( pxList->pxIndex == ( &( pxTCB->xStateListItem ) ) ) { pxList->pxIndex = ( &( pxTCB->xStateListItem ) )->pxPrevious; } ( &( pxTCB->xStateListItem ) )->pvContainer = ((void*)0); ( pxList->uxNumberOfItems )--; };
{
[v F7897 `*S931 ~T0 @X0 1 t ]
[v _pxList `C*S931 ~T0 @X0 1 a ]
[e = _pxList . *U &U . *U _pxTCB 1 4 ]
[e = . *U . *U &U . *U _pxTCB 1 1 2 . *U &U . *U _pxTCB 1 2 ]
[e = . *U . *U &U . *U _pxTCB 1 2 1 . *U &U . *U _pxTCB 1 1 ]
[e $ ! == . *U _pxList 1 &U . *U _pxTCB 1 2166  ]
{
[e = . *U _pxList 1 . *U &U . *U _pxTCB 1 2 ]
}
[e :U 2166 ]
[e = . *U &U . *U _pxTCB 1 4 -> -> -> 0 `i `*v `*S931 ]
[e -- . *U _pxList 0 -> -> 1 `i `Vuc ]
}
"5398
[; ;Source/FreeRTOS/tasks.c: 5398:                     ; { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; { ListItem_t * const pxIndex = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->pxIndex; ; ; ( &( ( pxTCB )->xStateListItem ) )->pxNext = pxIndex; ( &( ( pxTCB )->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( ( pxTCB )->xStateListItem ) ); pxIndex->pxPrevious = ( &( ( pxTCB )->xStateListItem ) ); ( &( ( pxTCB )->xStateListItem ) )->pvContainer = ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) ); ( ( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ) )->uxNumberOfItems )++; }; ;
{
[e $ ! > -> . *U _pxTCB 3 `i -> _uxTopReadyPriority `i 2167  ]
{
[e = _uxTopReadyPriority . *U _pxTCB 3 ]
}
[e :U 2167 ]
}
{
[v F7899 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 1 ]
[e = . *U &U . *U _pxTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 1 ]
[e = . *U &U . *U _pxTCB 1 4 &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux ]
[e ++ . *U &U *U + &U _pxReadyTasksLists * -> . *U _pxTCB 3 `ux -> -> # *U &U _pxReadyTasksLists `ui `ux 0 -> -> 1 `i `Vuc ]
}
"5399
[; ;Source/FreeRTOS/tasks.c: 5399:                 }
}
[e $U 2168  ]
"5400
[; ;Source/FreeRTOS/tasks.c: 5400:                 else
[e :U 2165 ]
"5401
[; ;Source/FreeRTOS/tasks.c: 5401:                 {
{
"5404
[; ;Source/FreeRTOS/tasks.c: 5404:                     { ListItem_t * const pxIndex = ( &( xPendingReadyList ) )->pxIndex; ; ; ( &( pxTCB->xEventListItem ) )->pxNext = pxIndex; ( &( pxTCB->xEventListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( pxTCB->xEventListItem ) ); pxIndex->pxPrevious = ( &( pxTCB->xEventListItem ) ); ( &( pxTCB->xEventListItem ) )->pvContainer = ( &( xPendingReadyList ) ); ( ( &( xPendingReadyList ) )->uxNumberOfItems )++; };
{
[v F7901 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U _xPendingReadyList 1 ]
[e = . *U &U . *U _pxTCB 2 1 _pxIndex ]
[e = . *U &U . *U _pxTCB 2 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxTCB 2 ]
[e = . *U _pxIndex 2 &U . *U _pxTCB 2 ]
[e = . *U &U . *U _pxTCB 2 4 &U _xPendingReadyList ]
[e ++ . *U &U _xPendingReadyList 0 -> -> 1 `i `Vuc ]
}
"5405
[; ;Source/FreeRTOS/tasks.c: 5405:                 }
}
[e :U 2168 ]
"5407
[; ;Source/FreeRTOS/tasks.c: 5407:                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
[e $ ! > -> . *U _pxTCB 3 `i -> . *U _pxCurrentTCB 3 `i 2169  ]
"5408
[; ;Source/FreeRTOS/tasks.c: 5408:                 {
{
"5411
[; ;Source/FreeRTOS/tasks.c: 5411:                     if( pxHigherPriorityTaskWoken != ((void*)0) )
[e $ ! != _pxHigherPriorityTaskWoken -> -> -> 0 `i `*v `*c 2170  ]
"5412
[; ;Source/FreeRTOS/tasks.c: 5412:                     {
{
"5413
[; ;Source/FreeRTOS/tasks.c: 5413:                         *pxHigherPriorityTaskWoken = ( ( BaseType_t ) 1 );
[e = *U _pxHigherPriorityTaskWoken -> -> 1 `i `c ]
"5414
[; ;Source/FreeRTOS/tasks.c: 5414:                     }
}
[e :U 2170 ]
"5419
[; ;Source/FreeRTOS/tasks.c: 5419:                     xYieldPending = ( ( BaseType_t ) 1 );
[e = _xYieldPending -> -> 1 `i `c ]
"5420
[; ;Source/FreeRTOS/tasks.c: 5420:                 }
}
[e $U 2171  ]
"5421
[; ;Source/FreeRTOS/tasks.c: 5421:                 else
[e :U 2169 ]
"5422
[; ;Source/FreeRTOS/tasks.c: 5422:                 {
{
"5424
[; ;Source/FreeRTOS/tasks.c: 5424:                 }
}
[e :U 2171 ]
"5425
[; ;Source/FreeRTOS/tasks.c: 5425:             }
}
[e :U 2163 ]
"5426
[; ;Source/FreeRTOS/tasks.c: 5426:         }
}
"5427
[; ;Source/FreeRTOS/tasks.c: 5427:         ( void ) ( uxSavedInterruptStatus );
[e _uxSavedInterruptStatus ]
"5428
[; ;Source/FreeRTOS/tasks.c: 5428:     }
[e :UE 2160 ]
}
"5435
[; ;Source/FreeRTOS/tasks.c: 5435:     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
[v _xTaskGenericNotifyStateClear `(c ~T0 @X0 1 ef2`*S936`uc ]
"5437
[; ;Source/FreeRTOS/tasks.c: 5437:     {
{
[e :U _xTaskGenericNotifyStateClear ]
"5435
[; ;Source/FreeRTOS/tasks.c: 5435:     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"5436
[; ;Source/FreeRTOS/tasks.c: 5436:                                              UBaseType_t uxIndexToClear )
[v _uxIndexToClear `uc ~T0 @X0 1 r2 ]
"5437
[; ;Source/FreeRTOS/tasks.c: 5437:     {
[f ]
"5438
[; ;Source/FreeRTOS/tasks.c: 5438:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"5439
[; ;Source/FreeRTOS/tasks.c: 5439:         BaseType_t xReturn;
[v _xReturn `c ~T0 @X0 1 a ]
"5441
[; ;Source/FreeRTOS/tasks.c: 5441:         if( ( uxIndexToClear < 1 ) == 0 ) Xprintf("ASSERT:%s:%d\r\n" "Source/FreeRTOS/tasks.c", 5441 );
[e $ ! == -> < -> _uxIndexToClear `i -> 1 `i `i -> 0 `i 2173  ]
[e ( _Xprintf , (. :s 151C -> 5441 `i ]
[e :U 2173 ]
"5445
[; ;Source/FreeRTOS/tasks.c: 5445:         pxTCB = ( ( ( xTask ) == ((void*)0) ) ? pxCurrentTCB : ( xTask ) );
[e = _pxTCB ? == _xTask -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTask ]
"5447
[; ;Source/FreeRTOS/tasks.c: 5447:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"5448
[; ;Source/FreeRTOS/tasks.c: 5448:         {
{
"5449
[; ;Source/FreeRTOS/tasks.c: 5449:             if( pxTCB->ucNotifyState[ uxIndexToClear ] == ( ( uint8_t ) 2 ) )
[e $ ! == -> *U + &U . *U _pxTCB 10 * -> _uxIndexToClear `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux `i -> -> -> 2 `i `uc `i 2174  ]
"5450
[; ;Source/FreeRTOS/tasks.c: 5450:             {
{
"5451
[; ;Source/FreeRTOS/tasks.c: 5451:                 pxTCB->ucNotifyState[ uxIndexToClear ] = ( ( uint8_t ) 0 );
[e = *U + &U . *U _pxTCB 10 * -> _uxIndexToClear `ux -> -> # *U &U . *U _pxTCB 10 `ui `ux -> -> 0 `i `uc ]
"5452
[; ;Source/FreeRTOS/tasks.c: 5452:                 xReturn = ( ( ( BaseType_t ) 1 ) );
[e = _xReturn -> -> 1 `i `c ]
"5453
[; ;Source/FreeRTOS/tasks.c: 5453:             }
}
[e $U 2175  ]
"5454
[; ;Source/FreeRTOS/tasks.c: 5454:             else
[e :U 2174 ]
"5455
[; ;Source/FreeRTOS/tasks.c: 5455:             {
{
"5456
[; ;Source/FreeRTOS/tasks.c: 5456:                 xReturn = ( ( ( BaseType_t ) 0 ) );
[e = _xReturn -> -> 0 `i `c ]
"5457
[; ;Source/FreeRTOS/tasks.c: 5457:             }
}
[e :U 2175 ]
"5458
[; ;Source/FreeRTOS/tasks.c: 5458:         }
}
"5459
[; ;Source/FreeRTOS/tasks.c: 5459:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2176  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2176 ]
"5461
[; ;Source/FreeRTOS/tasks.c: 5461:         return xReturn;
[e ) _xReturn ]
[e $UE 2172  ]
"5462
[; ;Source/FreeRTOS/tasks.c: 5462:     }
[e :UE 2172 ]
}
"5469
[; ;Source/FreeRTOS/tasks.c: 5469:     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
[v _ulTaskGenericNotifyValueClear `(ul ~T0 @X0 1 ef3`*S936`uc`ul ]
"5472
[; ;Source/FreeRTOS/tasks.c: 5472:     {
{
[e :U _ulTaskGenericNotifyValueClear ]
"5469
[; ;Source/FreeRTOS/tasks.c: 5469:     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
[v _xTask `*S936 ~T0 @X0 1 r1 ]
"5470
[; ;Source/FreeRTOS/tasks.c: 5470:                                             UBaseType_t uxIndexToClear,
[v _uxIndexToClear `uc ~T0 @X0 1 r2 ]
"5471
[; ;Source/FreeRTOS/tasks.c: 5471:                                             uint32_t ulBitsToClear )
[v _ulBitsToClear `ul ~T0 @X0 1 r3 ]
"5472
[; ;Source/FreeRTOS/tasks.c: 5472:     {
[f ]
"5473
[; ;Source/FreeRTOS/tasks.c: 5473:         TCB_t * pxTCB;
[v _pxTCB `*S936 ~T0 @X0 1 a ]
"5474
[; ;Source/FreeRTOS/tasks.c: 5474:         uint32_t ulReturn;
[v _ulReturn `ul ~T0 @X0 1 a ]
"5478
[; ;Source/FreeRTOS/tasks.c: 5478:         pxTCB = ( ( ( xTask ) == ((void*)0) ) ? pxCurrentTCB : ( xTask ) );
[e = _pxTCB ? == _xTask -> -> -> 0 `i `*v `*S936 : _pxCurrentTCB _xTask ]
"5480
[; ;Source/FreeRTOS/tasks.c: 5480:         POSTINC1 = INTCON; INTCONbits.GIE_GIEH = 0;;
[e = _POSTINC1 _INTCON ]
[e = . . _INTCONbits 0 7 -> -> 0 `i `uc ]
"5481
[; ;Source/FreeRTOS/tasks.c: 5481:         {
{
"5484
[; ;Source/FreeRTOS/tasks.c: 5484:             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
[e = _ulReturn *U + &U . *U _pxTCB 9 * -> _uxIndexToClear `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux ]
"5485
[; ;Source/FreeRTOS/tasks.c: 5485:             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
[e =& *U + &U . *U _pxTCB 9 * -> _uxIndexToClear `ux -> -> # *U &U . *U _pxTCB 9 `ui `ux -> ~ _ulBitsToClear `ul ]
"5486
[; ;Source/FreeRTOS/tasks.c: 5486:         }
}
"5487
[; ;Source/FreeRTOS/tasks.c: 5487:         __asm("MOVF	POSTDEC1, 1, 0"); if( INDF1 & 0x80 ) { INTCONbits.GIE_GIEH = 1;; };
[; <" MOVF	POSTDEC1, 1, 0 ;# ">
[e $ ! != & -> _INDF1 `i -> 128 `i -> 0 `i 2178  ]
{
[e = . . _INTCONbits 0 7 -> -> 1 `i `uc ]
}
[e :U 2178 ]
"5489
[; ;Source/FreeRTOS/tasks.c: 5489:         return ulReturn;
[e ) _ulReturn ]
[e $UE 2177  ]
"5490
[; ;Source/FreeRTOS/tasks.c: 5490:     }
[e :UE 2177 ]
}
"5532
[; ;Source/FreeRTOS/tasks.c: 5532: static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
[v _prvAddCurrentTaskToDelayedList `(v ~T0 @X0 1 sf2`us`Cc ]
"5534
[; ;Source/FreeRTOS/tasks.c: 5534: {
{
[e :U _prvAddCurrentTaskToDelayedList ]
"5532
[; ;Source/FreeRTOS/tasks.c: 5532: static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
[v _xTicksToWait `us ~T0 @X0 1 r1 ]
"5533
[; ;Source/FreeRTOS/tasks.c: 5533:                                             const BaseType_t xCanBlockIndefinitely )
[v _xCanBlockIndefinitely `Cc ~T0 @X0 1 r2 ]
"5534
[; ;Source/FreeRTOS/tasks.c: 5534: {
[f ]
"5535
[; ;Source/FreeRTOS/tasks.c: 5535:     TickType_t xTimeToWake;
[v _xTimeToWake `us ~T0 @X0 1 a ]
"5536
[; ;Source/FreeRTOS/tasks.c: 5536:     const TickType_t xConstTickCount = xTickCount;
[v _xConstTickCount `Cus ~T0 @X0 1 a ]
[e = _xConstTickCount _xTickCount ]
"5549
[; ;Source/FreeRTOS/tasks.c: 5549:     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
[e $ ! == -> ( _uxListRemove (1 &U . *U _pxCurrentTCB 1 `i -> -> -> 0 `i `uc `i 2180  ]
"5550
[; ;Source/FreeRTOS/tasks.c: 5550:     {
{
"5554
[; ;Source/FreeRTOS/tasks.c: 5554:     }
}
[e $U 2181  ]
"5555
[; ;Source/FreeRTOS/tasks.c: 5555:     else
[e :U 2180 ]
"5556
[; ;Source/FreeRTOS/tasks.c: 5556:     {
{
"5558
[; ;Source/FreeRTOS/tasks.c: 5558:     }
}
[e :U 2181 ]
"5561
[; ;Source/FreeRTOS/tasks.c: 5561:     {
{
"5562
[; ;Source/FreeRTOS/tasks.c: 5562:         if( ( xTicksToWait == ( TickType_t ) 0xffff ) && ( xCanBlockIndefinitely != ( ( BaseType_t ) 0 ) ) )
[e $ ! && == -> _xTicksToWait `ui -> -> -> 65535 `ui `us `ui != -> _xCanBlockIndefinitely `i -> -> -> 0 `i `c `i 2182  ]
"5563
[; ;Source/FreeRTOS/tasks.c: 5563:         {
{
"5567
[; ;Source/FreeRTOS/tasks.c: 5567:             { ListItem_t * const pxIndex = ( &xSuspendedTaskList )->pxIndex; ; ; ( &( pxCurrentTCB->xStateListItem ) )->pxNext = pxIndex; ( &( pxCurrentTCB->xStateListItem ) )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( &( pxCurrentTCB->xStateListItem ) ); pxIndex->pxPrevious = ( &( pxCurrentTCB->xStateListItem ) ); ( &( pxCurrentTCB->xStateListItem ) )->pvContainer = ( &xSuspendedTaskList ); ( ( &xSuspendedTaskList )->uxNumberOfItems )++; };
{
[v F7919 `*S930 ~T0 @X0 1 t ]
[v _pxIndex `C*S930 ~T0 @X0 1 a ]
[e = _pxIndex . *U &U _xSuspendedTaskList 1 ]
[e = . *U &U . *U _pxCurrentTCB 1 1 _pxIndex ]
[e = . *U &U . *U _pxCurrentTCB 1 2 . *U _pxIndex 2 ]
[e = . *U . *U _pxIndex 2 1 &U . *U _pxCurrentTCB 1 ]
[e = . *U _pxIndex 2 &U . *U _pxCurrentTCB 1 ]
[e = . *U &U . *U _pxCurrentTCB 1 4 &U _xSuspendedTaskList ]
[e ++ . *U &U _xSuspendedTaskList 0 -> -> 1 `i `Vuc ]
}
"5568
[; ;Source/FreeRTOS/tasks.c: 5568:         }
}
[e $U 2183  ]
"5569
[; ;Source/FreeRTOS/tasks.c: 5569:         else
[e :U 2182 ]
"5570
[; ;Source/FreeRTOS/tasks.c: 5570:         {
{
"5574
[; ;Source/FreeRTOS/tasks.c: 5574:             xTimeToWake = xConstTickCount + xTicksToWait;
[e = _xTimeToWake -> + -> _xConstTickCount `ui -> _xTicksToWait `ui `us ]
"5577
[; ;Source/FreeRTOS/tasks.c: 5577:             ( ( &( pxCurrentTCB->xStateListItem ) )->xItemValue = ( xTimeToWake ) );
[e = . *U &U . *U _pxCurrentTCB 1 0 _xTimeToWake ]
"5579
[; ;Source/FreeRTOS/tasks.c: 5579:             if( xTimeToWake < xConstTickCount )
[e $ ! < -> _xTimeToWake `ui -> _xConstTickCount `ui 2184  ]
"5580
[; ;Source/FreeRTOS/tasks.c: 5580:             {
{
"5583
[; ;Source/FreeRTOS/tasks.c: 5583:                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
[e ( _vListInsert (2 , _pxOverflowDelayedTaskList &U . *U _pxCurrentTCB 1 ]
"5584
[; ;Source/FreeRTOS/tasks.c: 5584:             }
}
[e $U 2185  ]
"5585
[; ;Source/FreeRTOS/tasks.c: 5585:             else
[e :U 2184 ]
"5586
[; ;Source/FreeRTOS/tasks.c: 5586:             {
{
"5589
[; ;Source/FreeRTOS/tasks.c: 5589:                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
[e ( _vListInsert (2 , _pxDelayedTaskList &U . *U _pxCurrentTCB 1 ]
"5594
[; ;Source/FreeRTOS/tasks.c: 5594:                 if( xTimeToWake < xNextTaskUnblockTime )
[e $ ! < -> _xTimeToWake `ui -> _xNextTaskUnblockTime `ui 2186  ]
"5595
[; ;Source/FreeRTOS/tasks.c: 5595:                 {
{
"5596
[; ;Source/FreeRTOS/tasks.c: 5596:                     xNextTaskUnblockTime = xTimeToWake;
[e = _xNextTaskUnblockTime _xTimeToWake ]
"5597
[; ;Source/FreeRTOS/tasks.c: 5597:                 }
}
[e $U 2187  ]
"5598
[; ;Source/FreeRTOS/tasks.c: 5598:                 else
[e :U 2186 ]
"5599
[; ;Source/FreeRTOS/tasks.c: 5599:                 {
{
"5601
[; ;Source/FreeRTOS/tasks.c: 5601:                 }
}
[e :U 2187 ]
"5602
[; ;Source/FreeRTOS/tasks.c: 5602:             }
}
[e :U 2185 ]
"5603
[; ;Source/FreeRTOS/tasks.c: 5603:         }
}
[e :U 2183 ]
"5604
[; ;Source/FreeRTOS/tasks.c: 5604:     }
}
"5642
[; ;Source/FreeRTOS/tasks.c: 5642: }
[e :UE 2179 ]
}
[a 135C 37 115 0 ]
[a 9C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 11C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 69C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 70C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 71C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 72C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 73C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 74C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 75C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 76C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 77C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 78C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 79C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 88C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 90C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 91C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 92C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 97C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 118C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 123C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 124C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 125C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 126C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 127C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 128C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 129C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 130C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 131C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 138C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 139C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 140C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 141C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 142C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 143C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 144C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 145C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 146C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 147C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 148C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 149C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 150C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 151C 65 83 83 69 82 84 58 37 115 58 37 100 13 10 83 111 117 114 99 101 47 70 114 101 101 82 84 79 83 47 116 97 115 107 115 46 99 0 ]
[a 82C 73 68 76 69 0 ]
[a 99C 120 78 101 120 61 0 ]
[a 111C 118 84 97 115 107 83 119 105 116 99 104 67 111 110 116 101 120 116 61 0 ]
[a 119C 117 84 80 114 105 111 61 0 ]
[a 98C 120 67 111 110 61 0 ]
[a 12C 112 73 84 61 0 ]
[a 93C 84 73 84 61 0 ]
[a 94C 84 73 84 61 0 ]
[a 96C 84 73 84 61 0 ]
[a 100C 84 73 84 61 0 ]
[a 101C 84 73 84 61 0 ]
[a 102C 84 73 84 61 0 ]
[a 103C 84 73 84 61 0 ]
[a 104C 84 73 84 61 0 ]
[a 105C 84 73 84 61 0 ]
[a 106C 84 73 84 61 0 ]
[a 107C 84 73 84 61 0 ]
[a 108C 84 73 84 61 0 ]
[a 109C 84 73 84 61 0 ]
[a 110C 84 73 84 61 0 ]
[a 95C 120 84 67 61 0 ]
[a 113C 84 83 67 61 0 ]
[a 114C 84 83 67 61 0 ]
[a 115C 84 83 67 61 0 ]
[a 117C 84 83 67 61 0 ]
[a 122C 84 83 67 61 0 ]
[a 35C 112 120 67 117 114 114 101 110 116 84 67 66 61 0 ]
[a 120C 112 120 67 117 114 114 101 110 116 84 67 66 52 61 0 ]
[a 121C 112 120 67 117 114 114 101 110 116 84 67 66 49 61 0 ]
[a 112C 112 120 67 117 114 114 101 110 116 84 67 66 48 61 0 ]
[a 116C 112 120 67 117 114 114 101 110 116 84 67 66 48 61 0 ]
[a 3C 112 120 78 101 119 84 67 66 40 49 41 61 0 ]
[a 34C 32 120 73 116 101 109 86 97 108 117 101 32 32 32 32 61 32 37 120 13 10 0 ]
[a 28C 32 120 73 116 101 109 86 97 108 117 101 32 32 18446744073709551587 18446744073709551488 18446744073709551488 61 32 37 120 13 10 0 ]
[a 18C 112 99 84 97 115 107 78 97 109 101 32 32 32 32 32 61 32 37 115 13 10 0 ]
[a 7C 112 114 118 73 110 105 116 105 97 108 105 115 101 78 101 119 84 97 115 107 32 48 48 50 32 112 120 83 116 97 99 107 61 37 112 13 10 0 ]
[a 4C 120 84 97 115 107 67 114 101 97 116 101 32 48 48 50 32 112 120 83 116 97 99 107 61 37 112 13 10 0 ]
[a 2C 120 84 97 115 107 67 114 101 97 116 101 32 48 48 65 32 112 120 78 101 119 84 67 66 61 37 112 13 10 0 ]
[a 6C 112 114 118 73 110 105 116 105 97 108 105 115 101 78 101 119 84 97 115 107 32 48 48 49 32 112 120 78 101 119 84 67 66 61 37 112 13 10 0 ]
[a 1C 120 84 97 115 107 67 114 101 97 116 101 32 48 48 49 32 112 120 78 101 119 84 67 66 61 37 112 13 10 0 ]
[a 58C 32 32 43 45 45 32 112 120 67 111 110 116 97 105 110 101 114 32 61 37 112 13 10 0 ]
[a 65C 32 32 43 45 45 32 112 120 67 111 110 116 97 105 110 101 114 32 61 37 112 13 10 0 ]
[a 45C 32 32 43 45 45 32 112 120 80 114 101 118 105 111 117 115 32 32 61 37 112 13 10 0 ]
[a 50C 32 32 43 45 45 32 112 120 80 114 101 118 105 111 117 115 32 32 61 37 112 13 10 0 ]
[a 56C 32 32 43 45 45 32 112 120 80 114 101 118 105 111 117 115 32 32 61 37 112 13 10 0 ]
[a 63C 32 32 43 45 45 32 112 120 80 114 101 118 105 111 117 115 32 32 61 37 112 13 10 0 ]
[a 51C 32 32 43 45 45 32 112 118 79 119 110 101 114 32 32 32 32 32 61 37 112 13 10 0 ]
[a 57C 32 32 43 45 45 32 112 118 79 119 110 101 114 32 32 32 32 32 61 37 112 13 10 0 ]
[a 64C 32 32 43 45 45 32 112 118 79 119 110 101 114 32 32 32 32 32 61 37 112 13 10 0 ]
[a 44C 32 32 43 45 45 32 112 120 78 101 120 116 32 32 32 32 32 32 61 37 112 13 10 0 ]
[a 49C 32 32 43 45 45 32 112 120 78 101 120 116 32 32 32 32 32 32 61 37 112 13 10 0 ]
[a 55C 32 32 43 45 45 32 112 120 78 101 120 116 32 32 32 32 32 32 61 37 112 13 10 0 ]
[a 62C 32 32 43 45 45 32 112 120 78 101 120 116 32 32 32 32 32 32 61 37 112 13 10 0 ]
[a 42C 120 76 105 115 116 69 110 100 32 32 32 32 32 32 32 32 32 32 61 37 112 13 10 0 ]
[a 47C 112 120 73 110 100 101 120 32 32 32 32 32 32 32 32 32 32 32 61 37 112 13 10 0 ]
[a 29C 120 69 118 101 110 116 76 105 115 116 73 116 101 109 32 61 32 37 112 13 10 0 ]
[a 23C 120 83 116 97 116 101 76 105 115 116 73 116 101 109 32 61 32 37 112 13 10 0 ]
[a 21C 32 112 120 84 111 112 79 102 83 116 97 99 107 32 32 61 32 37 112 13 10 0 ]
[a 22C 32 112 120 69 110 100 79 102 83 116 97 99 107 32 32 61 32 37 112 13 10 0 ]
[a 24C 32 112 118 67 111 110 116 97 105 110 101 114 32 32 32 61 32 37 112 13 10 0 ]
[a 27C 32 112 120 80 114 101 118 105 111 117 115 32 32 32 32 61 32 37 112 13 10 0 ]
[a 25C 32 112 118 79 119 110 101 114 32 32 32 32 32 32 32 61 32 37 112 13 10 0 ]
[a 20C 32 112 120 83 116 97 99 107 32 32 32 32 32 32 32 61 32 37 112 13 10 0 ]
[a 17C 112 120 78 101 119 84 67 66 32 32 32 32 32 32 32 61 32 37 112 13 10 0 ]
[a 26C 32 112 120 78 101 120 116 32 32 32 32 32 32 32 32 61 32 37 112 13 10 0 ]
[a 32C 32 112 120 78 101 120 116 32 32 32 32 32 18446744073709551587 18446744073709551488 18446744073709551488 32 61 32 37 112 13 10 0 ]
[a 30C 32 112 118 67 111 110 116 97 105 110 101 114 32 18446744073709551587 18446744073709551488 18446744073709551488 61 32 37 112 13 10 0 ]
[a 33C 32 112 120 80 114 101 118 105 111 117 115 32 32 18446744073709551587 18446744073709551488 18446744073709551488 61 32 37 112 13 10 0 ]
[a 31C 32 112 118 79 119 110 101 114 32 32 32 32 32 18446744073709551587 18446744073709551488 18446744073709551488 61 32 37 112 13 10 0 ]
[a 53C 120 76 105 115 116 69 110 100 46 112 120 78 101 120 116 40 37 100 41 32 37 112 13 10 0 ]
[a 60C 120 76 105 115 116 69 110 100 46 112 120 78 101 120 116 40 37 100 41 32 37 112 13 10 0 ]
[a 133C 78 97 109 101 9 83 116 97 116 101 9 80 114 105 111 9 83 116 97 99 107 9 78 117 109 13 10 0 ]
[a 66C 117 120 67 117 114 114 101 110 116 78 117 109 98 101 114 79 102 84 97 115 107 115 61 37 100 13 10 0 ]
[a 43C 32 32 43 45 45 32 120 73 116 101 109 86 97 108 117 101 32 32 61 37 100 13 10 0 ]
[a 48C 32 32 43 45 45 32 120 73 116 101 109 86 97 108 117 101 32 32 61 37 100 13 10 0 ]
[a 54C 32 32 43 45 45 32 120 73 116 101 109 86 97 108 117 101 32 32 61 37 100 13 10 0 ]
[a 61C 32 32 43 45 45 32 120 73 116 101 109 86 97 108 117 101 32 32 61 37 100 13 10 0 ]
[a 41C 84 65 83 75 32 78 85 77 32 61 32 37 100 13 10 0 ]
[a 19C 32 117 120 80 114 105 111 114 105 116 121 32 32 32 32 61 32 37 100 13 10 0 ]
[a 136C 9 37 99 9 37 100 9 37 100 9 37 100 13 10 0 ]
[a 10C 112 114 118 73 110 105 116 105 97 108 105 115 101 78 101 119 84 97 115 107 32 48 48 51 13 10 0 ]
[a 5C 120 84 97 115 107 67 114 101 97 116 101 32 48 48 51 13 10 0 ]
[a 68C 112 114 118 65 100 100 78 101 119 84 97 115 107 84 111 82 101 97 100 121 76 105 115 116 18446744073709551587 18446744073709551488 18446744073709551488 48 51 13 10 0 ]
[a 8C 112 114 118 73 110 105 116 105 97 108 105 115 101 78 101 119 84 97 115 107 32 48 48 50 13 10 0 ]
[a 67C 112 114 118 65 100 100 78 101 119 84 97 115 107 84 111 82 101 97 100 121 76 105 115 116 18446744073709551587 18446744073709551488 18446744073709551488 48 50 13 10 0 ]
[a 132C 13 10 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 0 ]
[a 134C 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 0 ]
[a 137C 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 0 ]
[a 40C 80 82 73 79 82 73 84 89 32 61 32 37 100 32 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 0 ]
[a 37C 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 13 10 0 ]
[a 39C 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 13 10 0 ]
[a 14C 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 13 10 0 ]
[a 16C 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 13 10 0 ]
[a 38C 42 42 42 32 112 120 82 101 97 100 121 84 97 115 107 115 76 105 115 116 115 91 93 32 42 42 42 13 10 0 ]
[a 15C 42 42 42 32 32 116 97 115 107 73 110 102 111 32 32 42 42 42 13 10 0 ]
[a 81C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 50 41 13 10 0 ]
[a 80C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 49 41 13 10 0 ]
[a 83C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 50 41 120 82 101 116 117 114 110 61 37 100 32 13 10 0 ]
[a 89C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 57 41 32 13 10 0 ]
[a 87C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 56 41 32 13 10 0 ]
[a 86C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 55 41 32 13 10 0 ]
[a 85C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 53 41 32 13 10 0 ]
[a 84C 118 84 97 115 107 83 116 97 114 116 83 99 104 101 100 117 108 101 114 40 48 48 51 41 32 13 10 0 ]
[a 13C 13 10 0 ]
[a 36C 13 10 0 ]
[a 46C 13 10 0 ]
[a 52C 13 10 0 ]
[a 59C 13 10 0 ]
